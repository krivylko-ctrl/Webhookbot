import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import numpy as np

from database import Database
from config import Config
from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
import utils

st.set_page_config(page_title="Backtest", page_icon="üìà", layout="wide")

def main():
    st.title("üìà –ë—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ KWIN")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    @st.cache_resource
    def init_components():
        config = Config()
        db = Database()
        state_manager = StateManager(db)
        return config, db, state_manager
    
    config, db, state_manager = init_components()
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò –ë–≠–ö–¢–ï–°–¢–ê ===
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∞")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        period = st.selectbox(
            "üìÖ –ü–µ—Ä–∏–æ–¥ –±—ç–∫—Ç–µ—Å—Ç–∞",
            options=[30, 60, 180],
            index=0,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col2:
        initial_capital = st.number_input(
            "üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ($)",
            min_value=100.0,
            max_value=100000.0,
            value=1000.0,
            step=100.0
        )
    
    with col3:
        commission_rate = st.number_input(
            "üí∏ –ö–æ–º–∏—Å—Å–∏—è (%)",
            min_value=0.0,
            max_value=1.0,
            value=0.055,
            step=0.001,
            format="%.3f"
        )
    
    # === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê ===
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç", use_container_width=True):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ç–∫—Ç–µ—Å—Ç..."):
            results = run_backtest(period, initial_capital, commission_rate, db)
            
            if results:
                display_backtest_results(results)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
    
    # === –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –°–î–ï–õ–û–ö ===
    st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
    
    period_analysis = st.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        options=[30, 60, 180],
        key="analysis_period"
    )
    
    trades = db.get_trades_by_period(period_analysis)
    
    if trades:
        display_trades_analysis(trades, initial_capital)
    else:
        st.info(f"–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_analysis} –¥–Ω–µ–π")

def run_backtest(period_days: int, initial_capital: float, commission_rate: float, db: Database) -> dict:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        trades = db.get_trades_by_period(period_days)
        
        if not trades:
            return None
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        capital = initial_capital
        equity_curve = [initial_capital]
        timestamps = [datetime.now() - timedelta(days=period_days)]
        
        total_trades = 0
        winning_trades = 0
        total_pnl = 0
        max_drawdown = 0
        peak_equity = initial_capital
        
        trade_results = []
        
        for trade in trades:
            if trade['status'] == 'closed' and trade['pnl'] is not None:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π
                pnl = trade['pnl']
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º PnL —Å –Ω–æ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if commission_rate != 0.055:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è Bybit
                    entry_price = trade['entry_price']
                    exit_price = trade['exit_price'] or entry_price
                    quantity = trade['quantity']
                    direction = trade['direction']
                    
                    pnl = utils.calculate_pnl(
                        entry_price, exit_price, quantity, direction,
                        include_fees=True, fee_rate=commission_rate/100
                    )
                
                capital += pnl
                total_pnl += pnl
                total_trades += 1
                
                if pnl > 0:
                    winning_trades += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏–≤—É—é equity
                equity_curve.append(capital)
                timestamps.append(pd.to_datetime(trade['exit_time']))
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
                if capital > peak_equity:
                    peak_equity = capital
                
                current_drawdown = (peak_equity - capital) / peak_equity * 100
                max_drawdown = max(max_drawdown, current_drawdown)
                
                trade_results.append({
                    'entry_time': trade['entry_time'],
                    'exit_time': trade['exit_time'],
                    'direction': trade['direction'],
                    'pnl': pnl,
                    'equity': capital,
                    'rr': trade.get('rr', 0)
                })
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
        avg_pnl = total_pnl / total_trades if total_trades > 0 else 0
        total_return = ((capital - initial_capital) / initial_capital * 100) if initial_capital > 0 else 0
        
        return {
            'initial_capital': initial_capital,
            'final_capital': capital,
            'total_return': total_return,
            'total_pnl': total_pnl,
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'losing_trades': total_trades - winning_trades,
            'win_rate': win_rate,
            'avg_pnl': avg_pnl,
            'max_drawdown': max_drawdown,
            'equity_curve': equity_curve,
            'timestamps': timestamps,
            'trade_results': trade_results
        }
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        return None

def display_backtest_results(results: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    
    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª",
            utils.format_currency(results['final_capital']),
            delta=utils.format_currency(results['total_pnl'])
        )
        st.metric("üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", results['total_trades'])
    
    with col2:
        st.metric(
            "üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            utils.format_percentage(results['total_return']),
        )
        st.metric("üéØ Win Rate", utils.format_percentage(results['win_rate']))
    
    with col3:
        st.metric("üíµ –û–±—â–∏–π PnL", utils.format_currency(results['total_pnl']))
        st.metric("‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", results['winning_trades'])
    
    with col4:
        st.metric("üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", utils.format_percentage(results['max_drawdown']))
        st.metric("‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö", results['losing_trades'])
    
    # === –ö–†–ò–í–ê–Ø EQUITY ===
    st.markdown("### üí∞ –ö—Ä–∏–≤–∞—è Equity")
    
    fig_equity = go.Figure()
    
    fig_equity.add_trace(go.Scatter(
        x=results['timestamps'],
        y=results['equity_curve'],
        mode='lines',
        name='Equity',
        line=dict(color='#1f77b4', width=2)
    ))
    
    fig_equity.update_layout(
        title="–†–∞–∑–≤–∏—Ç–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ö–∞–ø–∏—Ç–∞–ª ($)",
        height=500,
        showlegend=False
    )
    
    st.plotly_chart(fig_equity, use_container_width=True)
    
    # === –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï PnL ===
    st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL")
    
    if results['trade_results']:
        pnl_values = [trade['pnl'] for trade in results['trade_results']]
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ PnL
            fig_hist = go.Figure(data=[go.Histogram(x=pnl_values, nbinsx=20)])
            fig_hist.update_layout(
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL –ø–æ —Å–¥–µ–ª–∫–∞–º",
                xaxis_title="PnL ($)",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫",
                height=400
            )
            st.plotly_chart(fig_hist, use_container_width=True)
        
        with col2:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PnL
            st.markdown("#### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PnL")
            
            pnl_array = np.array(pnl_values)
            
            metrics_data = {
                "–°—Ä–µ–¥–Ω–µ–µ": np.mean(pnl_array),
                "–ú–µ–¥–∏–∞–Ω–∞": np.median(pnl_array),
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": np.std(pnl_array),
                "–ú–∏–Ω–∏–º—É–º": np.min(pnl_array),
                "–ú–∞–∫—Å–∏–º—É–º": np.max(pnl_array),
                "25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å": np.percentile(pnl_array, 25),
                "75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å": np.percentile(pnl_array, 75)
            }
            
            for metric, value in metrics_data.items():
                st.write(f"**{metric}:** {utils.format_currency(value)}")
    
    # === –¢–ê–ë–õ–ò–¶–ê –°–î–ï–õ–û–ö ===
    st.markdown("### üìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫")
    
    if results['trade_results']:
        df_trades = pd.DataFrame(results['trade_results'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        df_trades['entry_time'] = pd.to_datetime(df_trades['entry_time']).dt.strftime('%Y-%m-%d %H:%M')
        df_trades['exit_time'] = pd.to_datetime(df_trades['exit_time']).dt.strftime('%Y-%m-%d %H:%M')
        df_trades['pnl'] = df_trades['pnl'].round(2)
        df_trades['equity'] = df_trades['equity'].round(2)
        df_trades['rr'] = df_trades['rr'].round(2)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        column_mapping = {
            'entry_time': '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞',
            'exit_time': '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞',
            'direction': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'pnl': 'PnL ($)',
            'equity': 'Equity ($)',
            'rr': 'RR'
        }
        
        df_display = df_trades.rename(columns=column_mapping)
        
        st.dataframe(df_display, use_container_width=True, hide_index=True)

def display_trades_analysis(trades: list, initial_capital: float):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    
    if not trades:
        return
    
    df = pd.DataFrame(trades)
    closed_trades = df[df['status'] == 'closed'].copy()
    
    if closed_trades.empty:
        st.info("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    valid_trades = closed_trades.dropna(subset=['pnl', 'entry_time', 'exit_time'])
    
    if valid_trades.empty:
        st.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===
    col1, col2, col3, col4 = st.columns(4)
    
    total_trades = len(valid_trades)
    winning_trades = len(valid_trades[valid_trades['pnl'] > 0])
    total_pnl = valid_trades['pnl'].sum()
    win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
    
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
        st.metric("‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", winning_trades)
    
    with col2:
        st.metric("üéØ Win Rate", utils.format_percentage(win_rate))
        st.metric("‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö", total_trades - winning_trades)
    
    with col3:
        st.metric("üíµ –û–±—â–∏–π PnL", utils.format_currency(total_pnl))
        avg_pnl = valid_trades['pnl'].mean()
        st.metric("üìä –°—Ä–µ–¥–Ω–∏–π PnL", utils.format_currency(avg_pnl))
    
    with col4:
        max_win = valid_trades['pnl'].max()
        max_loss = valid_trades['pnl'].min()
        st.metric("üìà –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å", utils.format_currency(max_win))
        st.metric("üìâ –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫", utils.format_currency(max_loss))
    
    # === –ì–†–ê–§–ò–ö PnL –ü–û –í–†–ï–ú–ï–ù–ò ===
    st.markdown("### üìà PnL –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    valid_trades['exit_time'] = pd.to_datetime(valid_trades['exit_time'])
    valid_trades = valid_trades.sort_values('exit_time')
    valid_trades['cumulative_pnl'] = valid_trades['pnl'].cumsum()
    
    fig_pnl = go.Figure()
    
    # –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL
    fig_pnl.add_trace(go.Scatter(
        x=valid_trades['exit_time'],
        y=valid_trades['cumulative_pnl'],
        mode='lines+markers',
        name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL',
        line=dict(color='#1f77b4', width=2)
    ))
    
    fig_pnl.update_layout(
        title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="PnL ($)",
        height=400
    )
    
    st.plotly_chart(fig_pnl, use_container_width=True)
    
    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
        direction_counts = valid_trades['direction'].value_counts()
        for direction, count in direction_counts.items():
            st.write(f"**{direction.upper()}:** {count} —Å–¥–µ–ª–æ–∫")
    
    with col2:
        st.markdown("#### ‚è±Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è")
        if 'entry_time' in valid_trades.columns:
            valid_trades['entry_time'] = pd.to_datetime(valid_trades['entry_time'])
            valid_trades['hold_time'] = (valid_trades['exit_time'] - valid_trades['entry_time']).dt.total_seconds() / 3600
            
            avg_hold_time = valid_trades['hold_time'].mean()
            max_hold_time = valid_trades['hold_time'].max()
            min_hold_time = valid_trades['hold_time'].min()
            
            st.write(f"**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:** {utils.format_time_duration(avg_hold_time)}")
            st.write(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ:** {utils.format_time_duration(max_hold_time)}")
            st.write(f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ:** {utils.format_time_duration(min_hold_time)}")

if __name__ == "__main__":
    main()
