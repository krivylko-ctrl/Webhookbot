import logging
import random
from datetime import datetime

logger = logging.getLogger(__name__)

class BybitSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API"""
    
    def __init__(self):
        self.positions = {}
        self.orders = {}
        self.balance = 10000.0  # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ USDT
        
    def test_connection(self):
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        return {
            "simulation": True,
            "status": "connected",
            "message": "–°–ò–ú–£–õ–Ø–¶–ò–Ø: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ç–æ—Ä",
            "balance": self.balance
        }
    
    def place_order(self, symbol, side, amount, leverage=10, sl_percent=1.0, tp_percent=3.0):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É ETH
        base_price = 2650.0  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ ETH
        price_variation = random.uniform(-50, 50)  # –ö–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω—ã
        current_price = base_price + price_variation
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if side.lower() == 'long':
            sl_price = current_price * (1 - sl_percent / 100)
            tp_price = current_price * (1 + tp_percent / 100)
        else:  # short
            sl_price = current_price * (1 + sl_percent / 100)
            tp_price = current_price * (1 - tp_percent / 100)
        
        # –†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –º–∞—Ä–∂–∏
        required_margin = (current_price * amount) / leverage
        
        order_id = f"SIM_{int(datetime.now().timestamp())}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
        self.positions[symbol] = {
            "symbol": symbol,
            "side": side,
            "amount": amount,
            "entry_price": current_price,
            "leverage": leverage,
            "sl_price": sl_price,
            "tp_price": tp_price,
            "required_margin": required_margin,
            "timestamp": datetime.now().isoformat()
        }
        
        logger.info(f"üéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø: {side.upper()} {amount} {symbol}")
        logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${current_price:.2f}")
        logger.info(f"   –ü–ª–µ—á–æ: {leverage}x")
        logger.info(f"   –ú–∞—Ä–∂–∞: ${required_margin:.2f}")
        logger.info(f"   SL: ${sl_price:.2f} ({sl_percent}%)")
        logger.info(f"   TP: ${tp_price:.2f} ({tp_percent}%)")
        
        return {
            "simulation": True,
            "order_id": order_id,
            "symbol": symbol,
            "side": side,
            "amount": amount,
            "price": current_price,
            "sl_price": sl_price,
            "tp_price": tp_price,
            "leverage": leverage,
            "required_margin": required_margin,
            "status": "filled"
        }
    
    def close_position(self, symbol):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        
        if symbol not in self.positions:
            return {
                "simulation": True,
                "error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ"
            }
        
        position = self.positions[symbol]
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (—Å –Ω–µ–±–æ–ª—å—à–∏–º –ø—Ä–æ—Ñ–∏—Ç–æ–º)
        entry_price = position["entry_price"]
        profit_variation = random.uniform(10, 50)  # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å
        
        if position["side"].lower() == "long":
            exit_price = entry_price + profit_variation
        else:
            exit_price = entry_price - profit_variation
        
        # –†–∞—Å—á–µ—Ç P&L
        if position["side"].lower() == "long":
            pnl = (exit_price - entry_price) * position["amount"] * position["leverage"]
        else:
            pnl = (entry_price - exit_price) * position["amount"] * position["leverage"]
        
        logger.info(f"üéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –ó–∞–∫—Ä—ã—Ç–∏–µ {position['side'].upper()} {symbol}")
        logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.2f}")
        logger.info(f"   –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${exit_price:.2f}")
        logger.info(f"   P&L: ${pnl:.2f}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del self.positions[symbol]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        self.balance += pnl
        
        return {
            "simulation": True,
            "symbol": symbol,
            "entry_price": entry_price,
            "exit_price": exit_price,
            "pnl": pnl,
            "new_balance": self.balance,
            "status": "closed"
        }
    
    def update_stop_loss(self, symbol, direction, stop_price, trail_amount=None):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å"""
        
        if symbol not in self.positions:
            return {
                "simulation": True,
                "error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º SL –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
        self.positions[symbol]["sl_price"] = stop_price
        
        logger.info(f"üéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SL –¥–ª—è {symbol}")
        logger.info(f"   –ù–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: ${stop_price:.2f}")
        if trail_amount:
            logger.info(f"   –¢—Ä–µ–π–ª–∏–Ω–≥: ${trail_amount:.2f}")
        
        return {
            "simulation": True,
            "symbol": symbol,
            "new_sl_price": stop_price,
            "trail_amount": trail_amount,
            "status": "updated"
        }
    
    def get_positions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        return {
            "simulation": True,
            "positions": list(self.positions.values()),
            "total_count": len(self.positions)
        }
    
    def get_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        return {
            "simulation": True,
            "balance": self.balance,
            "currency": "USDT"
        }