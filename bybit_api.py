import ccxt
import logging
import os
from typing import Dict, Any, Optional
from bybit_simulator import BybitSimulator

API_KEY = os.environ.get("BYBIT_API_KEY")
API_SECRET = os.environ.get("BYBIT_API_SECRET")

logger = logging.getLogger(__name__)

class BybitFuturesClient:
    def __init__(self, api_key: str = "", api_secret: str = "", testnet: bool = True):
        self.api_key = api_key or API_KEY or ""
        self.api_secret = api_secret or API_SECRET or ""
        self.simulator = BybitSimulator()
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CCXT –¥–ª—è Bybit V5 API
        try:
            self.exchange = ccxt.bybit({
                'apiKey': self.api_key,
                'secret': self.api_secret,
                'sandbox': testnet,  # True –¥–ª—è testnet, False –¥–ª—è mainnet
                'enableRateLimit': True,
                'timeout': 30000,
                'options': {
                    'defaultType': 'linear',  # USDT Perpetual –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    'adjustForTimeDifference': True,
                    'recvWindow': 20000,  # –í–∞–∂–Ω–æ –¥–ª—è Bybit V5
                },
                'urls': {
                    'api': {
                        'public': 'https://api-testnet.bybit.com' if testnet else 'https://api.bybit.com',
                        'private': 'https://api-testnet.bybit.com' if testnet else 'https://api.bybit.com'
                    }
                },
                'headers': {
                    'User-Agent': 'CCXT/4.4.99 (+https://github.com/ccxt/ccxt)',
                    'Content-Type': 'application/json'
                }
            })
            
            logger.info("Bybit API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ CCXT:")
            logger.info(f"  API Key: {'–ù–ê–ô–î–ï–ù' if self.api_key else '–ù–ï –ù–ê–ô–î–ï–ù'}")
            logger.info(f"  API Secret: {'–ù–ê–ô–î–ï–ù' if self.api_secret else '–ù–ï –ù–ê–ô–î–ï–ù'}")
            logger.info(f"  –†–µ–∂–∏–º: {'DEMO TESTNET' if testnet else 'MAINNET'}")
            logger.info(f"  CCXT –≤–µ—Ä—Å–∏—è: {ccxt.__version__}")
            
            if self.api_key:
                logger.info(f"  Key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {self.api_key[:8]}...")
            if self.api_secret:
                logger.info(f"  Secret –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {self.api_secret[:8]}...")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            testnet_url = 'https://api-testnet.bybit.com' if testnet else 'https://api.bybit.com'
            logger.info(f"  Base URL: {testnet_url}")
            logger.info(f"  API Version: V5")
            logger.info(f"  RecvWindow: 20000ms")
            logger.info("‚úÖ –ì–û–¢–û–í –ö –¢–û–†–ì–û–í–õ–ï: Bybit API –∞–∫—Ç–∏–≤–µ–Ω —á–µ—Ä–µ–∑ CCXT –Ω–∞ Railway.app")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CCXT: {e}")
            self.exchange = None

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit API —á–µ—Ä–µ–∑ CCXT"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            balance = self.exchange.fetch_balance()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ CCXT")
            return {
                "status": "connected",
                "message": "–†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "testnet": True,
                "balance": balance.get('USDT', {}).get('total', 0)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä")
            return self.simulator.test_connection()

    def place_order(self, symbol: str, direction: str, quantity: float, 
                   entry_price: Optional[float] = None, stop_loss: Optional[float] = None, 
                   take_profit: Optional[float] = None, leverage: int = 10) -> Dict[str, Any]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit —á–µ—Ä–µ–∑ CCXT"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞: ETHUSDT.P -> ETHUSDT –¥–ª—è Bybit
            if symbol.endswith('.P'):
                symbol = symbol[:-2]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã
            side = 'buy' if direction.lower() == 'long' else 'sell'
            order_type = 'market' if entry_price is None else 'limit'
            
            logger.info(f"CCXT: –†–∞–∑–º–µ—â–µ–Ω–∏–µ {order_type} –æ—Ä–¥–µ—Ä–∞ {direction}: {quantity} {symbol}")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
            self.exchange.set_leverage(leverage, symbol)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            if entry_price is None:
                order = self.exchange.create_market_order(symbol, side, quantity)
            else:
                order = self.exchange.create_limit_order(symbol, side, quantity, entry_price)
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —á–µ—Ä–µ–∑ CCXT: {order.get('id')}")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SL/TP –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if stop_loss or take_profit:
                self._place_stop_orders_ccxt(symbol, direction, quantity, stop_loss, take_profit)
            
            return {
                "order_id": order.get('id'),
                "symbol": symbol,
                "side": side,
                "amount": quantity,
                "price": order.get('price'),
                "status": "filled"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ CCXT —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä")
            return self.simulator.place_order(symbol, direction, quantity, leverage, stop_loss, take_profit)

    def _place_stop_orders_ccxt(self, symbol: str, direction: str, quantity: float, 
                               stop_loss: Optional[float], take_profit: Optional[float]):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ SL/TP –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ CCXT"""
        try:
            reduce_side = 'sell' if direction.lower() == 'long' else 'buy'
            
            if stop_loss:
                sl_order = self.exchange.create_order(
                    symbol, 'stop_market', reduce_side, quantity, None, 
                    None, {'stopPrice': stop_loss, 'reduceOnly': True}
                )
                logger.info(f"SL –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sl_order.get('id')}")
            
            if take_profit:
                tp_order = self.exchange.create_order(
                    symbol, 'take_profit_market', reduce_side, quantity, None,
                    None, {'stopPrice': take_profit, 'reduceOnly': True}
                )
                logger.info(f"TP –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tp_order.get('id')}")
                
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP: {e}")

    def open_position(self, symbol: str, direction: str, quantity: float, 
                     entry_price: float = None, stop_loss: float = None, 
                     take_profit: float = None, leverage: int = 10) -> Dict[str, Any]:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ETHUSDT.P -> ETHUSDT
        if symbol.endswith('.P'):
            symbol = symbol[:-2]
            
        return self.place_order(symbol, direction, quantity, entry_price, stop_loss, take_profit, leverage)

    def close_position(self, symbol: str, direction: str = None) -> Dict[str, Any]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
            if symbol.endswith('.P'):
                symbol = symbol[:-2]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = self.exchange.fetch_positions([symbol])
            active_position = None
            
            for pos in positions:
                size = pos.get('size', 0)
                if isinstance(size, (int, float)) and size > 0:
                    active_position = pos
                    break
            
            if not active_position:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {"error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            side = 'sell' if active_position.get('side') == 'long' else 'buy'
            amount = abs(float(active_position.get('size', 0)))
            
            close_order = self.exchange.create_market_order(
                symbol, side, amount, None, None, {'reduceOnly': True}
            )
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {close_order.get('id')}")
            
            return {
                "order_id": close_order.get('id'),
                "symbol": symbol,
                "side": side,
                "amount": amount,
                "status": "closed"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä")
            return self.simulator.close_position(symbol)

    def update_stop_loss(self, symbol: str, direction: str, stop_price: float, trail_amount: float = None) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
            if symbol.endswith('.P'):
                symbol = symbol[:-2]
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: {stop_price}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å—Ç–æ–ø-–ª–æ—Å—Å
            orders = self.exchange.fetch_open_orders(symbol)
            sl_orders = [order for order in orders if order.get('type') == 'stop_market']
            
            # –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä—ã—Ö SL –æ—Ä–¥–µ—Ä–æ–≤
            for order in sl_orders:
                order_id = order.get('id')
                if order_id:
                    self.exchange.cancel_order(order_id, symbol)
                    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π SL –æ—Ä–¥–µ—Ä: {order_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ SL
            positions = self.exchange.fetch_positions([symbol])
            active_position = None
            
            for pos in positions:
                size = pos.get('size', 0)
                if isinstance(size, (int, float)) and size > 0:
                    active_position = pos
                    break
            
            if not active_position:
                return {"error": "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞
            side = 'sell' if active_position.get('side') == 'long' else 'buy'
            amount = abs(float(active_position.get('size', 0)))
            
            new_sl_order = self.exchange.create_order(
                symbol, 'stop_market', side, amount, None, None,
                {'stopPrice': stop_price, 'reduceOnly': True}
            )
            
            logger.info(f"‚úÖ –ù–æ–≤—ã–π SL –æ—Ä–¥–µ—Ä: {new_sl_order.get('id')}")
            
            return {
                "order_id": new_sl_order.get('id'),
                "symbol": symbol,
                "stop_price": stop_price,
                "trail_amount": trail_amount,
                "status": "updated"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä")
            return self.simulator.update_stop_loss(symbol, direction, stop_price)

    def get_account_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            balance = self.exchange.fetch_balance()
            
            return {
                "status": "connected",
                "balance": balance.get('USDT', {}).get('total', 0),
                "testnet": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"status": "demo_mode", "error": str(e)}

    def get_positions(self, symbol: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if symbol and symbol.endswith('.P'):
                symbol = symbol[:-2]
                
            symbols = [symbol] if symbol else None
            positions = self.exchange.fetch_positions(symbols)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            active_positions = []
            for pos in positions:
                size = pos.get('size', 0)
                if isinstance(size, (int, float)) and size > 0:
                    active_positions.append(pos)
            
            return {
                "positions": active_positions,
                "count": len(active_positions),
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return self.simulator.get_positions(symbol)