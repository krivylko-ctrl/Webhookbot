import os
import ccxt
import logging
from bybit_simulator import BybitSimulator

logger = logging.getLogger(__name__)

class BybitFuturesClient:
    def __init__(self, testnet=True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Railway deployment
        """
        self.testnet = testnet
        self.simulator = BybitSimulator()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.api_key = os.environ.get('BYBIT_API_KEY')
        self.api_secret = os.environ.get('BYBIT_API_SECRET')
        
        logger.info("Bybit API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ CCXT:")
        logger.info(f"  API Key: {'–ù–ê–ô–î–ï–ù' if self.api_key else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        logger.info(f"  API Secret: {'–ù–ê–ô–î–ï–ù' if self.api_secret else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        logger.info(f"  –†–µ–∂–∏–º: {'DEMO TESTNET' if testnet else 'PRODUCTION MAINNET'}")
        logger.info(f"  CCXT –≤–µ—Ä—Å–∏—è: {ccxt.__version__}")
        
        if self.api_key and self.api_secret:
            logger.info(f"  Key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {self.api_key[:8]}...")
            logger.info(f"  Secret –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {self.api_secret[:8]}...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CCXT –∫–ª–∏–µ–Ω—Ç–∞
        try:
            if self.api_key and self.api_secret:
                self.exchange = ccxt.bybit({
                    'apiKey': self.api_key,
                    'secret': self.api_secret,
                    'sandbox': testnet,  # True –¥–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞, False –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
                    'enableRateLimit': True,
                    'options': {
                        'defaultType': 'linear',  # –õ–∏–Ω–µ–π–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã USDT
                        'recvWindow': 10000,
                    }
                })
            else:
                logger.warning("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, exchange –±—É–¥–µ—Ç None")
                self.exchange = None
            
            if not testnet:
                logger.info("üöÄ PRODUCTION –†–ï–ñ–ò–ú: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ Bybit")
            else:
                logger.info("üß™ DEMO –†–ï–ñ–ò–ú: –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –¥–µ–º–æ —Å—á–µ—Ç–µ Bybit")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CCXT: {e}")
            self.exchange = None
        
        logger.info("‚úÖ –ì–û–¢–û–í –ö –¢–û–†–ì–û–í–õ–ï: Bybit API –∞–∫—Ç–∏–≤–µ–Ω —á–µ—Ä–µ–∑ CCXT –Ω–∞ Railway.app")

    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if not self.exchange:
                return {"error": "Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            balance = self.exchange.fetch_balance()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ")
            return {
                "status": "connected",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "testnet": self.testnet,
                "balance_keys": list(balance.keys())[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä")
            return self.simulator.test_connection()

    def place_order(self, symbol, side, amount, leverage=10, sl_percent=1.0, tp_percent=3.0):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–ø–æ–≤"""
        try:
            logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {side}: {amount} {symbol}")
            logger.info(f"–ü–ª–µ—á–æ: {leverage}x, SL: {sl_percent}%, TP: {tp_percent}%")
            
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
            self.exchange.set_leverage(leverage, symbol)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SL/TP
            ticker = self.exchange.fetch_ticker(symbol)
            current_price = float(ticker['last']) if ticker.get('last') else 0.0
            
            if current_price == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
            
            # –†–∞—Å—á–µ—Ç —Ü–µ–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if side.lower() == 'long' or side.lower() == 'buy':
                sl_price = current_price * (1 - sl_percent / 100)
                tp_price = current_price * (1 + tp_percent / 100)
            else:  # short or sell
                sl_price = current_price * (1 + sl_percent / 100)
                tp_price = current_price * (1 - tp_percent / 100)
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            order = self.exchange.create_market_order(symbol, side, amount)
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order.get('id', 'unknown')}")
            logger.info(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${current_price}")
            logger.info(f"SL: ${sl_price:.2f}, TP: ${tp_price:.2f}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP (–º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –±–∏—Ä–∂–∞–º–∏)
            try:
                sl_order = self.exchange.create_order(
                    symbol, 'stop_market', 
                    'sell' if side in ['buy', 'long'] else 'buy', 
                    amount, None, None, {'stopPrice': sl_price}
                )
                tp_order = self.exchange.create_order(
                    symbol, 'take_profit_market', 
                    'sell' if side in ['buy', 'long'] else 'buy', 
                    amount, None, None, {'stopPrice': tp_price}
                )
                logger.info(f"SL/TP –æ—Ä–¥–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: SL {sl_order.get('id', 'unknown')}, TP {tp_order.get('id', 'unknown')}")
            except Exception as sl_tp_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {sl_tp_error}")
            
            return {
                "order_id": order.get('id', 'simulation'),
                "symbol": symbol,
                "side": side,
                "amount": amount,
                "price": current_price,
                "sl_price": sl_price,
                "tp_price": tp_price,
                "leverage": leverage,
                "status": "filled"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞")
            return self.simulator.place_order(symbol, side, amount, leverage, sl_percent, tp_percent)

    def close_position(self, symbol, direction=None):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {direction}: {symbol}")
            
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = self.exchange.fetch_positions([symbol])
            active_position = None
            
            for pos in positions:
                size = pos.get('size', 0)
                if isinstance(size, (int, float)) and size > 0:  # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                    active_position = pos
                    break
            
            if not active_position:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {"error": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            side = 'sell' if active_position.get('side') == 'long' else 'buy'
            amount = abs(float(active_position.get('size', 0)))
            
            if amount == 0:
                raise Exception("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é")
            
            close_order = self.exchange.create_market_order(
                symbol, side, amount, None, None, {'reduceOnly': True}
            )
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {close_order.get('id', 'unknown')}")
            
            return {
                "order_id": close_order.get('id', 'simulation'),
                "symbol": symbol,
                "side": side,
                "amount": amount,
                "status": "closed"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            return self.simulator.close_position(symbol)

    def update_stop_loss(self, symbol, direction, stop_price, trail_amount=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å: {symbol}, —Ü–µ–Ω–∞: {stop_price}")
            
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å—Ç–æ–ø-–ª–æ—Å—Å
            orders = self.exchange.fetch_open_orders(symbol)
            sl_orders = [order for order in orders if order.get('type') == 'stop_market']
            
            # –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä—ã—Ö SL –æ—Ä–¥–µ—Ä–æ–≤
            for order in sl_orders:
                order_id = order.get('id')
                if order_id:
                    self.exchange.cancel_order(order_id, symbol)
                    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π SL –æ—Ä–¥–µ—Ä: {order_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            positions = self.exchange.fetch_positions([symbol])
            active_position = None
            
            for pos in positions:
                size = pos.get('size', 0)
                if isinstance(size, (int, float)) and size > 0:
                    active_position = pos
                    break
            
            if not active_position:
                return {"error": "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL"}
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞
            side = 'sell' if active_position.get('side') == 'long' else 'buy'
            amount = abs(float(active_position.get('size', 0)))
            
            new_sl_order = self.exchange.create_order(
                symbol, 'stop_market', side, amount, None, None,
                {'stopPrice': stop_price, 'reduceOnly': True}
            )
            
            logger.info(f"‚úÖ –ù–æ–≤—ã–π SL –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_sl_order.get('id', 'unknown')}")
            
            return {
                "order_id": new_sl_order.get('id', 'simulation'),
                "symbol": symbol,
                "stop_price": stop_price,
                "trail_amount": trail_amount,
                "status": "updated"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL")
            return self.simulator.update_stop_loss(symbol, direction, stop_price)

    def get_positions(self, symbol=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            symbols = [symbol] if symbol else None
            positions = self.exchange.fetch_positions(symbols)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = []
            for pos in positions:
                size = pos.get('size', 0)
                if isinstance(size, (int, float)) and size > 0:
                    active_positions.append(pos)
            
            return {
                "positions": active_positions,
                "count": len(active_positions),
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return self.simulator.get_positions(symbol)

    def get_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if not self.exchange:
                raise Exception("Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            balance = self.exchange.fetch_balance()
            
            return {
                "balance": balance,
                "total": balance.get('total', {}),
                "free": balance.get('free', {}),
                "used": balance.get('used', {}),
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return self.simulator.get_balance()