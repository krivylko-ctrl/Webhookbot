"""
WebSocket Runner –¥–ª—è KWIN Trading Bot
–¢–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Pine Script —á–µ—Ä–µ–∑ Bybit WebSocket v5
"""

import asyncio
import signal
import sys
import logging
from config import Config
import config as cfg

log = logging.getLogger("ws_runner")

def build_topics(symbol: str, intervals: list[str]) -> list[str]:
    if not symbol:
        raise ValueError("SYMBOL is empty")
    if not intervals:
        raise ValueError("INTERVALS is empty")
    return [f"kline.{iv}.{symbol}" for iv in intervals]
from bybit_api import BybitAPI  
from state_manager import StateManager
from database import Database
from kwin_strategy import KWINStrategy
from trail_engine import TrailEngine
from datafeed_ws import WSConfig, BybitWSKlines

class KWINWebSocketRunner:
    """–û—Å–Ω–æ–≤–Ω–æ–π runner —Å WebSocket —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
        cfg.must_have()
        
        self.config = Config()
        self.db = Database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.state = StateManager(self.db)
        self.api = BybitAPI(
            api_key=cfg.BYBIT_API_KEY,
            api_secret=cfg.BYBIT_API_SECRET,
            testnet=False
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Ä—ã–Ω–∫–∞
        self.api.market_type = self.config.market_type
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å WebSocket –∫–æ–ª–±—ç–∫–∞–º–∏
        self.strategy = KWINStrategy(self.config, self.api, self.state, self.db)
        
        # WebSocket –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        symbol = cfg.SYMBOL
        intervals = cfg.INTERVALS
        topics = build_topics(symbol, intervals)
        
        self.ws_config = WSConfig(
            symbol=symbol,
            market_type=cfg.BYBIT_ACCOUNT_TYPE,
            testnet=False,  # –ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º
            intervals=tuple(intervals),  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            only_on_confirmed_close=True  # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –±–∞—Ä—ã –∫–∞–∫ –≤ Pine
        )
        
        self.ws_feed = None
        self.running = False
    
    def on_kline_data(self, symbol: str, interval: str, candle: dict):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        try:
            print(f"[WS] {symbol} {interval}m: {candle['close']:.2f} (confirmed: {candle['confirm']})")
            
            # –ñ—ë—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è 1:1 —Å Pine Script
            if interval == "15":
                # SFP –∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–≥–æ –≤ on_bar_close_15m()
                self.strategy.on_bar_close_15m(candle)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –Ω–∞ –Ω–æ–≤–æ–º –∑–∞–∫—Ä—ã—Ç–æ–º –±–∞—Ä–µ
                if hasattr(self.strategy, 'trail_engine') and hasattr(self.strategy.trail_engine, 'update_trail'):
                    self.strategy.trail_engine.update_trail()
                
            elif interval == "60":
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ 1—á –±–∞—Ä–∞—Ö
                self.strategy.on_bar_close_60m(candle)
                
            elif interval == "1":
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 1–º –±–∞—Ä–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                self.strategy.on_bar_close_1m(candle)
            
        except Exception as e:
            print(f"Error processing {symbol} {interval}m candle: {e}")
    
    def _update_trailing(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –±–∞—Ä–∞—Ö"""
        try:
            position = self.state.get_current_position()
            if position and position.get('size', 0) != 0:
                self.strategy.trail_engine.update_trailing(position)
        except Exception as e:
            print(f"Error updating trailing: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket runner"""
        print(f"üöÄ Starting KWIN WebSocket Runner")
        print(f"   Symbol: {self.config.symbol}")
        print(f"   Market: {self.config.market_type}")
        print(f"   Intervals: {self.ws_config.intervals}")
        print(f"   Only confirmed bars: {self.ws_config.only_on_confirmed_close}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await self._load_initial_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Ñ–∏–¥–∞
        self.ws_feed = BybitWSKlines(self.ws_config, self.on_kline_data)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.running = True
        print("‚úÖ WebSocket runner started. Press Ctrl+C to stop.")
        
        try:
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ WebSocket
            await self.ws_feed.run_forever()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Stopping WebSocket runner...")
        finally:
            await self.stop()
    
    async def _load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏"""
        try:
            print("üìä Loading initial candle data...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 15m —Å–≤–µ—á–µ–π
            klines_15m = self.api.get_klines(self.config.symbol, "15", 100)
            if klines_15m:
                self.strategy.candles_15m = klines_15m
                print(f"   ‚úÖ Loaded {len(klines_15m)} x 15m candles")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º 1h —Å–≤–µ—á–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞  
            klines_1h = self.api.get_klines(self.config.symbol, "60", 50)
            if klines_1h:
                if not hasattr(self.strategy, 'candles_1h'):
                    self.strategy.candles_1h = []
                self.strategy.candles_1h = klines_1h
                print(f"   ‚úÖ Loaded {len(klines_1h)} x 1h candles")
                
        except Exception as e:
            print(f"Error loading initial data: {e}")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\nüì° Received signal {signum}, stopping...")
        self.running = False
    
    async def stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.running = False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î
            if hasattr(self.state, 'current_position'):
                print("üíæ State saved successfully")
        except Exception as e:
            print(f"Error saving state: {e}")
        
        print("üëã WebSocket runner stopped")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    runner = KWINWebSocketRunner()
    await runner.start()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Program interrupted")
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        sys.exit(1)