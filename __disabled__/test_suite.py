"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è KWIN Trading Bot
–í–∫–ª—é—á–∞–µ—Ç unit –∏ e2e —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤, —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
"""
import unittest
from unittest.mock import Mock, patch
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config
from kwin_strategy import KWINStrategy
from trail_engine import TrailEngine
from state_manager import StateManager
from database import Database
from analytics import TradingAnalytics, TrailingLogger
from demo_mode import DemoAPI
import utils

class TestSFPDetection(unittest.TestCase):
    """üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.config = Config()
        self.config.sfp_len = 2
        self.config.use_sfp_quality = True
        self.config.wick_min_ticks = 7
        self.config.close_back_pct = 1.0
        
        # –ú–æ–∫–∞–µ–º API –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.mock_api = Mock()
        self.mock_db = Mock()
        self.mock_state = Mock()
        
        self.strategy = KWINStrategy(self.config, self.mock_api, self.mock_state, self.mock_db)
        self.strategy.tick_size = 0.01
    
    def test_bull_sfp_detection_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ Bull SFP"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–≤–µ—á–∏: pivot low -> higher low -> current (new low + recovery)
        test_candles = [
            {'low': 2490.0, 'high': 2510.0, 'open': 2495.0, 'close': 2505.0},  # current: new low + good recovery
            {'low': 2495.0, 'high': 2515.0, 'open': 2500.0, 'close': 2510.0},  # higher low
            {'low': 2485.0, 'high': 2505.0, 'open': 2490.0, 'close': 2500.0},  # pivot low
            {'low': 2500.0, 'high': 2520.0, 'open': 2505.0, 'close': 2515.0},  # higher
        ]
        
        self.strategy.candles_15m = test_candles
        result = self.strategy._detect_bull_sfp()
        
        self.assertTrue(result, "Bull SFP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω")
    
    def test_bull_sfp_quality_filter(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Bull SFP"""
        # –°–≤–µ—á–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –≥–ª—É–±–∏–Ω–æ–π –≤–∏–∫–∞
        test_candles = [
            {'low': 2484.5, 'high': 2490.0, 'open': 2485.0, 'close': 2486.0},  # shallow wick, poor recovery
            {'low': 2495.0, 'high': 2515.0, 'open': 2500.0, 'close': 2510.0},
            {'low': 2485.0, 'high': 2505.0, 'open': 2490.0, 'close': 2500.0},  # pivot
            {'low': 2500.0, 'high': 2520.0, 'open': 2505.0, 'close': 2515.0},
        ]
        
        self.strategy.candles_15m = test_candles
        result = self.strategy._detect_bull_sfp()
        
        self.assertFalse(result, "Bull SFP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –∫–∞—á–µ—Å—Ç–≤—É")
    
    def test_bear_sfp_detection(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ Bear SFP"""
        test_candles = [
            {'low': 2490.0, 'high': 2520.0, 'open': 2505.0, 'close': 2495.0},  # new high + poor close
            {'low': 2485.0, 'high': 2505.0, 'open': 2490.0, 'close': 2500.0},  # lower high
            {'low': 2490.0, 'high': 2515.0, 'open': 2495.0, 'close': 2510.0},  # pivot high
            {'low': 2480.0, 'high': 2500.0, 'open': 2485.0, 'close': 2495.0},  # lower
        ]
        
        self.strategy.candles_15m = test_candles
        result = self.strategy._detect_bear_sfp()
        
        self.assertTrue(result, "Bear SFP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω")

class TestPositionSizing(unittest.TestCase):
    """üìè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    
    def setUp(self):
        self.config = Config()
        self.config.risk_pct = 3.0
        self.config.limit_qty_enabled = True
        self.config.max_qty_manual = 50.0
        self.config.min_order_qty = 0.01
        self.config.taker_fee_rate = 0.00055
        self.config.min_net_profit = 1.2
        
        self.mock_api = Mock()
        self.mock_db = Mock()
        
        # –ú–æ–∫–∞–µ–º state manager
        self.mock_state = Mock()
        self.mock_state.get_equity.return_value = 1000.0
        
        self.strategy = KWINStrategy(self.config, self.mock_api, self.mock_state, self.mock_db)
        self.strategy.qty_step = 0.01
        self.strategy.min_order_qty = 0.01
    
    def test_position_size_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = 2500.0
        stop_loss = 2480.0
        direction = "long"
        
        # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—á–µ—Ç:
        # equity = 1000, risk = 3% = 30 USDT
        # stop_size = 2500 - 2480 = 20 USDT
        # qty = 30 / 20 = 1.5 ETH
        
        result = self.strategy._calculate_position_size(entry_price, stop_loss, direction)
        expected = 1.5
        
        self.assertAlmostEqual(result, expected, places=2, 
                              msg="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")
    
    def test_position_size_limits(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = 2500.0
        stop_loss = 2499.0  # –æ—á–µ–Ω—å —É–∑–∫–∏–π —Å—Ç–æ–ø
        direction = "long"
        
        # –ü—Ä–∏ —É–∑–∫–æ–º —Å—Ç–æ–ø–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–º, –¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è max_qty
        result = self.strategy._calculate_position_size(entry_price, stop_loss, direction)
        
        self.assertLessEqual(result, self.config.max_qty_manual,
                           "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è max_qty")
    
    def test_position_validation_requirements(self):
        """8Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = 2500.0
        stop_loss = 2480.0
        take_profit = 2526.0  # RR = 1.3
        quantity = 1.5
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        result = self.strategy._validate_position_requirements(
            entry_price, stop_loss, take_profit, quantity
        )
        self.assertTrue(result, "–í–∞–ª–∏–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º —É–∑–∫–æ–≥–æ —Å—Ç–æ–ø–∞
        narrow_sl = 2499.9
        result = self.strategy._validate_position_requirements(
            entry_price, narrow_sl, take_profit, quantity
        )
        self.assertFalse(result, "–£–∑–∫–∏–π —Å—Ç–æ–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç –Ω–∏–∑–∫–æ–π –ø—Ä–∏–±—ã–ª–∏
        low_tp = 2501.0
        result = self.strategy._validate_position_requirements(
            entry_price, stop_loss, low_tp, quantity
        )
        self.assertFalse(result, "–ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

class TestSmartTrailing(unittest.TestCase):
    """üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Trailing –ª–æ–≥–∏–∫–∏"""
    
    def setUp(self):
        self.config = Config()
        self.config.use_arm_after_rr = True
        self.config.arm_rr = 0.5
        self.config.use_bar_trail = True
        self.config.trail_lookback = 50
        self.config.trail_buf_ticks = 40
        self.config.trailing_offset = 0.4
        
        self.mock_api = Mock()
        self.mock_state = Mock()
        
        self.trail_engine = TrailEngine(self.config, self.mock_state, self.mock_api)
    
    def test_arm_condition_long(self):
        """–¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏"""
        position = {
            'direction': 'long',
            'entry_price': 2500.0,
            'stop_loss': 2480.0,
            'sl_price': 2480.0,
            'armed': False
        }
        
        # –¶–µ–Ω–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        current_price = 2505.0  # moved = 5, need = 20 * 0.5 = 10
        self.trail_engine._process_long_trailing(position, current_price)
        self.assertFalse(position['armed'], "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–∞—Ä–º–ª–µ–Ω–∞")
        
        # –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        current_price = 2511.0  # moved = 11, need = 10
        self.trail_engine._process_long_trailing(position, current_price)
        # –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ –º–µ—Ç–æ–¥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    
    def test_bar_trail_calculation(self):
        """7Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ Bar Trail —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º [1] offset"""
        # –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        mock_klines = [
            {'low': 2500.0, 'high': 2520.0},  # current [0]
            {'low': 2485.0, 'high': 2505.0},  # [1] - –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
            {'low': 2490.0, 'high': 2510.0},  # [2]
            {'low': 2480.0, 'high': 2500.0},  # [3] - –º–∏–Ω–∏–º—É–º –≤ lookback
        ]
        
        self.mock_api.get_klines.return_value = mock_klines
        current_sl = 2470.0
        
        result = self.trail_engine._calculate_bar_trail_long(current_sl)
        
        # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—á–µ—Ç: min([2485, 2490, 2480]) = 2480
        # –ë—É—Ñ–µ—Ä: 40 * 0.01 = 0.4
        # –ù–æ–≤—ã–π SL: 2480 - 0.4 = 2479.6
        # –ù–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ: max(2479.6, 2470) = 2479.6
        
        expected = 2479.6
        self.assertAlmostEqual(result, expected, places=1,
                              msg="Bar Trail —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")

class TestAnalytics(unittest.TestCase):
    """üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def setUp(self):
        self.analytics = TradingAnalytics(":memory:")  # in-memory DB –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    
    def test_winrate_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ winrate"""
        test_trades = [
            {'direction': 'long', 'pnl': 10.0},   # win
            {'direction': 'long', 'pnl': -5.0},   # loss
            {'direction': 'short', 'pnl': 8.0},   # win
            {'direction': 'short', 'pnl': -3.0},  # loss
            {'direction': 'long', 'pnl': 15.0},   # win
        ]
        
        result = self.analytics.calculate_winrate(test_trades)
        
        # –û–±—â–∏–π: 3/5 = 60%
        # Long: 2/3 = 66.67%
        # Short: 1/2 = 50%
        
        self.assertEqual(result['total'], 60.0)
        self.assertAlmostEqual(result['long'], 66.67, places=1)
        self.assertEqual(result['short'], 50.0)
    
    def test_pnl_metrics(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ PnL –º–µ—Ç—Ä–∏–∫"""
        test_trades = [
            {'pnl': 20.0},
            {'pnl': -10.0},
            {'pnl': 15.0},
            {'pnl': -5.0},
        ]
        
        result = self.analytics.calculate_pnl_metrics(test_trades)
        
        self.assertEqual(result['total_pnl'], 20.0)
        self.assertEqual(result['gross_profit'], 35.0)
        self.assertEqual(result['gross_loss'], 15.0)
        self.assertEqual(result['avg_win'], 17.5)
        self.assertEqual(result['avg_loss'], 7.5)
        self.assertAlmostEqual(result['profit_factor'], 2.33, places=2)

class TestUtils(unittest.TestCase):
    """üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç"""
    
    def test_price_rounding(self):
        """–¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ü–µ–Ω"""
        self.assertEqual(utils.price_round(2500.147, 0.01), 2500.15)
        self.assertEqual(utils.price_round(2500.143, 0.01), 2500.14)
        self.assertEqual(utils.price_round(2500.5, 0.1), 2500.5)
    
    def test_qty_rounding(self):
        """–¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        self.assertEqual(utils.qty_round(1.567, 0.01), 1.57)
        self.assertEqual(utils.qty_round(1.563, 0.01), 1.56)
        self.assertEqual(utils.qty_round(1.5, 0.1), 1.5)

class TestE2EScenarios(unittest.TestCase):
    """üéÆ End-to-End —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.config = Config()
        self.demo_api = DemoAPI()
        self.db = Database(":memory:")
        self.state = StateManager(self.db)
        self.analytics = TradingAnalytics(":memory:")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        self.db._init_tables()
        self.analytics.trail_logger = TrailingLogger(":memory:")
        self.analytics.trail_logger.init_trailing_table()
        
        self.strategy = KWINStrategy(self.config, self.demo_api, self.state, self.db)
    
    def test_full_trading_cycle(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        # 1. –î–µ—Ç–µ–∫—Ü–∏—è SFP
        # 2. –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
        # 3. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        # 4. –¢—Ä–µ–π–ª–∏–Ω–≥
        # 5. –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        
        # –ú–æ–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é SFP
        self.strategy.candles_15m = [
            {'low': 2490.0, 'high': 2510.0, 'open': 2495.0, 'close': 2505.0},
            {'low': 2495.0, 'high': 2515.0, 'open': 2500.0, 'close': 2510.0},
            {'low': 2485.0, 'high': 2505.0, 'open': 2490.0, 'close': 2500.0},
            {'low': 2500.0, 'high': 2520.0, 'open': 2505.0, 'close': 2515.0},
        ]
        
        # –ú–æ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        self.demo_api.current_price = 2500.0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategy.run_cycle()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        position = self.state.get_current_position()
        # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç—å—Å—è, –Ω–æ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å
        
        # –≠—Ç–æ –±–∞–∑–æ–≤—ã–π e2e —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.assertIsNotNone(self.strategy)

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KWIN Strategy...")
    
    # –°–æ–∑–¥–∞–µ–º test suite
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    test_classes = [
        TestSFPDetection,
        TestPositionSizing,
        TestSmartTrailing,
        TestAnalytics,
        TestUtils,
        TestE2EScenarios
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"üí• –û—à–∏–±–∫–∏: {len(result.errors)}")
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100):.1f}%")
    
    if result.failures:
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback.split('AssertionError: ')[-1].strip()}")
    
    if result.errors:
        print(f"\nüí• –û—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback.split('Exception: ')[-1].strip()}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
