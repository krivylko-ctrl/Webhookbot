from flask import Flask, render_template, request, jsonify
import os
import json
from datetime import datetime
import threading

from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
from database import Database
from config import Config

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
config = None
db = None
state_manager = None
bybit_api = None
strategy = None
logs = []

def init_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    global config, db, state_manager, bybit_api, strategy
    
    config = Config()
    db = Database()
    state_manager = StateManager(db)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("BYBIT_API_KEY", "")
    api_secret = os.getenv("BYBIT_API_SECRET", "")
    
    if api_key and api_secret:
        bybit_api = BybitAPI(api_key, api_secret, testnet=False)
        try:
            server_time = bybit_api.get_server_time()
            if not server_time:
                from demo_mode import create_demo_api
                bybit_api = create_demo_api()
                log_message("‚ö†Ô∏è Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
        except Exception as e:
            from demo_mode import create_demo_api
            bybit_api = create_demo_api()
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Bybit API: {e}. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
    else:
        from demo_mode import create_demo_api
        bybit_api = create_demo_api()
        log_message("‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")
    
    strategy = KWINStrategy(config, bybit_api, state_manager, db)
    log_message("üöÄ KWIN Trading Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def log_message(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    logs.append(log_entry)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
    if len(logs) > 1000:
        logs[:] = logs[-500:]
    print(log_entry)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/logs')
def view_logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ª–æ–≥–∞–º–∏"""
    log_text = "\n".join(logs) if logs else "–õ–æ–≥–∏ –ø—É—Å—Ç—ã"
    return render_template('logs.html', logs=log_text)

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "bot_initialized": strategy is not None,
        "api_connected": bybit_api is not None
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        data = request.get_json()
        log_message(f"üì• Webhook –ø–æ–ª—É—á–µ–Ω: {data}")
        
        if not strategy:
            return jsonify({"error": "Bot not initialized"}), 500
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–∏–≥–Ω–∞–ª–∞
        if data.get('action') == 'BUY':
            log_message("üìà –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª BUY")
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏
        elif data.get('action') == 'SELL':
            log_message("üìâ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SELL")
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
        
        return jsonify({"status": "success", "message": "Signal processed"})
    
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/tv-webhook', methods=['POST'])
def tv_webhook():
    """TradingView webhook"""
    try:
        data = request.get_json()
        log_message(f"üìä TradingView webhook: {data}")
        
        if not strategy:
            return jsonify({"error": "Bot not initialized"}), 500
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ TradingView —Å–∏–≥–Ω–∞–ª–∞
        return jsonify({"status": "success", "message": "TradingView signal processed"})
    
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ TradingView webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/status')
def status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    if not strategy:
        return jsonify({"error": "Bot not initialized"}), 500
    
    try:
        current_position = state_manager.get_current_position()
        equity = state_manager.get_equity_history()
        
        return jsonify({
            "status": "running",
            "timestamp": datetime.now().isoformat(),
            "position": current_position,
            "equity": equity,
            "symbol": config.symbol if config else None,
            "logs_count": len(logs)
        })
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_components()
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)