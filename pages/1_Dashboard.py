import os
import time
from datetime import datetime, timedelta

import streamlit as st
import pandas as pd
import plotly.graph_objects as go

from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
from database import Database
from config import Config
import utils


st.set_page_config(page_title="Dashboard", page_icon="üìä", layout="wide")


def main():
    st.title("üìä Dashboard")

    # ------------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------------
    @st.cache_resource
    def init_components():
        cfg = Config()
        db = Database()
        state = StateManager(db)

        api_key = os.getenv("BYBIT_API_KEY", "")
        api_secret = os.getenv("BYBIT_API_SECRET", "")
        testnet = os.getenv("BYBIT_TESTNET", "false").lower() in ("1", "true", "yes")

        bybit = None
        if api_key and api_secret:
            bybit = BybitAPI(api_key, api_secret, testnet=testnet)
            # –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–∞–º–∏ (—Ñ—å—é—á–µ—Ä—Å—ã)
            bybit.set_market_type("linear")

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª—É—á–∞–µ—Ç API/DB/State –∏ —Å–∞–º–∞ —Ç—è–Ω–µ—Ç —Å–≤–µ—á–∏
        strat = KWINStrategy(cfg, api=bybit, state_manager=state, db=db)
        return cfg, db, state, bybit, strat

    config, db, state_manager, bybit_api, strategy = init_components()

    # –°–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞)
    symbol = getattr(config, "symbol", "ETHUSDT")

    if bybit_api is None:
        st.error("‚ö†Ô∏è API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (BYBIT_API_KEY/BYBIT_API_SECRET).")
        st.stop()

    # ------------------------ –ü–û–ú–û–©–ù–ò–ö–ò ------------------------
    def get_display_price() -> float:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        –ë–µ—Ä—ë–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ config.price_for_logic: 'last' –∏–ª–∏ 'mark'.
        """
        try:
            src = str(getattr(config, "price_for_logic", "last")).lower()
            # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ BybitAPI
            px = bybit_api.get_price(symbol, source=src)
            if px and px > 0:
                return float(px)

            # –§–æ–ª–±—ç–∫: –ø—Ä—è–º–æ–π —Ç–∏–∫–µ—Ä
            t = bybit_api.get_ticker(symbol) or {}
            last = t.get("lastPrice")
            mark = t.get("markPrice")
            if src == "mark" and mark is not None:
                return float(mark)
            if last is not None:
                return float(last)
            if mark is not None:
                return float(mark)
        except Exception:
            pass
        return 0.0

    def poll_candles(allow_entries: bool):
        """
        –ü–æ–¥—Ç—è–Ω—É—Ç—å —Å–≤–µ—á–∏ 15m/1m –∏–∑ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–Ω–æ–≥–æ (linear) —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∏
        –¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
        –ï—Å–ª–∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥—ã (–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º —Ç—Ä–µ–π–ª–∏—Ç—å).
        """
        if not bybit_api:
            return
        if allow_entries:
            strategy.update_candles()
        else:
            # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Ö–æ–¥—ã, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ 15m –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –ø–æ–∑–∏—Ü–∏–∏
            prev_flags = (strategy.can_enter_long, strategy.can_enter_short)
            strategy.can_enter_long = False
            strategy.can_enter_short = False
            try:
                strategy.update_candles()
            finally:
                strategy.can_enter_long, strategy.can_enter_short = prev_flags

    # ------------------------ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ------------------------
    if "last_update" not in st.session_state:
        st.session_state.last_update = 0.0

    bot_status = state_manager.get_bot_status()
    is_running = (bot_status == "running")

    # –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 —Å–µ–∫
    now = time.time()
    if now - st.session_state.last_update > 5:
        st.session_state.last_update = now
        # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤–µ—á–∏; –µ—Å–ª–∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –±–µ–∑ –≤—Ö–æ–¥–æ–≤
        poll_candles(allow_entries=is_running)
        st.rerun()

    # ------------------------ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ------------------------
    st.markdown("### üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        equity = state_manager.get_equity()
        st.metric("üí∞ Equity", f"${equity:.2f}")

    position = state_manager.get_current_position()
    with col2:
        if position:
            qty = position.get("size") or position.get("quantity") or 0.0
            pos_text = f"{qty:.4f} {symbol.replace('USDT','')}"
            pos_direction = (position.get("direction") or "").upper()
            st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", f"{pos_direction} {pos_text}")
        else:
            st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏")

    with col3:
        try:
            current_price = get_display_price()
            if current_price > 0:
                st.metric(f"üíπ –¶–µ–Ω–∞ {symbol}", f"${current_price:.2f}")
            else:
                st.metric(f"üíπ –¶–µ–Ω–∞ {symbol}", "‚Äî")
        except Exception:
            st.metric(f"üíπ –¶–µ–Ω–∞ {symbol}", "–û—à–∏–±–∫–∞")

    with col4:
        trades_today = db.get_trades_count_today()
        st.metric("üìä –°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è", trades_today)

    with col5:
        pnl_today = db.get_pnl_today()
        st.metric("üíµ PnL —Å–µ–≥–æ–¥–Ω—è", utils.format_currency(pnl_today))

    # ------------------------ –¢–ï–ö–£–©–ê–Ø –ü–û–ó–ò–¶–ò–Ø ------------------------
    if position:
        st.markdown("### üéØ –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è")

        c1, c2, c3, c4 = st.columns(4)

        with c1:
            st.write(f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {(position.get('direction') or '').upper()}")
            qty = position.get("size") or position.get("quantity") or 0.0
            st.write(f"**–†–∞–∑–º–µ—Ä:** {qty:.4f} {symbol.replace('USDT','')}")

        with c2:
            entry_price = float(position.get("entry_price") or 0)
            st.write(f"**–í—Ö–æ–¥:** ${entry_price:.2f}")

            # –¢–µ–∫—É—â–∏–π PnL
            if current_price and entry_price and qty:
                current_pnl = utils.calculate_pnl(
                    entry_price, current_price, qty,
                    position.get("direction"),
                    include_fees=True
                )
                pnl_color = "green" if current_pnl >= 0 else "red"
                st.markdown(
                    f"**–¢–µ–∫—É—â–∏–π PnL:** <span style='color:{pnl_color}'>{utils.format_currency(current_pnl)}</span>",
                    unsafe_allow_html=True
                )

        with c3:
            st.write(f"**Stop Loss:** ${float(position.get('stop_loss') or 0):.2f}")
            tp_val = position.get("take_profit")
            tp_txt = f"${float(tp_val):.2f}" if tp_val is not None else "‚Äî"
            st.write(f"**Take Profit:** {tp_txt}")

        with c4:
            armed_status = "üü¢ Armed" if bool(position.get("armed", False)) else "üî¥ Not Armed"
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {armed_status}")

            # –¢–µ–∫—É—â–∏–π RR
            if current_price and entry_price:
                current_rr = utils.calculate_rr(
                    entry_price, current_price, float(position.get("stop_loss") or 0),
                    position.get("direction")
                )
                st.write(f"**–¢–µ–∫—É—â–∏–π RR:** {current_rr:.2f}")

    # ------------------------ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ------------------------
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    tabs = st.tabs(["30 –¥–Ω–µ–π", "60 –¥–Ω–µ–π", "180 –¥–Ω–µ–π"])
    for i, days in enumerate([30, 60, 180]):
        with tabs[i]:
            stats = db.get_performance_stats(days=days)

            c1, c2, c3, c4 = st.columns(4)
            with c1:
                st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", stats.get("total_trades", 0))
                st.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", stats.get("winning_trades", 0))

            with c2:
                win_rate = stats.get("win_rate", 0.0)
                st.metric("Win Rate", utils.format_percentage(win_rate))
                avg_rr = stats.get("avg_rr", 0.0)
                st.metric("–°—Ä–µ–¥–Ω–∏–π RR", f"{avg_rr:.2f}")

            with c3:
                total_pnl = stats.get("total_pnl", 0.0)
                st.metric("–û–±—â–∏–π PnL", utils.format_currency(total_pnl))
                avg_pnl = stats.get("avg_pnl", 0.0)
                st.metric("–°—Ä–µ–¥–Ω–∏–π PnL", utils.format_currency(avg_pnl))

            with c4:
                max_win = stats.get("max_win", 0.0)
                st.metric("–ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å", utils.format_currency(max_win))
                max_loss = stats.get("max_loss", 0.0)
                st.metric("–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫", utils.format_currency(max_loss))

    # ------------------------ –ö–†–ò–í–ê–Ø EQUITY ------------------------
    st.markdown("### üí∞ –ö—Ä–∏–≤–∞—è Equity")

    equity_data = db.get_equity_history(days=30)
    if equity_data:
        df_eq = pd.DataFrame(equity_data)
        df_eq["timestamp"] = pd.to_datetime(df_eq["timestamp"], errors="coerce")

        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df_eq["timestamp"],
            y=df_eq["equity"],
            mode="lines",
            name="Equity"
        ))
        fig.update_layout(
            title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ Equity –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="Equity ($)",
            height=380,
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π equity.")

    # ------------------------ –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò ------------------------
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")

    recent = db.get_recent_trades(10)
    if recent:
        df_tr = pd.DataFrame(recent)

        display_columns = [
            "entry_time", "direction", "entry_price", "exit_price",
            "quantity", "pnl", "rr", "status"
        ]
        # –ú—è–≥–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ quantity –ø—É—Å—Ç–æ ‚Äî –≤–æ–∑—å–º—ë–º qty
        if "quantity" in df_tr.columns and df_tr["quantity"].isna().all() and "qty" in df_tr.columns:
            df_tr["quantity"] = df_tr["qty"]

        for col in display_columns:
            if col in df_tr.columns:
                if col == "entry_time":
                    df_tr[col] = pd.to_datetime(df_tr[col], errors="coerce").dt.strftime("%Y-%m-%d %H:%M")
                elif col in ("pnl", "rr", "entry_price", "exit_price"):
                    df_tr[col] = pd.to_numeric(df_tr[col], errors="coerce").round(2)
                elif col == "quantity":
                    df_tr[col] = pd.to_numeric(df_tr[col], errors="coerce").round(4)

        column_mapping = {
            "entry_time": "–í—Ä–µ–º—è –≤—Ö–æ–¥–∞",
            "direction": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            "entry_price": "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞",
            "exit_price": "–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞",
            "quantity": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            "pnl": "PnL ($)",
            "rr": "RR",
            "status": "–°—Ç–∞—Ç—É—Å",
        }
        df_display = df_tr[[c for c in display_columns if c in df_tr.columns]].rename(columns=column_mapping)
        st.dataframe(df_display, use_container_width=True, hide_index=True)
    else:
        st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # ------------------------ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú ------------------------
    st.markdown("### üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")

    c1, c2, c3, c4 = st.columns(4)

    with c1:
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", use_container_width=True):
            state_manager.set_bot_status("running")
            st.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            st.rerun()

    with c2:
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", use_container_width=True):
            state_manager.set_bot_status("stopped")
            st.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            st.rerun()

    with c3:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            poll_candles(allow_entries=(state_manager.get_bot_status() == "running"))
            st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            st.rerun()

    with c4:
        if st.button("üì• –°–Ω–∏–º–æ–∫ equity", use_container_width=True):
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç
            try:
                strategy._update_equity()
                st.success("Equity —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            except Exception:
                st.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å equity.")
            st.rerun()

    # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–≤–∏–∑—É–∞–ª)
    bot_status = state_manager.get_bot_status()
    status_color = "green" if bot_status == "running" else "red"
    st.markdown(f"**–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** <span style='color:{status_color}'>{bot_status.upper()}</span>",
                unsafe_allow_html=True)


if __name__ == "__main__":
    main()
