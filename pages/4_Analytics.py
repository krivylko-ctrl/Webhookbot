"""
üìà –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import streamlit as st
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from datetime import datetime, timedelta
import sys
import os
from math import isnan

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from analytics import TradingAnalytics, TrailingLogger
from database import Database

# ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====================

def _safe_num(x, default=0.0):
    try:
        if x is None:
            return default
        if isinstance(x, (int, float)):
            return float(x)
        if isinstance(x, str) and x.strip() == "":
            return default
        v = float(x)
        if v != v:  # NaN
            return default
        return v
    except Exception:
        return default

def _compute_max_drawdown_pct(equity_curve: pd.Series) -> float:
    """
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –≤ % –ø–æ equity_curve.
    equity_curve: pd.Series —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ equity.
    """
    if equity_curve is None or equity_curve.empty:
        return 0.0
    roll_max = equity_curve.cummax()
    dd = (equity_curve / roll_max - 1.0) * 100.0
    return float(dd.min()) if not dd.empty else 0.0

def _compute_max_drawdown_abs(equity_curve: pd.Series) -> float:
    """
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ ($) –ø–æ equity_curve.
    """
    if equity_curve is None or equity_curve.empty:
        return 0.0
    roll_max = equity_curve.cummax()
    dd_abs = equity_curve - roll_max
    return float(dd_abs.min()) if not dd_abs.empty else 0.0

def _to_equity_series(equity_curve_raw) -> pd.Series:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ pd.Series –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø—Ä–æ—Å–∞–¥–æ–∫.
    –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
      - list[dict{timestamp, equity}]
      - list[tuple(ts, equity)]
      - dict[ts] = equity
    """
    try:
        if equity_curve_raw is None:
            return pd.Series(dtype=float)

        if isinstance(equity_curve_raw, dict):
            df = pd.DataFrame(
                [{"timestamp": k, "equity": v} for k, v in equity_curve_raw.items()]
            )
        else:
            # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º list
            if len(equity_curve_raw) == 0:
                return pd.Series(dtype=float)
            if isinstance(equity_curve_raw[0], dict):
                df = pd.DataFrame(equity_curve_raw)
            else:
                # list of tuples
                df = pd.DataFrame(equity_curve_raw, columns=["timestamp", "equity"])

        if "timestamp" not in df.columns or "equity" not in df.columns:
            return pd.Series(dtype=float)

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        ts = pd.to_datetime(df["timestamp"], unit="ms", errors="coerce")
        if ts.isna().all():
            # –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ unit
            ts = pd.to_datetime(df["timestamp"], errors="coerce")
        df["ts"] = ts
        df = df.dropna(subset=["ts"]).sort_values("ts")
        s = pd.Series(df["equity"].astype(float).values, index=df["ts"].values)
        return s
    except Exception:
        return pd.Series(dtype=float)

# ===================== –ì—Ä–∞—Ñ–∏–∫–∏ =====================

def create_performance_chart(stats: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=[
            'Winrate –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (%)',
            'PnL –º–µ—Ç—Ä–∏–∫–∏ (USDT)',
            'Risk/Reward —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'ROI –¥–∏–Ω–∞–º–∏–∫–∞ (%)'
        ],
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "scatter"}]]
    )
    
    # 1. Winrate
    winrate = stats.get('winrate', {})
    wr_total = _safe_num(winrate.get('total', 0))
    wr_long  = _safe_num(winrate.get('long', 0))
    wr_short = _safe_num(winrate.get('short', 0))

    fig.add_trace(
        go.Bar(
            x=['Total', 'Long', 'Short'],
            y=[wr_total, wr_long, wr_short],
            name='Winrate'
        ),
        row=1, col=1
    )
    
    # 2. PnL –º–µ—Ç—Ä–∏–∫–∏
    pnl = stats.get('pnl', {})
    total_pnl   = _safe_num(pnl.get('total_pnl', 0))
    gross_profit= _safe_num(pnl.get('gross_profit', 0))
    gross_loss  = _safe_num(pnl.get('gross_loss', 0))
    avg_win     = _safe_num(pnl.get('avg_win', 0))
    avg_loss    = _safe_num(pnl.get('avg_loss', 0))

    bars = [total_pnl, gross_profit, -abs(gross_loss), avg_win, -abs(avg_loss)]
    colors = ['#00D4AA' if x >= 0 else '#FF4B4B' for x in bars]
    fig.add_trace(
        go.Bar(
            x=['Total PnL', 'Gross Profit', 'Gross Loss', 'Avg Win', 'Avg Loss'],
            y=bars,
            name='PnL',
            marker_color=colors
        ),
        row=1, col=2
    )
    
    # 3. Risk/Reward
    rr = stats.get('risk_reward', {})
    fig.add_trace(
        go.Bar(
            x=['Avg RR', 'Max RR', 'Min RR'],
            y=[_safe_num(rr.get('avg_rr', 0)),
               _safe_num(rr.get('max_rr', 0)),
               _safe_num(rr.get('min_rr', 0))],
            name='Risk/Reward'
        ),
        row=2, col=1
    )
    
    # 4. ROI
    roi = stats.get('roi', {})
    fig.add_trace(
        go.Scatter(
            x=['Total ROI', 'Monthly ROI', 'Daily ROI'],
            y=[_safe_num(roi.get('total_roi', 0)),
               _safe_num(roi.get('monthly_roi', 0)),
               _safe_num(roi.get('daily_roi', 0))],
            mode='lines+markers',
            name='ROI'
        ),
        row=2, col=2
    )
    
    fig.update_layout(
        height=600,
        showlegend=False,
        title_text="–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤",
        title_x=0.5
    )
    
    return fig

def create_monthly_performance_chart(monthly_data: list):
    """–ì—Ä–∞—Ñ–∏–∫ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not monthly_data:
        return go.Figure()
    
    months = [item.get('month') for item in monthly_data]
    pnl = [_safe_num(item.get('total_pnl', 0)) for item in monthly_data]
    winrates = [_safe_num(item.get('winrate', 0)) for item in monthly_data]
    trades = [_safe_num(item.get('trades', 0)) for item in monthly_data]
    
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=['–ú–µ—Å—è—á–Ω—ã–π PnL (USDT)', 'Winrate & –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'],
        specs=[[{"type": "bar"}], [{"type": "xy"}]],
        shared_xaxes=True
    )
    
    # PnL –ø–æ –º–µ—Å—è—Ü–∞–º
    fig.add_trace(
        go.Bar(
            x=months,
            y=pnl,
            name='PnL',
            marker_color=['#00D4AA' if x >= 0 else '#FF4B4B' for x in pnl]
        ),
        row=1, col=1
    )
    
    # Winrate –∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    fig.add_trace(
        go.Scatter(
            x=months,
            y=winrates,
            mode='lines+markers',
            name='Winrate (%)'
        ),
        row=2, col=1
    )
    fig.add_trace(
        go.Bar(
            x=months,
            y=trades,
            name='Trades',
            opacity=0.6
        ),
        row=2, col=1
    )
    
    fig.update_layout(height=500, showlegend=True)
    return fig

def create_sfp_pattern_analysis(pattern_stats: dict):
    """–ê–Ω–∞–ª–∏–∑ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    bull_stats = pattern_stats.get('bull_sfp', {})
    bear_stats = pattern_stats.get('bear_sfp', {})
    
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=['Bull SFP Performance', 'Bear SFP Performance'],
        specs=[[{"type": "bar"}, {"type": "bar"}]]
    )
    
    # Bull SFP
    fig.add_trace(
        go.Bar(
            x=['Trades', 'Winrate %', 'Avg PnL', 'Total PnL'],
            y=[
                _safe_num(bull_stats.get('trades', 0)),
                _safe_num(bull_stats.get('winrate', 0)),
                _safe_num(bull_stats.get('avg_pnl', 0)),
                _safe_num(bull_stats.get('total_pnl', 0))
            ],
            name='Bull SFP',
        ),
        row=1, col=1
    )
    
    # Bear SFP
    fig.add_trace(
        go.Bar(
            x=['Trades', 'Winrate %', 'Avg PnL', 'Total PnL'],
            y=[
                _safe_num(bear_stats.get('trades', 0)),
                _safe_num(bear_stats.get('winrate', 0)),
                _safe_num(bear_stats.get('avg_pnl', 0)),
                _safe_num(bear_stats.get('total_pnl', 0))
            ],
            name='Bear SFP',
        ),
        row=1, col=2
    )
    
    fig.update_layout(height=400, showlegend=False)
    return fig

def create_equity_drawdown_chart(equity_curve: pd.Series):
    """
    –°—Ç—Ä–æ–∏—Ç 2 –æ—Å–∏: Equity ($) –∏ Drawdown (%)
    """
    if equity_curve is None or equity_curve.empty:
        return go.Figure()

    roll_max = equity_curve.cummax()
    dd_pct = (equity_curve / roll_max - 1.0) * 100.0

    fig = make_subplots(rows=1, cols=1, specs=[[{"secondary_y": True}]])
    fig.add_trace(
        go.Scatter(x=equity_curve.index, y=equity_curve.values, name="Equity ($)", mode="lines"),
        row=1, col=1, secondary_y=False
    )
    fig.add_trace(
        go.Scatter(x=dd_pct.index, y=dd_pct.values, name="Drawdown (%)", mode="lines"),
        row=1, col=1, secondary_y=True
    )
    fig.update_layout(height=420, title_text="Equity & Drawdown")
    fig.update_yaxes(title_text="Equity ($)", secondary_y=False)
    fig.update_yaxes(title_text="Drawdown (%)", secondary_y=True)
    return fig

# ===================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====================

st.set_page_config(
    page_title="KWIN Bot - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="üìà",
    layout="wide"
)

@st.cache_resource
def init_analytics():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    db = Database()
    analytics = TradingAnalytics()
    trail_logger = TrailingLogger()
    return analytics, trail_logger, db

# ===================== UI =====================

def display_trailing_logs(trail_logger: TrailingLogger):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞"""
    st.subheader("üéØ –õ–æ–≥–∏ Smart Trailing")
    
    hours_back = st.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –ª–æ–≥–æ–≤:",
        [1, 6, 12, 24, 48, 72],
        index=3,
        format_func=lambda x: f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x} —á–∞—Å–æ–≤"
    )
    
    trail_logs = trail_logger.get_trailing_history(hours_back)
    
    if trail_logs:
        df = pd.DataFrame(trail_logs)
        display_columns = ['timestamp', 'direction', 'trigger_type', 'old_sl', 'new_sl', 
                           'current_price', 'trail_distance', 'unrealized_pnl', 'arm_status']
        if all(col in df.columns for col in display_columns):
            df_display = df[display_columns].copy()
            for col in ['old_sl', 'new_sl', 'current_price', 'trail_distance', 'unrealized_pnl']:
                if col in df_display.columns:
                    df_display[col] = pd.to_numeric(df_display[col], errors="coerce").round(2)
            st.dataframe(df_display, use_container_width=True, height=300)
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π", len(df))
            with col2:
                st.metric("Long —Ç—Ä–µ–π–ª—ã", int((df['direction'] == 'long').sum()) if 'direction' in df.columns else 0)
            with col3:
                st.metric("Short —Ç—Ä–µ–π–ª—ã", int((df['direction'] == 'short').sum()) if 'direction' in df.columns else 0)
            with col4:
                avg_distance = pd.to_numeric(df.get('trail_distance', pd.Series(dtype=float)), errors="coerce").mean()
                st.metric("–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è", f"{(avg_distance or 0):.2f}")
        else:
            st.dataframe(df, use_container_width=True)
    else:
        st.info(f"–ù–µ—Ç –ª–æ–≥–æ–≤ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KWIN Bot")
    st.markdown("---")
    
    analytics, trail_logger, db = init_analytics()
    
    # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    col1, col2 = st.columns([3, 1])
    with col1:
        st.subheader("üìä –ü–µ—Ä–∏–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    with col2:
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            [30, 60, 90, 180],
            index=0,
            format_func=lambda x: f"{x} –¥–Ω–µ–π"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        stats = analytics.get_comprehensive_stats(period)  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å
        
        # --- Equity curve (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ DD$, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
        equity_curve_raw = None
        try:
            if hasattr(analytics, "get_equity_curve"):
                equity_curve_raw = analytics.get_equity_curve(period)
        except Exception:
            equity_curve_raw = None
        equity_series = _to_equity_series(equity_curve_raw)

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –≤ $ ---
        dd_block = stats.setdefault('drawdown', {})
        dd_pct = _safe_num(dd_block.get('max_drawdown', 0))
        dd_abs = dd_block.get('max_drawdown_abs', None)
        if dd_abs is None:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏–∑ equity_curve
            if equity_series is not None and not equity_series.empty:
                dd_abs_calc = _compute_max_drawdown_abs(equity_series)
                dd_block['max_drawdown_abs'] = float(dd_abs_calc)
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Äî —Ç–æ–∂–µ –ø–æ—Å—á–∏—Ç–∞–µ–º
                if dd_pct == 0:
                    dd_block['max_drawdown'] = float(_compute_max_drawdown_pct(equity_series))
            else:
                dd_block['max_drawdown_abs'] = 0.0

        total_trades = int(_safe_num(stats.get('total_trades', 0)))
        
        if total_trades > 0:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
            
            with col2:
                winrate = _safe_num(stats.get('winrate', {}).get('total', 0))
                st.metric("–û–±—â–∏–π Winrate", f"{winrate:.2f}%")
            
            with col3:
                total_pnl = _safe_num(stats.get('pnl', {}).get('total_pnl', 0))
                pnl_color = "normal" if total_pnl >= 0 else "inverse"
                st.metric("–û–±—â–∏–π PnL", f"${total_pnl:.2f}", delta_color=pnl_color)
            
            with col4:
                profit_factor = _safe_num(stats.get('pnl', {}).get('profit_factor', 0))
                st.metric("Profit Factor", f"{profit_factor:.2f}")
            
            with col5:
                avg_rr = _safe_num(stats.get('risk_reward', {}).get('avg_rr', 0))
                st.metric("–°—Ä–µ–¥–Ω–∏–π RR", f"{avg_rr:.2f}")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                total_roi = _safe_num(stats.get('roi', {}).get('total_roi', 0))
                st.metric("ROI", f"{total_roi:.2f}%")
            with col2:
                max_dd_pct = _safe_num(stats.get('drawdown', {}).get('max_drawdown', 0))
                st.metric("Max Drawdown (%)", f"{max_dd_pct:.2f}%")
            with col3:
                max_dd_abs = _safe_num(stats.get('drawdown', {}).get('max_drawdown_abs', 0))
                st.metric("Max Drawdown ($)", f"${max_dd_abs:.2f}")
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            st.plotly_chart(
                create_performance_chart(stats),
                use_container_width=True
            )

            # Equity & Drawdown
            if equity_series is not None and not equity_series.empty:
                st.subheader("üìâ Equity & Drawdown")
                st.plotly_chart(
                    create_equity_drawdown_chart(equity_series),
                    use_container_width=True
                )
            
            # –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            st.subheader("üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            monthly_data = analytics.get_monthly_performance()
            if monthly_data:
                st.plotly_chart(
                    create_monthly_performance_chart(monthly_data),
                    use_container_width=True
                )
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
            # –ê–Ω–∞–ª–∏–∑ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            st.subheader("üîç –ê–Ω–∞–ª–∏–∑ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            pattern_stats = analytics.get_sfp_pattern_stats()
            if pattern_stats:
                st.plotly_chart(
                    create_sfp_pattern_analysis(pattern_stats),
                    use_container_width=True
                )
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("**Bull SFP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                    bull_stats = pattern_stats.get('bull_sfp', {})
                    if bull_stats:
                        st.write(f"‚Ä¢ –°–¥–µ–ª–æ–∫: {int(_safe_num(bull_stats.get('trades', 0)))}")
                        st.write(f"‚Ä¢ Winrate: {_safe_num(bull_stats.get('winrate', 0)):.2f}%")
                        st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${_safe_num(bull_stats.get('avg_pnl', 0)):.2f}")
                        st.write(f"‚Ä¢ –û–±—â–∏–π PnL: ${_safe_num(bull_stats.get('total_pnl', 0)):.2f}")
                with col2:
                    st.markdown("**Bear SFP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                    bear_stats = pattern_stats.get('bear_sfp', {})
                    if bear_stats:
                        st.write(f"‚Ä¢ –°–¥–µ–ª–æ–∫: {int(_safe_num(bear_stats.get('trades', 0)))}")
                        st.write(f"‚Ä¢ Winrate: {_safe_num(bear_stats.get('winrate', 0)):.2f}%")
                        st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${_safe_num(bear_stats.get('avg_pnl', 0)):.2f}")
                        st.write(f"‚Ä¢ –û–±—â–∏–π PnL: ${_safe_num(bear_stats.get('total_pnl', 0)):.2f}")
            
            # –õ–æ–≥–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            display_trailing_logs(trail_logger)

            # ================= –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á—ë—Ç–∞ —Å–¥–µ–ª–æ–∫ =================
            st.markdown("---")
            st.subheader("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á—ë—Ç–∞ —Å–¥–µ–ª–æ–∫")
            try:
                trades_df = None
                # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ analytics, –µ—Å–ª–∏ –µ—Å—Ç—å —É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥
                if hasattr(analytics, "get_trades_dataframe"):
                    trades_df = analytics.get_trades_dataframe(period_days=period)
                elif hasattr(analytics, "get_trades"):
                    trades_raw = analytics.get_trades(period_days=period)
                    trades_df = pd.DataFrame(trades_raw) if trades_raw else None
                else:
                    # fallback –∫ –ë–î
                    if hasattr(db, "get_trades"):
                        trades_raw = db.get_trades(period_days=period)
                        trades_df = pd.DataFrame(trades_raw) if trades_raw else None

                if trades_df is not None and not trades_df.empty:
                    # –∫–æ—Ä–æ—Ç–∫–∏–π summary
                    total = len(trades_df)
                    closed = int((trades_df.get("status") == "closed").sum()) if "status" in trades_df.columns else None
                    long_cnt = int((trades_df.get("direction") == "long").sum()) if "direction" in trades_df.columns else None
                    short_cnt = int((trades_df.get("direction") == "short").sum()) if "direction" in trades_df.columns else None

                    c1, c2, c3, c4 = st.columns(4)
                    with c1: st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ (—Ç–∞–±–ª–∏—Ü–∞)", total)
                    with c2: st.metric("–ó–∞–∫—Ä—ã—Ç–æ", closed if closed is not None else 0)
                    with c3: st.metric("Long", long_cnt if long_cnt is not None else 0)
                    with c4: st.metric("Short", short_cnt if short_cnt is not None else 0)

                    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º PnL/qty/price
                    for col in ("entry_price","exit_price","pnl","qty"):
                        if col in trades_df.columns:
                            trades_df[col] = pd.to_numeric(trades_df[col], errors="coerce").round(4)

                    st.dataframe(
                        trades_df.head(500),
                        use_container_width=True,
                        height=350
                    )
                else:
                    st.info("–¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫ –ø–∏—à—É—Ç—Å—è –≤ –ë–î/–∞–Ω–∞–ª–∏—Ç–∏–∫—É.")
            except Exception as te:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫: {te}")

        else:
            st.info(f"–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period} –¥–Ω–µ–π")
            st.markdown("""
            **–î–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**
            1. –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—Ä–≥–æ–≤–ª–∏/–±—ç–∫—Ç–µ—Å—Ç–∞  
            2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–¥–µ–ª–∫–∏ **–∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è** –∏ –ø–∏—à—É—Ç—Å—è –≤ –ë–î  
            3. –î–æ–∂–¥–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ ‚Äî –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            """)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        st.info("–ü–æ–∫–∞–∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        demo_stats = {
            'total_trades': 15,
            'winrate': {'total': 73.3, 'long': 80.0, 'short': 66.7},
            'pnl': {
                'total_pnl': 125.50,
                'gross_profit': 180.0,
                'gross_loss': 54.5,
                'avg_win': 16.4,
                'avg_loss': 13.6,
                'profit_factor': 3.3
            },
            'risk_reward': {'avg_rr': 1.4, 'max_rr': 2.1, 'min_rr': 0.8},
            'roi': {'total_roi': 12.55, 'monthly_roi': 4.2, 'daily_roi': 0.14},
            'drawdown': {'max_drawdown': 3.2, 'current_drawdown': 0.8, 'max_drawdown_abs': -45.2}
        }
        
        st.plotly_chart(
            create_performance_chart(demo_stats),
            use_container_width=True
        )

if __name__ == "__main__":
    main()
