"""
üìà –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import streamlit as st
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from analytics import TradingAnalytics, TrailingLogger
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KWIN Bot - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="üìà",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
@st.cache_resource
def init_analytics():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    db = Database()
    analytics = TradingAnalytics()
    trail_logger = TrailingLogger()
    return analytics, trail_logger

def create_performance_chart(stats: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=[
            'Winrate –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (%)',
            'PnL –º–µ—Ç—Ä–∏–∫–∏ (USDT)',
            'Risk/Reward —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'ROI –¥–∏–Ω–∞–º–∏–∫–∞ (%)'
        ],
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "scatter"}]]
    )
    
    # 1. Winrate
    winrate = stats.get('winrate', {})
    fig.add_trace(
        go.Bar(
            x=['Total', 'Long', 'Short'],
            y=[winrate.get('total', 0), winrate.get('long', 0), winrate.get('short', 0)],
            name='Winrate',
            marker_color=['#00D4AA', '#1f77b4', '#ff7f0e']
        ),
        row=1, col=1
    )
    
    # 2. PnL –º–µ—Ç—Ä–∏–∫–∏
    pnl = stats.get('pnl', {})
    fig.add_trace(
        go.Bar(
            x=['Total PnL', 'Gross Profit', 'Gross Loss', 'Avg Win', 'Avg Loss'],
            y=[
                pnl.get('total_pnl', 0),
                pnl.get('gross_profit', 0),
                -abs(pnl.get('gross_loss', 0)),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —É–±—ã—Ç–∫–æ–≤
                pnl.get('avg_win', 0),
                -abs(pnl.get('avg_loss', 0))
            ],
            name='PnL',
            marker_color=['#00D4AA' if x >= 0 else '#FF4B4B' for x in [
                pnl.get('total_pnl', 0),
                pnl.get('gross_profit', 0),
                -abs(pnl.get('gross_loss', 0)),
                pnl.get('avg_win', 0),
                -abs(pnl.get('avg_loss', 0))
            ]]
        ),
        row=1, col=2
    )
    
    # 3. Risk/Reward
    rr = stats.get('risk_reward', {})
    fig.add_trace(
        go.Bar(
            x=['Avg RR', 'Max RR', 'Min RR'],
            y=[rr.get('avg_rr', 0), rr.get('max_rr', 0), rr.get('min_rr', 0)],
            name='Risk/Reward',
            marker_color='#9C27B0'
        ),
        row=2, col=1
    )
    
    # 4. ROI
    roi = stats.get('roi', {})
    fig.add_trace(
        go.Scatter(
            x=['Total ROI', 'Monthly ROI', 'Daily ROI'],
            y=[roi.get('total_roi', 0), roi.get('monthly_roi', 0), roi.get('daily_roi', 0)],
            mode='lines+markers',
            name='ROI',
            line=dict(color='#FF6B35', width=3),
            marker=dict(size=10)
        ),
        row=2, col=2
    )
    
    fig.update_layout(
        height=600,
        showlegend=False,
        title_text="–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤",
        title_x=0.5
    )
    
    return fig

def create_monthly_performance_chart(monthly_data: list):
    """–ì—Ä–∞—Ñ–∏–∫ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not monthly_data:
        return go.Figure()
    
    months = [item['month'] for item in monthly_data]
    pnl = [item['total_pnl'] for item in monthly_data]
    winrates = [item['winrate'] for item in monthly_data]
    trades = [item['trades'] for item in monthly_data]
    
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=['–ú–µ—Å—è—á–Ω—ã–π PnL (USDT)', 'Winrate & –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'],
        secondary_y=True
    )
    
    # PnL –ø–æ –º–µ—Å—è—Ü–∞–º
    fig.add_trace(
        go.Bar(
            x=months,
            y=pnl,
            name='PnL',
            marker_color=['#00D4AA' if x >= 0 else '#FF4B4B' for x in pnl]
        ),
        row=1, col=1
    )
    
    # Winrate
    fig.add_trace(
        go.Scatter(
            x=months,
            y=winrates,
            mode='lines+markers',
            name='Winrate (%)',
            line=dict(color='#1f77b4', width=2),
            yaxis='y2'
        ),
        row=2, col=1
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    fig.add_trace(
        go.Bar(
            x=months,
            y=trades,
            name='Trades',
            marker_color='#ff7f0e',
            opacity=0.7,
            yaxis='y3'
        ),
        row=2, col=1
    )
    
    fig.update_layout(height=500, showlegend=True)
    return fig

def create_sfp_pattern_analysis(pattern_stats: dict):
    """–ê–Ω–∞–ª–∏–∑ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    bull_stats = pattern_stats.get('bull_sfp', {})
    bear_stats = pattern_stats.get('bear_sfp', {})
    
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=['Bull SFP Performance', 'Bear SFP Performance'],
        specs=[[{"type": "bar"}, {"type": "bar"}]]
    )
    
    # Bull SFP
    fig.add_trace(
        go.Bar(
            x=['Trades', 'Winrate %', 'Avg PnL', 'Total PnL'],
            y=[
                bull_stats.get('trades', 0),
                bull_stats.get('winrate', 0),
                bull_stats.get('avg_pnl', 0),
                bull_stats.get('total_pnl', 0)
            ],
            name='Bull SFP',
            marker_color='#00D4AA'
        ),
        row=1, col=1
    )
    
    # Bear SFP
    fig.add_trace(
        go.Bar(
            x=['Trades', 'Winrate %', 'Avg PnL', 'Total PnL'],
            y=[
                bear_stats.get('trades', 0),
                bear_stats.get('winrate', 0),
                bear_stats.get('avg_pnl', 0),
                bear_stats.get('total_pnl', 0)
            ],
            name='Bear SFP',
            marker_color='#FF4B4B'
        ),
        row=1, col=2
    )
    
    fig.update_layout(height=400, showlegend=False)
    return fig

def display_trailing_logs(trail_logger: TrailingLogger):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞"""
    st.subheader("üéØ –õ–æ–≥–∏ Smart Trailing")
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    hours_back = st.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –ª–æ–≥–æ–≤:",
        [1, 6, 12, 24, 48, 72],
        index=3,
        format_func=lambda x: f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {x} —á–∞—Å–æ–≤"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    trail_logs = trail_logger.get_trailing_history(hours_back)
    
    if trail_logs:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df = pd.DataFrame(trail_logs)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        display_columns = ['timestamp', 'direction', 'trigger_type', 'old_sl', 'new_sl', 
                         'current_price', 'trail_distance', 'unrealized_pnl', 'arm_status']
        
        if all(col in df.columns for col in display_columns):
            df_display = df[display_columns].copy()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for col in ['old_sl', 'new_sl', 'current_price', 'trail_distance', 'unrealized_pnl']:
                if col in df_display.columns:
                    df_display[col] = df_display[col].round(2)
            
            st.dataframe(
                df_display,
                use_container_width=True,
                height=300
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π", len(df))
            
            with col2:
                long_trails = len(df[df['direction'] == 'long'])
                st.metric("Long —Ç—Ä–µ–π–ª—ã", long_trails)
            
            with col3:
                short_trails = len(df[df['direction'] == 'short'])
                st.metric("Short —Ç—Ä–µ–π–ª—ã", short_trails)
            
            with col4:
                avg_distance = df['trail_distance'].mean() if 'trail_distance' in df.columns else 0
                st.metric("–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è", f"{avg_distance:.2f}")
        else:
            st.dataframe(df, use_container_width=True)
    else:
        st.info(f"–ù–µ—Ç –ª–æ–≥–æ–≤ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KWIN Bot")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    analytics, trail_logger = init_analytics()
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.subheader("üìä –ü–µ—Ä–∏–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    with col2:
        period = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            [30, 60, 90, 180],
            index=0,
            format_func=lambda x: f"{x} –¥–Ω–µ–π"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        stats = analytics.get_comprehensive_stats(period)
        
        if stats and stats.get('total_trades', 0) > 0:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_trades = stats.get('total_trades', 0)
                st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
            
            with col2:
                winrate = stats.get('winrate', {}).get('total', 0)
                st.metric("–û–±—â–∏–π Winrate", f"{winrate}%")
            
            with col3:
                total_pnl = stats.get('pnl', {}).get('total_pnl', 0)
                pnl_color = "normal" if total_pnl >= 0 else "inverse"
                st.metric("–û–±—â–∏–π PnL", f"${total_pnl}", delta_color=pnl_color)
            
            with col4:
                profit_factor = stats.get('pnl', {}).get('profit_factor', 0)
                st.metric("Profit Factor", f"{profit_factor}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                avg_rr = stats.get('risk_reward', {}).get('avg_rr', 0)
                st.metric("–°—Ä–µ–¥–Ω–∏–π RR", f"{avg_rr}")
            
            with col2:
                total_roi = stats.get('roi', {}).get('total_roi', 0)
                st.metric("ROI", f"{total_roi}%")
            
            with col3:
                max_dd = stats.get('drawdown', {}).get('max_drawdown', 0)
                st.metric("Max Drawdown", f"{max_dd}%")
            
            with col4:
                monthly_roi = stats.get('roi', {}).get('monthly_roi', 0)
                st.metric("–ú–µ—Å—è—á–Ω—ã–π ROI", f"{monthly_roi}%")
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            st.plotly_chart(
                create_performance_chart(stats),
                use_container_width=True
            )
            
            # –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            st.subheader("üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            monthly_data = analytics.get_monthly_performance()
            
            if monthly_data:
                st.plotly_chart(
                    create_monthly_performance_chart(monthly_data),
                    use_container_width=True
                )
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
            # –ê–Ω–∞–ª–∏–∑ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            st.subheader("üîç –ê–Ω–∞–ª–∏–∑ SFP –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            pattern_stats = analytics.get_sfp_pattern_stats()
            
            if pattern_stats:
                st.plotly_chart(
                    create_sfp_pattern_analysis(pattern_stats),
                    use_container_width=True
                )
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Bull SFP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                    bull_stats = pattern_stats.get('bull_sfp', {})
                    if bull_stats:
                        st.write(f"‚Ä¢ –°–¥–µ–ª–æ–∫: {bull_stats.get('trades', 0)}")
                        st.write(f"‚Ä¢ Winrate: {bull_stats.get('winrate', 0)}%")
                        st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${bull_stats.get('avg_pnl', 0)}")
                        st.write(f"‚Ä¢ –û–±—â–∏–π PnL: ${bull_stats.get('total_pnl', 0)}")
                
                with col2:
                    st.markdown("**Bear SFP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                    bear_stats = pattern_stats.get('bear_sfp', {})
                    if bear_stats:
                        st.write(f"‚Ä¢ –°–¥–µ–ª–æ–∫: {bear_stats.get('trades', 0)}")
                        st.write(f"‚Ä¢ Winrate: {bear_stats.get('winrate', 0)}%")
                        st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${bear_stats.get('avg_pnl', 0)}")
                        st.write(f"‚Ä¢ –û–±—â–∏–π PnL: ${bear_stats.get('total_pnl', 0)}")
            
            # –õ–æ–≥–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            display_trailing_logs(trail_logger)
            
        else:
            st.info(f"–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period} –¥–Ω–µ–π")
            st.markdown("""
            **–î–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**
            1. –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
            2. –î–æ–∂–¥–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã—Ö —Å–¥–µ–ª–æ–∫
            3. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            """)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        st.info("–ü–æ–∫–∞–∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        demo_stats = {
            'total_trades': 15,
            'winrate': {'total': 73.3, 'long': 80.0, 'short': 66.7},
            'pnl': {
                'total_pnl': 125.50,
                'gross_profit': 180.0,
                'gross_loss': 54.5,
                'avg_win': 16.4,
                'avg_loss': 13.6,
                'profit_factor': 3.3
            },
            'risk_reward': {'avg_rr': 1.4, 'max_rr': 2.1, 'min_rr': 0.8},
            'roi': {'total_roi': 12.55, 'monthly_roi': 4.2, 'daily_roi': 0.14},
            'drawdown': {'max_drawdown': 3.2, 'current_drawdown': 0.8}
        }
        
        st.plotly_chart(
            create_performance_chart(demo_stats),
            use_container_width=True
        )

if __name__ == "__main__":
    main()
