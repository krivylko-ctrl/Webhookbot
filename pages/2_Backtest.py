# 2_Backtest.py
# –†–µ–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç: Bybit Futures 15m OHLC -> –¥–µ–º–æ-—Ä–∞–Ω–¥–æ–º —Å–¥–µ–ª–∫–∏/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–∫–Ω–æ –æ—Ç "—Å–µ–π—á–∞—Å" –Ω–∞–∑–∞–¥)

import os
import io
import sys
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional, Tuple

import numpy as np
import pandas as pd
import streamlit as st
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (—á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏)
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from kwin_strategy import KWINStrategy
from database import Database
from config import Config
from bybit_api import BybitAPI  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
from state_manager import StateManager

# -------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ --------------------
api = None
db = Database(memory=True)            # –∏–ª–∏ Database("kwin_bot.db")
state = StateManager(db)

# ====================== –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======================
def _utc_now_ms() -> int:
    return int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp() * 1000)

def _window_ms(days: int) -> Tuple[int, int]:
    end_ms = _utc_now_ms()
    start_ms = end_ms - days * 24 * 60 * 60 * 1000
    return start_ms, end_ms

def _ensure_ms(ts):
    if ts is None:
        return None
    if isinstance(ts, (int, float)):
        return int(ts if ts > 1e11 else ts * 1000)
    if isinstance(ts, str):
        try:
            dt = pd.to_datetime(ts, utc=True)
            return int(dt.value // 10**6)
        except Exception:
            return None
    return None

def _normalize_klines(raw: List[Dict]) -> List[Dict]:
    if not raw:
        return []
    out = []
    for k in raw:
        ts = k.get("timestamp") or k.get("start") or k.get("open_time") or k.get("t")
        ts = _ensure_ms(ts)
        if ts is None:
            continue
        out.append({
            "timestamp": ts,
            "open":  float(k.get("open",  k.get("o", 0.0))),
            "high":  float(k.get("high",  k.get("h", 0.0))),
            "low":   float(k.get("low",   k.get("l", 0.0))),
            "close": float(k.get("close", k.get("c", 0.0))),
            "volume": float(k.get("volume", k.get("v", 0.0))),
        })
    # –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ "–ø—Ä–æ–≥–æ–Ω–∞ –≤–ø–µ—Ä—ë–¥")
    out.sort(key=lambda x: x["timestamp"])
    return out

@st.cache_data(show_spinner=False)
def load_klines_bybit_window(_api, symbol: str, days: int) -> List[Dict]:
    """
    –†–µ–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ Bybit (—Ñ—å—é—á–µ—Ä—Å—ã/–ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã): –±–µ—Ä—ë–º –∑–∞–ø–∞—Å –ø–æ –ª–∏–º–∏—Ç—É –∏ —Ä–µ–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (UTC).
    –í–∞–∂–Ω–æ: –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è _api, —á—Ç–æ–±—ã st.cache_data –Ω–µ –ø—ã—Ç–∞–ª—Å—è –µ–≥–æ —Ö—ç—à–∏—Ä–æ–≤–∞—Ç—å.
    """
    if _api is None:
        return []

    # –ü–æ–ø—Ä–æ—Å–∏–º –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏, –µ—Å–ª–∏ –æ–Ω —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    try:
        if hasattr(_api, "set_market_type"):
            # –Ω–∞–∏–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "linear" (USDT-–ø–µ—Ä–ø), "contract" –∏–ª–∏ "futures"
            for mt in ("linear", "contract", "futures"):
                try:
                    _api.set_market_type(mt)
                    break
                except Exception:
                    continue
    except Exception:
        pass

    start_ms, end_ms = _window_ms(days)
    # 15m ‚âà 96 –±–∞—Ä–æ–≤/–¥–µ–Ω—å. –í–æ–∑—å–º—ë–º –∑–∞–ø–∞—Å, –ø–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–∫–Ω—É.
    need = int(days * 96 * 1.2) + 50

    try:
        raw = _api.get_klines(symbol, "15", need) or []
    except Exception:
        return []

    kl = _normalize_klines(raw)
    # —Ä–µ–∂–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –æ–∫–Ω—É [now - days, now] (UTC)
    kl = [b for b in kl if start_ms <= b["timestamp"] <= end_ms]

    # –ø—Ä–∏–≤–µ–¥—ë–º timestamp –≤ pandas-–¥–∞—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤/—Ç–∞–±–ª–∏—Ü
    for b in kl:
        b["timestamp"] = pd.to_datetime(b["timestamp"], unit="ms", utc=True)
    return kl

# ========================================================================
def main():
    st.set_page_config(page_title="KWIN Backtest", page_icon="üìà", layout="wide")

    st.title("üìä KWIN Strategy Backtest")
    st.markdown("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ **—Ä–µ–∞–ª—å–Ω—ã—Ö 15-–º–∏–Ω —Å–≤–µ—á–∞—Ö Bybit Futures** (–æ–∫–Ω–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞–∑–∞–¥).")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    col1, col2 = st.columns(2)
    with col1:
        start_capital = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ($)", min_value=100, value=10_000, step=100)
        period_days   = st.selectbox("–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Å–µ–π—á–∞—Å)", [7, 14, 30, 60, 90], index=2)
    with col2:
        symbol   = st.selectbox("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (USDT Perp)", ["ETHUSDT", "BTCUSDT"], index=0)
        fee_rate = st.number_input("–ö–æ–º–∏—Å—Å–∏—è (%)", min_value=0.01, max_value=1.0, value=0.055, step=0.005)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    c1, c2, c3 = st.columns(3)
    with c1:
        risk_reward = st.number_input("Risk/Reward", min_value=0.5, max_value=5.0, value=1.3, step=0.1)
        sfp_len     = st.number_input("SFP Length", min_value=1, max_value=10, value=2, step=1)
        risk_pct    = st.number_input("Risk %", min_value=0.5, max_value=10.0, value=3.0, step=0.5)
    with c2:
        enable_smart_trail = st.checkbox("Smart Trailing", value=True)
        trailing_perc      = st.number_input("Trailing % (of entry)", min_value=0.0, max_value=5.0, value=0.5, step=0.1)
        trailing_offset    = st.number_input("Trailing Offset %",   min_value=0.0, max_value=2.0, value=0.4, step=0.1)
    with c3:
        use_sfp_quality = st.checkbox("SFP Quality Filter", value=True)
        wick_min_ticks  = st.number_input("Min Wick Ticks", min_value=1, max_value=20, value=7, step=1)
        close_back_pct  = st.number_input("Close Back (0..1)", min_value=0.1, max_value=2.0, value=1.0, step=0.1)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–∞—Ö Bybit..."):
            try:
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                config = Config()
                config.symbol = symbol
                config.risk_reward = float(risk_reward)
                config.sfp_len = int(sfp_len)
                config.risk_pct = float(risk_pct)

                config.enable_smart_trail = bool(enable_smart_trail)
                config.trailing_perc = float(trailing_perc)
                config.trailing_offset_perc = float(trailing_offset)
                config.trailing_offset = float(trailing_offset)

                config.use_sfp_quality = bool(use_sfp_quality)
                config.wick_min_ticks = int(wick_min_ticks)
                config.close_back_pct = float(close_back_pct)
                config.taker_fee_rate = float(fee_rate) / 100.0  # 0.055% -> 0.00055

                # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—á–µ–π: –¢–û–õ–¨–ö–û Bybit (—Ñ—å—é—á–µ—Ä—Å—ã), –æ–∫–Ω–æ –æ—Ç "—Å–µ–π—á–∞—Å" –Ω–∞–∑–∞–¥
                _api = BybitAPI(api_key=os.getenv("BYBIT_API_KEY"),
                                api_secret=os.getenv("BYBIT_API_SECRET"))
                candles = load_klines_bybit_window(_api, symbol, period_days)

                if not candles:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ Bybit –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
                    return

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ db/state (api –æ—Å—Ç–∞—ë—Ç—Å—è None, —ç—Ç–æ –¥–µ–º–æ-—Å–∏–º—É–ª—è—Ü–∏—è)
                strategy = KWINStrategy(config, api, state, db)

                # –ë—ç–∫—Ç–µ—Å—Ç
                results = run_backtest(strategy, candles, start_capital)

                # –í—ã–≤–æ–¥
                display_backtest_results(results, f"Bybit Futures 15m ‚Äî {symbol}")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
                st.exception(e)

# ========================================================================
def run_backtest(strategy: KWINStrategy, candles: List[Dict], start_capital: float):
    """–î–µ–º–æ-—Å–∏–º—É–ª—è—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ 15m —Å–≤–µ—á–∏ (–ø–æ —Å–ø–∏—Å–∫—É candles)."""
    current_equity = float(start_capital)
    equity_points = []

    for i in range(2, len(candles)):  # —Å 3-–π —Å–≤–µ—á–∏, —á—Ç–æ–±—ã –±—ã–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç
        candle = candles[i]

        # –î–ï–ú–û: —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞)
        if np.random.random() < 0.05:
            direction   = "long" if np.random.random() > 0.5 else "short"
            entry_price = candle["close"]
            stop_loss   = entry_price * (0.98 if direction == "long" else 1.02)
            take_profit = entry_price * (1.026 if direction == "long" else 0.974)

            risk_amount   = current_equity * (strategy.config.risk_pct / 100.0)
            stop_distance = abs(entry_price - stop_loss)
            quantity = risk_amount / stop_distance if stop_distance > 0 else 0.0

            if quantity > 0:
                win = (np.random.random() < 0.55)
                exit_price = take_profit if win else stop_loss

                pnl = (exit_price - entry_price) * quantity if direction == "long" else (entry_price - exit_price) * quantity
                commission = (entry_price + exit_price) * quantity * strategy.config.taker_fee_rate
                net_pnl = pnl - commission
                current_equity += net_pnl

                rr = abs(pnl) / (quantity * stop_distance) if stop_distance > 0 else 0.0

                trade_data = {
                    "symbol": strategy.config.symbol,
                    "direction": direction,
                    "entry_price": float(entry_price),
                    "exit_price": float(exit_price),
                    "stop_loss": float(stop_loss),
                    "take_profit": float(take_profit),
                    "quantity": float(quantity),
                    "pnl": float(net_pnl),
                    "rr": float(rr),
                    "entry_time": candle["timestamp"],
                    "exit_time": candle["timestamp"] + timedelta(minutes=int(np.random.randint(15, 240))),
                    "exit_reason": "TP" if net_pnl > 0 else "SL",
                    "status": "closed",
                }
                if hasattr(strategy.db, "add_trade"):
                    strategy.db.add_trade(trade_data)
                elif hasattr(strategy.db, "save_trade"):
                    strategy.db.save_trade(trade_data)

        equity_points.append({"timestamp": candle["timestamp"], "equity": current_equity})

    trades_list = []
    if hasattr(strategy.db, "get_recent_trades"):
        trades_list = strategy.db.get_recent_trades(100000)
    elif hasattr(strategy.db, "get_trades"):
        trades_list = strategy.db.get_trades()
    trades_df = pd.DataFrame(trades_list)
    equity_df = pd.DataFrame(equity_points)

    return {
        "trades_df": trades_df,
        "equity_df": equity_df,
        "final_equity": current_equity,
        "initial_equity": start_capital,
    }

# ========================================================================
def display_backtest_results(results, data_source_label: str):
    trades_df = results["trades_df"]
    equity_df = results["equity_df"]
    final_equity = results["final_equity"]
    initial_equity = results["initial_equity"]

    # –ú–µ—Ç—Ä–∏–∫–∏
    if trades_df.empty:
        total_trades = winning_trades = losing_trades = 0
        win_rate = 0.0
        profit_factor = 0.0
        max_dd = 0.0
    else:
        total_trades = len(trades_df)
        winning_trades = int((trades_df["pnl"] > 0).sum())
        losing_trades  = int((trades_df["pnl"] < 0).sum())
        win_rate = (winning_trades / total_trades * 100.0) if total_trades else 0.0

        gross_profit = trades_df.loc[trades_df["pnl"] > 0, "pnl"].sum()
        gross_loss   = -trades_df.loc[trades_df["pnl"] < 0, "pnl"].sum()
        profit_factor = (gross_profit / gross_loss) if gross_loss > 0 else (float("inf") if gross_profit > 0 else 0.0)

        if not equity_df.empty and len(equity_df) > 1:
            eq = equity_df.copy()
            eq["cummax"]  = eq["equity"].cummax()
            eq["drawdown"] = (eq["equity"] - eq["cummax"]) / eq["cummax"] * 100.0
            max_dd = float(eq["drawdown"].min())
        else:
            max_dd = 0.0

    total_return = ((final_equity - initial_equity) / initial_equity) * 100.0

    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
    c1, c2, c3, c4, c5 = st.columns(5)
    c1.metric("–û–±—â–∏–µ —Å–¥–µ–ª–∫–∏", total_trades)
    c2.metric("–í–∏–Ω—Ä–µ–π—Ç", f"{win_rate:.1f}%")
    c3.metric("Profit Factor", "‚àû" if profit_factor == float("inf") else f"{profit_factor:.2f}")
    c4.metric("Max DD", f"{max_dd:.2f}%")
    c5.metric("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{total_return:.2f}%")

    c1, c2 = st.columns(2)
    c1.metric("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${initial_equity:,.2f}")
    profit_loss = final_equity - initial_equity
    c2.metric("–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${final_equity:,.2f}", delta=f"${profit_loss:,.2f}")

    # –ì—Ä–∞—Ñ–∏–∫ Equity
    if not equity_df.empty and len(equity_df) > 1:
        st.subheader("üìä –ö—Ä–∏–≤–∞—è Equity")
        fig = make_subplots(rows=2, cols=1, row_heights=[0.7, 0.3],
                            subplot_titles=("Equity", "Drawdown"),
                            shared_xaxes=True, vertical_spacing=0.05)
        fig.add_trace(go.Scatter(x=equity_df["timestamp"], y=equity_df["equity"], mode="lines",
                                 name="Equity", line=dict(color="green", width=2)), row=1, col=1)

        eq = equity_df.copy()
        eq["cummax"]  = eq["equity"].cummax()
        eq["drawdown"] = (eq["equity"] - eq["cummax"]) / eq["cummax"] * 100.0
        fig.add_trace(go.Scatter(x=eq["timestamp"], y=eq["drawdown"], mode="lines",
                                 name="Drawdown", line=dict(color="red", width=1),
                                 fill="tozeroy", fillcolor="rgba(255,0,0,0.2)"), row=2, col=1)

        fig.update_layout(height=600, showlegend=True, title_text=f"–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Ä¢ {data_source_label}")
        fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=2, col=1)
        fig.update_yaxes(title_text="Equity ($)", row=1, col=1)
        fig.update_yaxes(title_text="Drawdown (%)", row=2, col=1)
        st.plotly_chart(fig, use_container_width=True)

    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    if not trades_df.empty:
        st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        disp = trades_df.copy()
        for col in ("entry_time", "exit_time"):
            if col in disp.columns:
                disp[col] = pd.to_datetime(disp[col]).dt.strftime("%Y-%m-%d %H:%M")
        for col in ("pnl", "rr", "entry_price", "exit_price"):
            if col in disp.columns:
                disp[col] = pd.to_numeric(disp[col], errors="coerce").round(2)
        if "quantity" in disp.columns:
            disp["quantity"] = pd.to_numeric(disp["quantity"], errors="coerce").round(4)
        st.dataframe(disp.tail(20), use_container_width=True)

    st.markdown("---")
    st.info(
        "–†–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤ —Å–ª—É—á–∞–π–Ω–∞—è ‚Äî **–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—á–µ–π** "
        "(—Ä–µ–∞–ª—å–Ω—ã–µ 15m Bybit Futures, –æ–∫–Ω–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞–∑–∞–¥). –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ "
        "–ø—Ä–æ–≥–æ–Ω—è–π—Ç–µ –ø–æ —Å–≤–µ—á–∞–º –≤–∞—à—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é."
    )

# ========================================================================
if __name__ == "__main__":
    main()
