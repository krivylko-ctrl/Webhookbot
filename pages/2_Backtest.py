import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta, timezone
import requests   # ‚Üê –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ v5
import time       # ‚Üê –∞–Ω—Ç–∏-—Ä–µ–π—Ç–∫—ç–ø –≤ –∑–∞–≥—Ä—É–∑—á–∏–∫–µ
from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype  # ‚Üê –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
import sys
import os

# –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (—á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏)
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from kwin_strategy import KWINStrategy
from database import Database
from config import Config
from bybit_api import BybitAPI  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
from state_manager import StateManager

# -------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ --------------------
# –æ–¥–Ω–∞ –ë–î –∏ –æ–¥–∏–Ω StateManager –Ω–∞ —Å–µ—Å—Å–∏—é
api = None
db = Database(memory=True)            # –∏–ª–∏ Database("kwin_bot.db") ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ñ–∞–π–ª
state = StateManager(db)

# ===================== –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ Bybit v5 =====================
BYBIT_V5_URL = "https://api.bybit.com/v5/market/kline"

def fetch_bybit_v5_window(symbol: str, days: int, interval: str = "15", category: str = "linear") -> list[dict]:
    """
    –†–µ–∞–ª—å–Ω—ã–µ 15m —Å–≤–µ—á–∏ Bybit v5 –∑–∞ –æ–∫–Ω–æ [UTC-now - days, UTC-now] c —É—Å—Ç–æ–π—á–∏–≤—ã–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ {timestamp, open, high, low, close, volume} (timestamp –≤ –º—Å, –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é).
    """
    now_ms = int(datetime.utcnow().timestamp() * 1000)
    start_ms = now_ms - days * 24 * 60 * 60 * 1000
    end_ms = now_ms

    limit = 1000
    tf_ms = 15 * 60 * 1000
    chunk_ms = limit * tf_ms  # ~10.4 –¥–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—Å

    out = []
    cursor_start = start_ms
    req_id = 0

    while cursor_start <= end_ms:
        req_id += 1
        cursor_end = min(end_ms, cursor_start + chunk_ms - 1)

        params = {
            "category": category,
            "symbol": symbol.upper(),
            "interval": str(interval),
            "start": int(cursor_start),
            "end": int(cursor_end),
            "limit": int(limit),
        }
        st.caption(
            f"‚ñ∏ Bybit v5 –∑–∞–ø—Ä–æ—Å #{req_id}: "
            f"{datetime.utcfromtimestamp(params['start']/1000):%Y-%m-%d %H:%M} ‚Üí "
            f"{datetime.utcfromtimestamp(params['end']/1000):%Y-%m-%d %H:%M} UTC"
        )

        # -------- –†–ï–¢–†–ê–ò –ù–ê –û–î–ò–ù –ò –¢–û–¢ –ñ–ï –ß–ê–ù–ö --------
        max_retries = 6
        backoff = 1.5  # —Å–µ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–∞—É–∑–∞
        attempt = 0
        got_chunk = False

        while attempt < max_retries and not got_chunk:
            attempt += 1
            try:
                r = requests.get(BYBIT_V5_URL, params=params, timeout=25)
            except Exception as e:
                st.error(f"[#{req_id}/try{attempt}] –°–µ—Ç–µ–≤–æ–π —Å–±–æ–π: {e}")
                time.sleep(backoff)
                backoff *= 1.6
                continue

            if r.status_code == 403:
                st.error(f"HTTP 403 (rate limit) –Ω–∞ —á–∞–Ω–∫ #{req_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}. –ñ–¥—É {backoff:.1f}s‚Ä¶")
                time.sleep(backoff)
                backoff *= 1.6
                continue

            if r.status_code != 200:
                st.error(f"HTTP {r.status_code} –Ω–∞ —á–∞–Ω–∫ #{req_id}: {r.text[:200]}")
                time.sleep(backoff)
                backoff *= 1.6
                continue

            try:
                data = r.json()
            except Exception:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –Ω–∞ —á–∞–Ω–∫ #{req_id}: {r.text[:200]}")
                time.sleep(backoff)
                backoff *= 1.6
                continue

            if str(data.get("retCode")) != "0":
                st.error(f"retCode={data.get('retCode')} retMsg={data.get('retMsg')} –Ω–∞ —á–∞–Ω–∫ #{req_id}")
                time.sleep(backoff)
                backoff *= 1.6
                continue

            rows = ((data.get("result") or {}).get("list") or [])
            if not rows:
                # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç: —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –Ω–∞ –∫—Ä–∞—è—Ö –æ–∫–Ω–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º —á–∞–Ω–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
                got_chunk = True
                break

            # –£—Å–ø–µ—Ö
            for row in rows:
                ts = int(row[0])
                if start_ms <= ts <= end_ms:
                    out.append({
                        "timestamp": ts,
                        "open":  float(row[1]),
                        "high":  float(row[2]),
                        "low":   float(row[3]),
                        "close": float(row[4]),
                        "volume": float(row[5]) if row[5] is not None else 0.0,
                    })
            got_chunk = True

        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å —á–∞–Ω–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å
        if not got_chunk:
            st.error(f"–ß–∞–Ω–∫ #{req_id} –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")

        # —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—Ä–µ–∑–æ–∫ –æ–∫–Ω–∞ + –º—è–≥–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞—á–Ω—ã–º–∏ —á–∞–Ω–∫–∞–º–∏
        cursor_start = cursor_end + 1
        time.sleep(0.6)

    # –¥–µ–¥—É–ø –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    out = sorted({b["timestamp"]: b for b in out}.values(), key=lambda x: x["timestamp"])

    if out:
        first_dt = datetime.utcfromtimestamp(out[0]["timestamp"]/1000)
        last_dt  = datetime.utcfromtimestamp(out[-1]["timestamp"]/1000)
        st.success(f"‚úÖ –°–≤–µ—á–∏ Bybit v5 –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(out)} —à—Ç ‚Ä¢ {first_dt:%Y-%m-%d %H:%–ú} ‚Äî {last_dt:%Y-%m-%d %H:%–ú} UTC")
    else:
        st.warning("Bybit v5 –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

    return out

# ===================== paper-API –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ =====================
class PaperBybitAPI:
    """–ú–∏–Ω–∏-—ç–º—É–ª—è—Ç–æ—Ä –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)."""
    def __init__(self):
        self._price = None
    def set_price(self, price: float):
        self._price = float(price)
    def get_ticker(self, symbol: str):
        return {"mark_price": self._price, "last_price": self._price}
    def place_order(self, **kwargs):
        return {"status": "Filled", "orderId": "paper"}
    def modify_order(self, **kwargs):
        return {"status": "OK"}
    def get_wallet_balance(self):
        return {"list": []}

# ========================================================================
def main():
    st.set_page_config(page_title="KWIN Backtest", page_icon="üìà", layout="wide")

    st.title("üìä KWIN Strategy Backtest")
    st.markdown("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

    # –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–≤–µ—á–µ–π
    data_src = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
        ["Bybit v5 (—Ä–µ–∞–ª—å–Ω—ã–µ 15m)", "–°–∏–Ω—Ç–µ—Ç–∏–∫–∞ (–¥–µ–º–æ)"],
        horizontal=True,
        index=0
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    col1, col2 = st.columns(2)
    with col1:
        start_capital = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª ($)", min_value=100, value=10_000, step=100)
        period_days   = st.selectbox("–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", [7, 14, 30, 60, 90], index=2)
    with col2:
        symbol   = st.selectbox("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞", ["ETHUSDT", "BTCUSDT"], index=0)
        fee_rate = st.number_input("–ö–æ–º–∏—Å—Å–∏—è (%)", min_value=0.01, max_value=1.0, value=0.055, step=0.005)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    c1, c2, c3 = st.columns(3)
    with c1:
        risk_reward = st.number_input("Risk/Reward", min_value=0.5, max_value=5.0, value=1.3, step=0.1)
        sfp_len     = st.number_input("SFP Length", min_value=1, max_value=10, value=2, step=1)
        risk_pct    = st.number_input("Risk %", min_value=0.5, max_value=10.0, value=3.0, step=0.5)
    with c2:
        enable_smart_trail = st.checkbox("Smart Trailing", value=True)
        trailing_perc      = st.number_input("Trailing % (of entry)", min_value=0.0, max_value=5.0, value=0.5, step=0.1)
        trailing_offset    = st.number_input("Trailing Offset %",   min_value=0.0, max_value=2.0, value=0.4, step=0.1)
        # +++ –î–û–ë–ê–í–õ–ï–ù–û UI –î–õ–Ø ARM +++
        arm_after_rr       = st.checkbox("Arm after RR", value=True)
        arm_rr             = st.number_input("ARM RR (R)", min_value=0.1, max_value=5.0, value=0.5, step=0.1)
    with c3:
        use_sfp_quality = st.checkbox("SFP Quality Filter", value=True)
        wick_min_ticks  = st.number_input("Min Wick Ticks", min_value=1, max_value=20, value=7, step=1)
        close_back_pct  = st.number_input("Close Back (0..1)", min_value=0.1, max_value=2.0, value=1.0, step=0.1)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ç–∫—Ç–µ—Å—Ç..."):
            try:
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                config = Config()
                config.symbol = symbol
                config.risk_reward = float(risk_reward)
                config.sfp_len = int(sfp_len)
                config.risk_pct = float(risk_pct)

                config.enable_smart_trail = bool(enable_smart_trail)
                config.trailing_perc = float(trailing_perc) # –ø—Ä–æ—Ü–µ–Ω—Ç—ã ‚Üí –¥–æ–ª—è
                config.trailing_offset_perc = float(trailing_offset)
                config.trailing_offset = float(trailing_offset)

                # +++ –ü–†–û–ö–ò–ù–£–õ–ò ARM –í CONFIG +++
                config.use_arm_after_rr = bool(arm_after_rr)
                config.arm_rr = float(arm_rr)

                config.use_sfp_quality = bool(use_sfp_quality)
                config.wick_min_ticks = int(wick_min_ticks)
                config.close_back_pct = float(close_back_pct if close_back_pct <= 1 else close_back_pct / 100.0)
                config.taker_fee_rate = float(fee_rate) / 100.0  # 0.055% -> 0.00055
                config.days_back = int(period_days)  # —á—Ç–æ–±—ã _is_in_backtest_window_utc —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å –æ–∫–Ω–æ–º

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ db/state
                strategy = KWINStrategy(config, api, state, db)
                # --- –ë–∏—Ä–∂–µ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è paper-—Ä–µ–∂–∏–º–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è strategy) ---
                if config.symbol.upper() == "ETHUSDT":
                    strategy.tick_size      = 0.01
                    strategy.qty_step       = 0.001
                    strategy.min_order_qty  = 0.001
                else:
                    # –¥–µ—Ñ–æ–ª—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    strategy.tick_size      = 0.01
                    strategy.qty_step       = 0.001
                    strategy.min_order_qty  = 0.001

                # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ config ‚Äì —á–∞—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–∏—Ç–∞–µ—Ç –æ—Ç—Ç—É–¥–∞
                config.tick_size = strategy.tick_size
                config.qty_step = strategy.qty_step
                config.min_order_qty = strategy.min_order_qty

                # ===== –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ =====
                if data_src.startswith("Bybit"):
                    candles = fetch_bybit_v5_window(symbol, period_days, interval="15", category="linear")
                    if not candles:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ Bybit –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
                        return
                    results = run_backtest_real(strategy, candles, start_capital)
                else:
                    results = run_backtest(strategy, period_days, start_capital)  # —Ç–≤–æ–π –¥–µ–º–æ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏–∫–µ

                # –í—ã–≤–æ–¥
                display_backtest_results(results)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
                st.exception(e)

# ========================================================================
def run_backtest(strategy: KWINStrategy, period_days: int, start_capital: float):
    """
    –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ 15m —Å–≤–µ—á–∏ -> –ø—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ KWINStrategy (paper).
    –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ UI —Ä–µ–∞–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Ö–æ–¥/SL/TP.
    """

    # ===== 1) –°–≥–µ–Ω–µ—Ä–∏–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ (UTC, 15m), timestamp –≤ –ú–ò–õ–õ–ò–°–ï–ö–£–ù–î–ê–• =====
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=period_days)

    bars = period_days * 24 * 4  # 15m
    dates = pd.date_range(start=start_date, periods=bars, freq="15T", tz="UTC")

    base_price = 4500 if strategy.config.symbol.upper() == "ETHUSDT" else 118000
    price_changes = np.random.randn(len(dates)) * 0.002  # ~0.2% –≤–æ–ª–∞
    prices = base_price * np.exp(np.cumsum(price_changes))

    candles: list[dict] = []
    for i, (dt, p) in enumerate(zip(dates, prices)):
        vol = abs(np.random.randn() * 0.001)
        high = p * (1 + vol)
        low  = p * (1 - vol)
        open_p  = prices[i-1] if i > 0 else p
        close_p = p
        candles.append({
            "timestamp": int(pd.Timestamp(dt).timestamp() * 1000),  # ms
            "open": float(open_p),
            "high": float(high),
            "low":  float(low),
            "close": float(close_p),
            "volume": float(np.random.uniform(1_000, 10_000)),
        })

    # ===== 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º paper-API –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
    state.set_equity(float(start_capital))
    class _Paper:
        def __init__(self): self._p = None
        def set_price(self, p): self._p = float(p)
        def get_ticker(self, symbol): return {"mark_price": self._p, "last_price": self._p}
        def place_order(self, **kw): return {"status": "Filled"}
        def modify_order(self, **kw): return {"status": "OK"}
        def get_wallet_balance(self): return {"list": []}

    paper = _Paper()
    strategy.api = paper

    bt_trades: list[dict] = []
    equity_points: list[dict] = []

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å PnL –∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
    def _close(exit_price: float, ts_ms: int):
        pos = state.get_current_position()
        if not pos or pos.get("status") != "open":
            return
        direction   = pos["direction"]
        entry_price = float(pos["entry_price"])
        qty         = float(pos["size"])
        fee_rate    = float(getattr(strategy.config, "taker_fee_rate", 0.00055))
        gross = (exit_price - entry_price) * qty if direction == "long" else (entry_price - exit_price) * qty
        fees  = (entry_price + exit_price) * qty * fee_rate
        pnl   = gross - fees
        state.set_equity(float(state.get_equity() or 0) + pnl)

        bt_trades.append({
            "symbol": strategy.config.symbol,
            "direction": direction,
            "entry_price": entry_price,
            "exit_price": float(exit_price),
            "stop_loss": float(pos.get("stop_loss") or 0),
            "take_profit": float(pos.get("take_profit") or 0),
            "quantity": qty,
            "pnl": float(pnl),
            "rr": None,
            "entry_time": datetime.utcfromtimestamp(int(pos.get("entry_time_ts", ts_ms))/1000),
            "exit_time":  datetime.utcfromtimestamp(int(ts_ms)/1000),
            "status": "closed",
        })
        pos["status"] = "closed"
        pos["exit_price"] = float(exit_price)
        pos["exit_time"]  = datetime.utcfromtimestamp(int(ts_ms)/1000)
        state.set_position(pos)

    # ===== 2.5) Pine-–ø–æ–¥–æ–±–Ω—ã–π Smart Trailing –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏–∫–∏ (–∫–∞–∫ –≤ real) =====
    def apply_smart_trail(pos: dict, bar_high: float, bar_low: float) -> None:
        cfg = strategy.config
        if not getattr(cfg, "enable_smart_trail", True):
            return
        if not pos or pos.get("status") != "open":
            return

        entry = float(pos["entry_price"])
        sl    = float(pos.get("stop_loss") or 0.0)
        if entry <= 0 or sl <= 0:
            return

        # anchor —ç–∫—Å—Ç—Ä–µ–º—É–º —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞
        if pos["direction"] == "long":
            anchor = float(pos.get("trail_anchor", entry))
            anchor = max(anchor, float(bar_high))
            pos["trail_anchor"] = anchor
        else:
            anchor = float(pos.get("trail_anchor", entry))
            anchor = min(anchor, float(bar_low))
            pos["trail_anchor"] = anchor
        state.set_position(pos)

        # ARM –ø–æ RR
        armed = bool(pos.get("armed", not getattr(cfg, "use_arm_after_rr", True)))
        if not armed and getattr(cfg, "use_arm_after_rr", True):
            risk = abs(entry - sl)
            if risk > 0:
                if pos["direction"] == "long":
                    rr = (float(bar_high) - entry) / risk
                else:
                    rr = (entry - float(bar_low)) / risk
                if rr >= float(getattr(cfg, "arm_rr", 0.5)):
                    armed = True
                    pos["armed"] = True
                    state.set_position(pos)
        if not armed:
            return

        # –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å—Ç–æ–ø –æ—Ç entry —Å –æ—Ç—Å—Ç—É–ø–æ–º
        trail_dist  = entry * (float(getattr(cfg, "trailing_perc", 0.5)) / 100.0)
        offset_dist = entry * (float(getattr(cfg, "trailing_offset_perc", 0.4)) / 100.0)

        if pos["direction"] == "long":
            candidate = anchor - trail_dist - offset_dist
            if candidate > sl:
                pos["stop_loss"] = candidate
                state.set_position(pos)
        else:
            candidate = anchor + trail_dist + offset_dist
            if candidate < sl:
                pos["stop_loss"] = candidate
                state.set_position(pos)

    # 3) –ü—Ä–æ–≥–æ–Ω –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º =====
    for bar in candles:
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
        ts_ms = int(bar["timestamp"])
        o = float(bar["open"])
        h = float(bar["high"])
        l = float(bar["low"])
        c = float(bar["close"])

        # 1) —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º "—Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É" –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        paper.set_price(c)  # <-- –ë–´–õ–û paper_api.set_price(c)

        # 2) –°–ù–ê–ß–ê–õ–ê –¥–∞—ë–º Pine-—Ç—Ä–µ–π–ª—É –ø–æ–¥–≤–∏–≥–∞—Ç—å SL –Ω–∞ —ç—Ç–æ–º –±–∞—Ä–µ
        pos = state.get_current_position()
        if pos and pos.get("status") == "open":
            apply_smart_trail(pos, bar_high=h, bar_low=l)

        # 3) —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º SL/TP –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ —Å —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å—Ç–æ–ø–æ–º
        pos = state.get_current_position()
        if pos and pos.get("status") == "open":
            sl = float(pos.get("stop_loss") or 0)
            tp = pos.get("take_profit")
            if pos["direction"] == "long":
                if sl > 0 and l <= sl:
                    _close(sl, ts_ms)  # <-- –ë–´–õ–û close_position
                elif tp is not None and h >= float(tp):
                    _close(float(tp), ts_ms)
            else:  # short
                if sl > 0 and h >= sl:
                    _close(sl, ts_ms)
                elif tp is not None and l <= float(tp):
                    _close(float(tp), ts_ms)

        # 4) –ø–æ–¥–∞—ë–º –∑–∞–∫—Ä—ã—Ç–∏–µ 15m –±–∞—Ä–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–≤–æ–∑–º–æ–∂–µ–Ω –≤—Ö–æ–¥)
        before_pos = state.get_current_position()
        strategy.on_bar_close_15m({"timestamp": ts_ms, "open": o, "high": h, "low": l, "close": c})
        after_pos = state.get_current_position()

        # –µ—Å–ª–∏ –Ω–∞ —ç—Ç–æ–º –±–∞—Ä–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ø–æ–∑–∏—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞, ARM –∏ trail_anchor –æ—Ç entry
        if after_pos and after_pos is not before_pos and after_pos.get("status") == "open":
            if "entry_time_ts" not in after_pos:
                after_pos["entry_time_ts"] = ts_ms
            after_pos["armed"] = not getattr(strategy.config, "use_arm_after_rr", True)
            after_pos["trail_anchor"] = float(after_pos["entry_price"])
            state.set_position(after_pos)

        # 5) —Å–Ω–∏–º–µ–º equity –Ω–∞ –∫–æ–Ω–µ—Ü –±–∞—Ä–∞
        equity_points.append({"timestamp": int(ts_ms), "equity": float(state.get_equity() or start_capital)})

    # –ó–∞–∫—Ä–æ–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç–æ
    pos = state.get_current_position()
    if pos and pos.get("status") == "open":
        last = candles[-1]
        _close(float(last["close"]), int(last["timestamp"]))

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    trades_df = pd.DataFrame(bt_trades)
    equity_df = pd.DataFrame(equity_points)
    return {
        "trades_df": trades_df,
        "equity_df": equity_df,
        "final_equity": float(state.get_equity() or start_capital),
        "initial_equity": float(start_capital),
    }

# ===================== —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é =====================
def run_backtest_real(strategy: KWINStrategy, candles: list[dict], start_capital: float):
    """
    –ü—Ä–æ–≥–æ–Ω —Ä–µ–∞–ª—å–Ω—ã—Ö 15m —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ KWINStrategy (paper) c –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º:
    1) –û–±–Ω–æ–≤–∏—Ç—å Smart Trailing –Ω–∞ —ç—Ç–æ–º –±–∞—Ä–µ
    2) –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SL/TP –ø–æ high/low —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ä–∞
    3) –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–¥–∞—Ç—å –±–∞—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤—Ö–æ–¥—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏)
    """
    import pandas as pd
    from datetime import datetime

    # --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞ (–º—Å, float-—ã) ---
    norm = []
    for b in candles or []:
        try:
            ts = b.get("timestamp")
            if isinstance(ts, str):
                ts = int(pd.to_datetime(ts, utc=True).value // 10**6)
            elif isinstance(ts, (pd.Timestamp, np.datetime64)):
                ts = int(pd.to_datetime(ts, utc=True).value // 10**6)
            else:
                ts = int(ts)
            norm.append({
                "timestamp": ts,
                "open":  float(b["open"]),
                "high":  float(b["high"]),
                "low":   float(b["low"]),
                "close": float(b["close"]),
                "volume": float(b.get("volume", 0.0)),
            })
        except Exception:
            continue
    candles = sorted(norm, key=lambda x: x["timestamp"])
    if not candles:
        return {
            "trades_df": pd.DataFrame([]),
            "equity_df": pd.DataFrame([]),
            "final_equity": float(start_capital),
            "initial_equity": float(start_capital),
        }

    # --- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
    state = strategy.state
    db = strategy.db
    state.set_equity(float(start_capital))

    class _Paper:
        def __init__(self): self._p = None
        def set_price(self, p): self._p = float(p)
        def get_ticker(self, symbol): return {"mark_price": self._p, "last_price": self._p}
        def place_order(self, **kw): return {"status": "Filled"}
        def modify_order(self, **kw): return {"status": "OK"}
        def get_wallet_balance(self): return {"list": []}

    paper_api = _Paper()
    strategy.api = paper_api

    bt_trades = []
    equity_points = []

    # --- —É—Ç–∏–ª–∏—Ç—ã ---
    def close_position(exit_price: float, ts_ms: int, reason: str):
        pos = state.get_current_position()
        if not pos or pos.get("status") != "open":
            return
        direction   = pos["direction"]
        entry_price = float(pos["entry_price"])
        qty         = float(pos["size"])
        fee_rate    = float(getattr(strategy.config, "taker_fee_rate", 0.00055))
        gross = (exit_price - entry_price) * qty if direction == "long" else (entry_price - exit_price) * qty
        fees  = (entry_price + exit_price) * qty * fee_rate
        pnl   = gross - fees
        new_eq = float(state.get_equity() or start_capital) + pnl
        state.set_equity(new_eq)

        bt_trades.append({
            "symbol": strategy.config.symbol,
            "direction": direction,
            "entry_price": entry_price,
            "exit_price": float(exit_price),
            "stop_loss": float(pos.get("stop_loss") or 0),
            "take_profit": float(pos.get("take_profit") or 0),
            "quantity": qty,
            "pnl": float(pnl),
            "rr": None,
            "entry_time": datetime.utcfromtimestamp(int(pos.get("entry_time_ts", ts_ms))/1000),
            "exit_time":  datetime.utcfromtimestamp(int(ts_ms)/1000),
            "exit_reason": reason,
            "status": "closed",
        })
        pos["status"] = "closed"
        pos["exit_price"] = float(exit_price)
        pos["exit_time"]  = datetime.utcfromtimestamp(int(ts_ms)/1000)
        state.set_position(pos)

    # ----------- Pine-–ø–æ–¥–æ–±–Ω—ã–π Smart Trailing —Å —è–∫–æ—Ä–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ -----------
    def apply_smart_trail(pos: dict, bar_high: float, bar_low: float) -> None:
        """
        Pine-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–ª–∞:
        - —è–∫–æ—Ä—å = —ç–∫—Å—Ç—Ä–µ–º—É–º —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞ (high –¥–ª—è long, low –¥–ª—è short)
        - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ RR —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –±–∞—Ä–Ω–æ–º—É high/low
        - —Å—Ç–æ–ø –¥–≤–∏–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–∏—Å–∫–∞
        """
        cfg = strategy.config
        if not getattr(cfg, "enable_smart_trail", True):
            return
        if not pos or pos.get("status") != "open":
            return

        entry = float(pos["entry_price"])
        sl    = float(pos.get("stop_loss") or 0.0)
        if entry <= 0 or sl <= 0:
            return

        # 1) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —è–∫–æ—Ä—å
        if pos["direction"] == "long":
            anchor = float(pos.get("trail_anchor", entry))
            anchor = max(anchor, float(bar_high))
            pos["trail_anchor"] = anchor
        else:
            anchor = float(pos.get("trail_anchor", entry))
            anchor = min(anchor, float(bar_low))
            pos["trail_anchor"] = anchor
        state.set_position(pos)

        # 2) ARM –ø–æ RR (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        armed = bool(pos.get("armed", not getattr(cfg, "use_arm_after_rr", True)))
        if not armed and getattr(cfg, "use_arm_after_rr", True):
            risk = abs(entry - sl)
            if risk > 0:
                if pos["direction"] == "long":
                    rr = (float(bar_high) - entry) / risk
                else:
                    rr = (entry - float(bar_low)) / risk
                if rr >= float(getattr(cfg, "arm_rr", 0.5)):
                    armed = True
                    pos["armed"] = True
                    state.set_position(pos)
        if not armed:
            return

        # 3) —Ä–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Å—Ç–æ–ø–∞ –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        trail_dist  = entry * (float(getattr(cfg, "trailing_perc", 0.5)) / 100.0)
        offset_dist = entry * (float(getattr(cfg, "trailing_offset_perc", 0.4)) / 100.0)

        if pos["direction"] == "long":
            candidate = anchor - trail_dist - offset_dist
            if candidate > sl:
                pos["stop_loss"] = candidate
                state.set_position(pos)
        else:
            candidate = anchor + trail_dist + offset_dist
            if candidate < sl:
                pos["stop_loss"] = candidate
                state.set_position(pos)
    # ---------------------------------------------------------------------

    # --- —Ü–∏–∫–ª –ø–æ –±–∞—Ä–∞–º ---
    for bar in candles:
        ts_ms = int(bar["timestamp"])
        o = float(bar["open"]); h = float(bar["high"]); l = float(bar["low"]); c = float(bar["close"])
        paper_api.set_price(c)

        # ===== (A) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º Smart Trailing –Ω–∞ —ç—Ç–æ–º –±–∞—Ä–µ =====
        pos = state.get_current_position()
        if pos and pos.get("status") == "open":
            apply_smart_trail(pos, bar_high=h, bar_low=l)

        # ===== (B) –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º SL/TP –ø–æ high/low —ç—Ç–æ–≥–æ –±–∞—Ä–∞ =====
        pos = state.get_current_position()
        if pos and pos.get("status") == "open":
            sl = float(pos.get("stop_loss") or 0)
            tp = pos.get("take_profit")
            if pos["direction"] == "long":
                if sl > 0 and l <= sl:
                    close_position(sl, ts_ms, reason="SL")
                elif tp is not None and h >= float(tp):
                    close_position(float(tp), ts_ms, reason="TP")
            else:
                if sl > 0 and h >= sl:
                    close_position(sl, ts_ms, reason="SL")
                elif tp is not None and l <= float(tp):
                    close_position(float(tp), ts_ms, reason="TP")

        # ===== (C) –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º –∑–∞–∫—Ä—ã—Ç—É—é 15m —Å–≤–µ—á—É –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–≤–æ–∑–º–æ–∂–µ–Ω –≤—Ö–æ–¥) =====
        before_pos = state.get_current_position()
        strategy.on_bar_close_15m({"timestamp": ts_ms, "open": o, "high": h, "low": l, "close": c})
        after_pos = state.get_current_position()

        # –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞, ARM –∏ trail_anchor –æ—Ç entry
        if after_pos and after_pos is not before_pos and after_pos.get("status") == "open":
            if "entry_time_ts" not in after_pos:
                after_pos["entry_time_ts"] = ts_ms
            after_pos["armed"] = not getattr(strategy.config, "use_arm_after_rr", True)
            after_pos["trail_anchor"] = float(after_pos["entry_price"])
            state.set_position(after_pos)

        # equity-—Å–Ω–∏–º–æ–∫
        equity_points.append({"timestamp": ts_ms, "equity": float(state.get_equity() or start_capital)})

    # —Ö–≤–æ—Å—Ç: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–º ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É close
    pos = state.get_current_position()
    if pos and pos.get("status") == "open":
        last = candles[-1]
        close_position(float(last["close"]), int(last["timestamp"]), reason="EOD")

    trades_df = pd.DataFrame(bt_trades)
    equity_df = pd.DataFrame(equity_points)
    return {
        "trades_df": trades_df,
        "equity_df": equity_df,
        "final_equity": float(state.get_equity() or start_capital),
        "initial_equity": float(start_capital),
    }

# ========================================================================
def display_backtest_results(results):
    trades_df = results["trades_df"]
    equity_df = results["equity_df"]
    final_equity = results["final_equity"]
    initial_equity = results["initial_equity"]

    # –ú–µ—Ç—Ä–∏–∫–∏
    if trades_df.empty:
        total_trades = winning_trades = losing_trades = 0
        win_rate = 0.0
        profit_factor = 0.0
        max_dd = 0.0
    else:
        total_trades = len(trades_df)
        winning_trades = int((trades_df["pnl"] > 0).sum())
        losing_trades  = int((trades_df["pnl"] < 0).sum())
        win_rate = (winning_trades / total_trades * 100.0) if total_trades else 0.0

        gross_profit = trades_df.loc[trades_df["pnl"] > 0, "pnl"].sum()
        gross_loss   = -trades_df.loc[trades_df["pnl"] < 0, "pnl"].sum()
        profit_factor = (gross_profit / gross_loss) if gross_loss > 0 else (float("inf") if gross_profit > 0 else 0.0)

        if not equity_df.empty and len(equity_df) > 1:
            eq = equity_df.copy()

            # —É—Å—Ç–æ–π—á–∏–≤–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
            if "timestamp" in eq.columns:
                if is_numeric_dtype(eq["timestamp"]):
                    ts = pd.to_datetime(eq["timestamp"], unit="ms", utc=True)
                elif is_datetime64_any_dtype(eq["timestamp"]):
                    ts = pd.to_datetime(eq["timestamp"], utc=True, errors="coerce")
                else:
                    ts = pd.to_datetime(eq["timestamp"], utc=True, errors="coerce")
                eq["timestamp"] = ts.dt.tz_localize(None)

            eq["cummax"]  = eq["equity"].cummax()
            eq["drawdown"] = (eq["equity"] - eq["cummax"]) / eq["cummax"] * 100.0
            max_dd = float(eq["drawdown"].min())
        else:
            max_dd = 0.0

    total_return = ((final_equity - initial_equity) / initial_equity) * 100.0

    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
    c1, c2, c3, c4, c5 = st.columns(5)
    c1.metric("–û–±—â–∏–µ —Å–¥–µ–ª–∫–∏", total_trades)
    c2.metric("–í–∏–Ω—Ä–µ–π—Ç", f"{win_rate:.1f}%")
    c3.metric("Profit Factor", "‚àû" if profit_factor == float("inf") else f"{profit_factor:.2f}")
    c4.metric("Max DD", f"{max_dd:.2f}%")
    c5.metric("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{total_return:.2f}%")

    c1, c2 = st.columns(2)
    c1.metric("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${initial_equity:,.2f}")
    profit_loss = final_equity - initial_equity
    c2.metric("–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${final_equity:,.2f}", delta=f"${profit_loss:,.2f}")

    # –ì—Ä–∞—Ñ–∏–∫ Equity
    if not equity_df.empty and len(equity_df) > 1:
        st.subheader("üìä –ö—Ä–∏–≤–∞—è Equity")
        eq = equity_df.copy()
        if "timestamp" in eq.columns:
            if is_numeric_dtype(eq["timestamp"]):
                ts = pd.to_datetime(eq["timestamp"], unit="ms", utc=True)
            else:
                ts = pd.to_datetime(eq["timestamp"], utc=True, errors="coerce")
            eq["timestamp"] = ts.dt.tz_localize(None)

        fig = make_subplots(rows=2, cols=1, row_heights=[0.7, 0.3],
                            subplot_titles=("Equity", "Drawdown"),
                            shared_xaxes=True, vertical_spacing=0.05)
        fig.add_trace(go.Scatter(x=eq["timestamp"], y=eq["equity"], mode="lines",
                                 name="Equity", line=dict(color="green", width=2)), row=1, col=1)

        eq["cummax"]  = eq["equity"].cummax()
        eq["drawdown"] = (eq["equity"] - eq["cummax"]) / eq["cummax"] * 100.0
        fig.add_trace(go.Scatter(x=eq["timestamp"], y=eq["drawdown"], mode="lines",
                                 name="Drawdown", line=dict(color="red", width=1),
                                 fill="tozeroy", fillcolor="rgba(255,0,0,0.2)"), row=2, col=1)

        fig.update_layout(height=600, showlegend=True, title_text="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=2, col=1)
        fig.update_yaxes(title_text="Equity ($)", row=1, col=1)
        fig.update_yaxes(title_text="Drawdown (%)", row=2, col=1)
        st.plotly_chart(fig, use_container_width=True)

    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    if not trades_df.empty:
        st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        disp = trades_df.copy()
        for col in ("entry_time", "exit_time"):
            if col in disp.columns:
                disp[col] = pd.to_datetime(disp[col], errors="coerce").dt.tz_localize(None)
        for col in ("pnl", "rr", "entry_price", "exit_price"):
            if col in disp.columns:
                disp[col] = pd.to_numeric(disp[col], errors="coerce").round(2)
        if "quantity" in disp.columns:
            disp["quantity"] = pd.to_numeric(disp["quantity"], errors="coerce").round(4)
        st.dataframe(disp.tail(20), use_container_width=True)

    st.markdown("---")
    st.info(
        "–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫: **Bybit v5 (—Ä–µ–∞–ª—å–Ω—ã–µ 15m)** ‚Äî –ø—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é; "
        "**–°–∏–Ω—Ç–µ—Ç–∏–∫–∞ (–¥–µ–º–æ)** ‚Äî —Å—Ç–∞—Ä—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä."
    )

# ========================================================================
if __name__ == "__main__":
    main()
