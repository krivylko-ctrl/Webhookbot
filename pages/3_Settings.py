import streamlit as st
import sys
import os

# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—à—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏–º –∫–æ—Ä–µ–Ω—å –≤ PYTHONPATH
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if ROOT_DIR not in sys.path:
    sys.path.append(ROOT_DIR)

from config import Config

st.set_page_config(
    page_title="KWIN Bot - –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

def main():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ KWIN Trading Bot")
    st.markdown("---")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–≤–Ω—É—Ç—Ä–∏ –æ–Ω–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç config.json, –µ—Å–ª–∏ –µ—Å—Ç—å)
    config = Config()

    # ========================= –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç / –∏—Å—Ç–æ—á–Ω–∏–∫–∏ =========================
    st.subheader("üß© –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ü–µ–Ω")
    i1, i2, i3 = st.columns(3)
    with i1:
        symbol = st.text_input("–°–∏–º–≤–æ–ª", value=str(getattr(config, "symbol", "ETHUSDT")).upper())
    with i2:
        price_for_logic = st.selectbox(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω—ã –¥–ª—è –ª–æ–≥–∏–∫–∏",
            options=["last", "mark"],
            index=0 if str(getattr(config, "price_for_logic", "last")).lower() == "last" else 1,
            help="–ö–∞–∫—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
        )
    with i3:
        trigger_price_source = st.selectbox(
            "–¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è SL/TP –Ω–∞ –±–∏—Ä–∂–µ",
            options=["mark", "last"],
            index=0 if str(getattr(config, "trigger_price_source", "mark")).lower() == "mark" else 1,
            help="–ü–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ (Mark/Last) –±–∏—Ä–∂–∞ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ SL/TP."
        )

    st.markdown("---")

    # ========================= –û—Å–Ω–æ–≤–Ω—ã–µ =========================
    st.subheader("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")

    col1, col2, col3 = st.columns(3)
    with col1:
        risk_pct = st.number_input(
            "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)",
            min_value=0.1,
            max_value=10.0,
            value=float(getattr(config, "risk_pct", 3.0)),
            step=0.1,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞, —Ä–∏—Å–∫—É–µ–º—ã–π –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É"
        )
        max_qty = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–≤ –±–∞–∑–æ–≤–æ–º –∞–∫—Ç–∏–≤–µ)",
            min_value=0.001,
            max_value=10000.0,
            value=float(getattr(config, "max_qty_manual", 50.0)),
            step=0.001,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)"
        )
        limit_qty_enabled = st.checkbox(
            "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é",
            value=bool(getattr(config, "limit_qty_enabled", True))
        )
    with col2:
        risk_reward = st.number_input(
            "Risk/Reward —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
            min_value=0.5,
            max_value=5.0,
            value=float(getattr(config, "risk_reward", 1.3)),
            step=0.1,
            help="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ —É–±—ã—Ç–∫—É (R:R)"
        )
        taker_fee_rate = st.number_input(
            "–ö–æ–º–∏—Å—Å–∏—è taker (–¥–µ—Å—è—Ç–∏—á–Ω–∞—è)",
            min_value=0.0,
            max_value=0.01,
            value=float(getattr(config, "taker_fee_rate", 0.00055)),
            step=0.00005
        )
        use_take_profit = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Take Profit",
            value=bool(getattr(config, "use_take_profit", True))
        )
    with col3:
        # SFP Length –∏ Intrabar TF —É–±—Ä–∞–Ω—ã ‚Äî —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ Lux (Swings/LTF)
        st.write("")
        st.caption("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã SFP (Swings, LTF) –∑–∞–¥–∞—é—Ç—Å—è –≤ –±–ª–æ–∫–µ **Lux SFP** –Ω–∏–∂–µ.")

    st.markdown("---")

    # =========================== Lux SFP ===========================
    st.subheader("‚ú® Lux SFP (–∫–∞–∫ –≤ LuxAlgo)")

    l0, = st.columns(1)
    with l0:
        lux_enabled = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å Lux SFP",
            value=bool(getattr(config, "lux_mode", True)),
            help="–ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –≤—Ö–æ–¥–∞. –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
        )

    l1, l2, l3, l4 = st.columns(4)
    with l1:
        lux_volume_validation = st.selectbox(
            "Validation",
            options=["outside_gt", "outside_lt", "none"],
            index={"outside_gt": 0, "outside_lt": 1, "none": 2}.get(
                str(getattr(config, "lux_volume_validation", "outside_gt")).lower(), 0
            ),
            help="–ü—Ä–∞–≤–∏–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä—ë–º–∞ –Ω–∞ –º–ª–∞–¥—à–µ–º –¢–§ (–¥–æ–ª—è –æ–±—ä—ë–º–∞ ‚Äò–≤–Ω–µ —Å–≤–∏–Ω–≥–∞‚Äô –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–æ–≥–∞)."
        )
        lux_swings = st.number_input(
            "Swings",
            min_value=1, max_value=20,
            value=int(getattr(config, "lux_swings", 2)),
            step=1,
            help="–ê–Ω–∞–ª–æ–≥ len –≤ Lux: —Å–¥–≤–∏–≥ —Å–≤–∏–Ω–≥–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è."
        )
    with l2:
        lux_volume_threshold_pct = st.number_input(
            "Volume Threshold %",
            min_value=0.0, max_value=100.0,
            value=float(getattr(config, "lux_volume_threshold_pct", 10.0)),
            step=0.5,
            help="% –æ—Ç —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ LTF-–±–∞—Ä–∞, –ø—Ä–∏—Ö–æ–¥—è—â–∞—è—Å—è –Ω–∞ ‚Äò–≤–Ω–µ —Å–≤–∏–Ω–≥–∞‚Äô."
        )
        lux_auto = st.checkbox(
            "Auto (—Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ LTF)",
            value=bool(getattr(config, "lux_auto", False)),
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç LTF –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¢–§ (–∫–∞–∫ —É Lux)."
        )
    with l3:
        lux_mlt = st.number_input(
            "Auto mlt",
            min_value=1, max_value=120,
            value=int(getattr(config, "lux_mlt", 10)),
            step=1,
            help="–î–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–∞ LTF (—Å–µ–∫—É–Ω–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –¢–§ / mlt)."
        )
        lux_ltf = st.selectbox(
            "LTF (—Ä—É—á–Ω–æ–π)",
            options=["1", "3", "5"],
            index=["1", "3", "5"].index(str(getattr(config, "lux_ltf", "1"))),
            help="–ï—Å–ª–∏ Auto –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –º–ª–∞–¥—à–∏–π –¢–§."
        )
    with l4:
        lux_premium = st.checkbox(
            "Premium",
            value=bool(getattr(config, "lux_premium", False)),
            help="–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª LTF (–∫–∞–∫ –≤ Lux)."
        )
        lux_expire_bars = st.number_input(
            "Expire bars",
            min_value=10, max_value=2000,
            value=int(getattr(config, "lux_expire_bars", 500)),
            step=10,
            help="–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –±–∞—Ä–æ–≤ —É—Ä–æ–≤–µ–Ω—å SFP –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º."
        )

    st.markdown("---")

    # =============================== Smart Trailing ===============================
    st.subheader("üéØ Smart Trailing")

    t1, t2 = st.columns(2)
    with t1:
        enable_smart_trail = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å Smart Trailing",
            value=bool(getattr(config, 'enable_smart_trail', True)),
            help="–£–º–Ω—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥ SL (–∞–Ω–∞–ª–æ–≥ Pine-–ª–æ–≥–∏–∫–∏)."
        )
        use_arm_after_rr = st.checkbox(
            "–ê—Ä–º–∏–Ω–≥ —Ç—Ä–µ–π–ª–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è RR",
            value=bool(getattr(config, 'use_arm_after_rr', True)),
            help="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ RR."
        )
        arm_rr = st.number_input(
            "RR –¥–ª—è –∞—Ä–º–∏–Ω–≥–∞",
            min_value=0.1,
            max_value=5.0,
            value=float(getattr(config, 'arm_rr', 0.5)),
            step=0.1
        )
        arm_rr_basis = st.selectbox(
            "–ë–∞–∑–∞ —Ä–∞—Å—á—ë—Ç–∞ RR –¥–ª—è –∞—Ä–º–∏–Ω–≥–∞",
            options=["extremum", "last"],
            index=0 if str(getattr(config, "arm_rr_basis", "extremum")).lower() == "extremum" else 1
        )
    with t2:
        trailing_perc = st.number_input(
            "–ü—Ä–æ—Ü–µ–Ω—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (%)",
            min_value=0.0,
            max_value=5.0,
            value=float(getattr(config, 'trailing_perc', 0.5)),
            step=0.1
        )
        trailing_offset_perc = st.number_input(
            "Offset —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (%)",
            min_value=0.0,
            max_value=5.0,
            value=float(getattr(config, 'trailing_offset_perc', 0.4)),
            step=0.1
        )

    st.markdown("---")

    # =============================== –ë–∞—Ä–æ–≤—ã–π —Ç—Ä–µ–π–ª / –ø—Ä–æ—á–µ–µ ===============================
    st.subheader("üß± –ë–∞—Ä–æ–≤—ã–π —Ç—Ä–µ–π–ª / –ø—Ä–æ—á–µ–µ")
    b1, b2, b3 = st.columns(3)
    with b1:
        use_bar_trail = st.checkbox(
            "–ë–∞—Ä–æ–≤—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥ (lowest/highest N –∑–∞–∫—Ä—ã—Ç—ã—Ö –±–∞—Ä–æ–≤)",
            value=bool(getattr(config, 'use_bar_trail', True)),
        )
    with b2:
        trail_lookback = st.number_input(
            "Trail lookback bars",
            min_value=1,
            max_value=300,
            value=int(getattr(config, "trail_lookback", 50)),
            step=1
        )
    with b3:
        trail_buf_ticks = st.number_input(
            "Trail buffer (ticks)",
            min_value=0,
            max_value=500,
            value=int(getattr(config, "trail_buf_ticks", 40)),
            step=1
        )

    st.markdown("---")

    # ============================== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ==============================
    c1, c2, c3 = st.columns([1, 2, 1])
    with c2:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary", use_container_width=True):
            try:
                # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
                config.symbol = str(symbol).upper()
                config.price_for_logic = str(price_for_logic).lower()
                config.trigger_price_source = str(trigger_price_source).lower()

                # –†–∏—Å–∫/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                config.risk_pct = float(risk_pct)
                config.risk_reward = float(risk_reward)
                config.limit_qty_enabled = bool(limit_qty_enabled)
                config.max_qty_manual = float(max_qty)
                config.taker_fee_rate = float(taker_fee_rate)
                config.use_take_profit = bool(use_take_profit)

                # Lux SFP
                config.lux_mode = bool(lux_enabled)
                config.lux_swings = int(lux_swings)
                config.lux_volume_validation = str(lux_volume_validation)
                config.lux_volume_threshold_pct = float(lux_volume_threshold_pct)
                config.lux_auto = bool(lux_auto)
                config.lux_mlt = int(lux_mlt)
                config.lux_ltf = str(lux_ltf)
                config.lux_premium = bool(lux_premium)
                config.lux_expire_bars = int(lux_expire_bars)

                # Smart trailing
                config.enable_smart_trail = bool(enable_smart_trail)
                config.use_arm_after_rr = bool(use_arm_after_rr)
                config.arm_rr = float(arm_rr)
                config.arm_rr_basis = str(arm_rr_basis)
                config.trailing_perc = float(trailing_perc)
                config.trailing_offset_perc = float(trailing_offset_perc)
                config.trailing_offset = float(trailing_offset_perc)  # alias

                # –ë–∞—Ä–æ–≤—ã–π —Ç—Ä–µ–π–ª/–ø—Ä–æ—á–µ–µ
                config.use_bar_trail = bool(use_bar_trail)
                config.trail_lookback = int(trail_lookback)
                config.trail_buf_ticks = int(trail_buf_ticks)

                # –£–¥–∞–ª—ë–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º:
                # - —Å—Ç–∞—Ä–∞—è SFP-–≤–∞–ª–∏–¥–∞—Ü–∏—è
                # - Stop-Loss Zone
                # - Cooldown
                # - SFP Length / Intrabar TF

                ok = config.validate()
                if not ok:
                    st.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏—è.")
                else:
                    config.save_config()
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    # ============================== –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö ==============================
    st.markdown("---")
    st.subheader("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (config.json)"):
        try:
            st.json(config.to_dict())
        except Exception:
            st.write(config.to_dict())

if __name__ == "__main__":
    main()
