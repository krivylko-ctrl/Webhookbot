# bybit_v5_fixed.py - –¢–æ—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit V5 API –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
import os
import json
import time
import hmac
import hashlib
import requests
import logging
from typing import Optional, Dict, Any
from math import floor
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ú–ï–¢–ê-–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò –ö–ï–®–ò–†–û–í–ê–ù–ò–ï =====
@dataclass
class InstInfo:
    tick: float
    lot: float
    min_qty: float

class InstCache:
    def __init__(self, client):
        self.client = client
        self.cache = {}      # symbol -> (InstInfo, ts)
        self.ttl = 300       # 5 –º–∏–Ω—É—Ç

    def _fetch(self, symbol: str) -> InstInfo:
        # v5 instruments info
        params = {"category": "linear", "symbol": symbol}
        r = self.client.make_request("GET", "/v5/market/instruments-info", params)
        if r.get("retCode") != 0 or not r.get("result", {}).get("list"):
            # fallback values
            return InstInfo(tick=0.01, lot=0.001, min_qty=0.001)
        
        data = r["result"]["list"][0]
        tick = float(data["priceFilter"]["tickSize"])
        lot = float(data["lotSizeFilter"]["qtyStep"])
        minq = float(data["lotSizeFilter"]["minOrderQty"])
        return InstInfo(tick=tick, lot=lot, min_qty=minq)

    def get(self, symbol: str) -> InstInfo:
        rec = self.cache.get(symbol)
        if not rec or time.time() - rec[1] > self.ttl:
            info = self._fetch(symbol)
            self.cache[symbol] = (info, time.time())
            return info
        return rec[0]

# ===== –ê–ù–¢–ò-–î–£–ë–õ–ò–ö–ê–¢–´ –î–õ–Ø TRAIL/EXIT =====
LAST_ACTIONS = {
    "trail_key": None,     # e.g. "ETHUSDT:long:4554.40"
    "trail_ts": 0,
    "exit_key": None,      # e.g. "ETHUSDT:short:sl"
    "exit_ts": 0,
}
DEBOUNCE_SEC = 10  # –æ–∫–Ω–æ –≥–∞—à–µ–Ω–∏—è –¥—É–±–ª–µ–π

def norm_symbol(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞: ETHUSDT.P -> ETHUSDT"""
    return s.replace(".P", "").replace(":PERP", "").upper()

def is_dup_trail(symbol, direction, new_stop):
    key = f"{symbol}:{direction}:{new_stop:.2f}"
    now = time.time()
    if LAST_ACTIONS["trail_key"] == key and (now - LAST_ACTIONS["trail_ts"]) < DEBOUNCE_SEC:
        return True
    LAST_ACTIONS["trail_key"] = key
    LAST_ACTIONS["trail_ts"] = now
    return False

def is_dup_exit(symbol, direction, reason):
    key = f"{symbol}:{direction}:{reason}"
    now = time.time()
    if LAST_ACTIONS["exit_key"] == key and (now - LAST_ACTIONS["exit_ts"]) < DEBOUNCE_SEC:
        return True
    LAST_ACTIONS["exit_key"] = key
    LAST_ACTIONS["exit_ts"] = now
    return False

class BybitV5API:
    """
    –ü—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bybit V5 API —Å —Ç–æ—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ V5: timestamp + api_key + recv_window + body
    """
    def __init__(self, api_key: str, api_secret: str):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π testnet
        use_testnet = os.getenv("BYBIT_TESTNET", "false").lower() == "true"
        self.BASE_URL = os.getenv("BYBIT_BASE") or ("https://api-testnet.bybit.com" if use_testnet else "https://api.bybit.com")
        self.BASE_URL = self.BASE_URL.rstrip("/")
    
        self.api_key = api_key
        self.api_secret = api_secret
        self.category = (os.getenv("BYBIT_CATEGORY") or "linear").lower()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ linear –¥–ª—è USDT-–ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤
        self.server_time_offset = 0
        self.last_sync_time = 0
        self._filters_cache = {}  # –∫—ç—à –±–∏—Ä–∂–µ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–µ—à–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.inst_cache = InstCache(self)
        
        logger.info("üöÄ Bybit V5 API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        logger.info(f"  API Key: {'‚úÖ –ù–ê–ô–î–ï–ù' if api_key else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        logger.info(f"  API Secret: {'‚úÖ –ù–ê–ô–î–ï–ù' if api_secret else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        logger.info(f"  Base URL: {self.BASE_URL}")
        logger.info(f"  Mode: {'TESTNET' if 'testnet' in self.BASE_URL else 'MAINNET'}")
        
        # –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.sync_server_time()
        
    def sync_server_time(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Bybit –ø–æ /v5/market/time"""
        try:
            response = requests.get(f"{self.BASE_URL}/v5/market/time", timeout=5)
            if response.status_code == 200:
                server_time_seconds = int(response.json()["result"]["timeSecond"])
                server_time_ms = server_time_seconds * 1000
                local_time_ms = int(time.time() * 1000)
                
                self.server_time_offset = server_time_ms - local_time_ms
                self.last_sync_time = local_time_ms
                
                logger.info(f"‚è∞ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Bybit —Å–µ—Ä–≤–µ—Ä–æ–º")
                logger.info(f"   –°–º–µ—â–µ–Ω–∏–µ: {self.server_time_offset}ms")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: HTTP {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    def get_server_timestamp(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π timestamp —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
        current_time = int(time.time() * 1000)
        
        # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–ª—å—Ç—ã ‚â§1—Å
        if current_time - self.last_sync_time > 60000:
            self.sync_server_time()
        
        return current_time + self.server_time_offset
    
    def generate_signature(self, timestamp: str, recv_window: str, body: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Bybit V5
        –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏: timestamp + api_key + recv_window + body
        """
        pre_sign_string = timestamp + self.api_key + recv_window + body
        
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            pre_sign_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        logger.debug(f"üîê –ü–æ–¥–ø–∏—Å—å V5 –¥–ª—è: {pre_sign_string[:50]}...")
        return signature
    
    def _compact(self, d):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON –¥–ª—è V5 API"""
        return json.dumps(d, separators=(",", ":")) if d is not None else ""

    def _query(self, params: Optional[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è query string –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ V5"""
        if not params:
            return ""
        # –í–ê–ñ–ù–û: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ –Ω–µ –∫–æ–¥–∏—Ä—É–µ–º –ª–∏—à–Ω–µ–≥–æ ‚Äî Bybit –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç raw query
        parts = [f"{k}={params[k]}" for k in sorted(params)]
        return "&".join(parts)

    def make_request(self, method: str, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit V5 API
        GET: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º queryString
        POST: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º body
        """
        url = f"{self.BASE_URL}{endpoint}"
        ts = str(self.get_server_timestamp())
        recv = "5000"

        method = method.upper()
        headers = {
            "X-BAPI-API-KEY": self.api_key,
            "X-BAPI-TIMESTAMP": ts,
            "X-BAPI-RECV-WINDOW": recv,
            "Content-Type": "application/json",
        }

        try:
            if method == "GET":
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ò–ú–ï–ù–ù–û queryString –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
                query = self._query(params)
                pre_sign = ts + self.api_key + recv + query
                sign = hmac.new(self.api_secret.encode(), pre_sign.encode(), hashlib.sha256).hexdigest()
                headers["X-BAPI-SIGN"] = sign

                full_url = url + (f"?{query}" if query else "")
                r = requests.get(full_url, headers=headers, timeout=10)

            else:  # POST/PUT
                body = self._compact(params or {})
                pre_sign = ts + self.api_key + recv + body
                sign = hmac.new(self.api_secret.encode(), pre_sign.encode(), hashlib.sha256).hexdigest()
                headers["X-BAPI-SIGN"] = sign

                r = requests.post(url, headers=headers, data=body, timeout=10)

            logger.info(f"üì° V5 {method} {endpoint} ‚Üí HTTP {r.status_code}")
            j = r.json() if r.headers.get("Content-Type","").startswith("application/json") else {"http": r.text}
            
            # –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Bybit –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if "retCode" in j:
                logger.info(f"üìä Bybit Response: retCode={j.get('retCode')}, retMsg={j.get('retMsg')}, retExtInfo={j.get('retExtInfo')}")
            
            return j if r.status_code == 200 else {"retCode": -1, "retMsg": f"HTTP {r.status_code}", "raw": j}

        except Exception as e:
            logger.error(f"‚ùå V5 request error: {e}")
            return {"retCode": -2, "retMsg": str(e)}
    
    def get_instrument(self, symbol: str, category: str = "linear"):
        q = {"category": category, "symbol": symbol}
        info = self.make_request("GET", "/v5/market/instruments-info", q)
        if info.get("retCode") == 0 and info.get("result", {}).get("list"):
            return info["result"]["list"][0]
        return None

    def round_qty(self, symbol: str, qty: float, category: str = "linear") -> str:
        inst = self.get_instrument(symbol, category) or {}
        lot = (inst.get("lotSizeFilter") or {})
        step = float(lot.get("qtyStep", "0.001"))
        min_qty = float(lot.get("minOrderQty", "0.001"))
        # –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –∫ —à–∞–≥—É –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
        stepped = max(min_qty, (int(qty / step)) * step)
        # —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π
        return f"{stepped:.10f}".rstrip("0").rstrip(".")
        
    def get_position_size(self, symbol: str, side_hint: str = None, category: str = "linear") -> float:
        # –±–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ –∏—â–µ–º –Ω–µ–Ω—É–ª–µ–≤—É—é
        res = self.make_request("GET", "/v5/position/list", {"category": category, "symbol": symbol})
        if res.get("retCode") != 0:
            return 0.0
        for p in res.get("result", {}).get("list", []):
            # side = "Buy" (long) –∏–ª–∏ "Sell" (short)
            size = float(p.get("size", "0"))
            if size > 0:
                if side_hint:
                    if (side_hint.lower() == "long" and p.get("side") == "Buy") or \
                       (side_hint.lower() == "short" and p.get("side") == "Sell"):
                        return size
                else:
                    return size
        return 0.0

    def _get_symbol_filters(self, symbol: str) -> dict:
        """–ö—ç—à–∏—Ä—É–µ–º –±–∏—Ä–∂–µ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (step, min, tick)."""
        cache_key = f"filters:{symbol}"
        if cache_key in self._filters_cache:
            return self._filters_cache[cache_key]

        params = {"category": "linear", "symbol": symbol}
        info = self.make_request("GET", "/v5/market/instruments-info", params)
        if info.get("retCode") == 0 and info.get("result", {}).get("list"):
            item = info["result"]["list"][0]
            lot = item.get("lotSizeFilter", {}) or {}
            price = item.get("priceFilter", {}) or {}
            filters = {
                "qtyStep": float(lot.get("qtyStep", "0.001")),
                "minOrderQty": float(lot.get("minOrderQty", "0.001")),
                "tickSize": float(price.get("tickSize", "0.01")),
            }
            self._filters_cache[cache_key] = filters
            return filters
        # –¥–µ—Ñ–æ–ª—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π
        return {"qtyStep": 0.001, "minOrderQty": 0.001, "tickSize": 0.01}

    def _round_step_down(self, value: float, step: float) -> float:
        return (int(value / step) * step)

    def round_price_enhanced(self, symbol: str, price: float) -> float:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        info = self.inst_cache.get(symbol)
        return floor(price / info.tick) * info.tick

    def round_qty_enhanced(self, symbol: str, qty: float) -> float:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        info = self.inst_cache.get(symbol)
        return floor(qty / info.lot) * info.lot

    def validate_qty_enhanced(self, symbol: str, qty: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞"""
        info = self.inst_cache.get(symbol)
        return qty >= info.min_qty

    def _get_qty_rules(self, symbol: str):
        """–ë–µ—Ä—ë–º —à–∞–≥ –ª–æ—Ç–∞ –∏ –º–∏–Ω–∏–º–∞–ª–∫—É –∏–∑ /v5/market/instruments-info."""
        params = {"category": "linear", "symbol": symbol}
        r = self.make_request("GET", "/v5/market/instruments-info", params)
        if r.get("retCode") != 0 or not r.get("result", {}).get("list"):
            return 0.001, 0.001  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        data = r["result"]["list"][0]
        lot = data["lotSizeFilter"]
        qty_step = float(lot["qtyStep"])
        min_qty = float(lot["minOrderQty"])
        return qty_step, min_qty

    def _get_open_position(self, symbol: str):
        """–ß–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ /v5/position/list. –í–æ–∑–≤—Ä–∞—â–∞–µ–º (size, side, positionIdx)."""
        params = {"category": "linear", "symbol": symbol}
        r = self.make_request("GET", "/v5/position/list", params)
        if r.get("retCode") != 0:
            return 0.0, None, 0
        items = r.get("result", {}).get("list", [])
        # one-way: positionIdx == 0. hedge: 1=Buy/Long, 2=Sell/Short
        pos = max(items, key=lambda x: abs(float(x.get("size", "0"))), default=None)
        if not pos:
            return 0.0, None, 0
        size = float(pos.get("size", "0"))
        side = pos.get("side")  # "Buy" –∏–ª–∏ "Sell"
        idx = int(pos.get("positionIdx", 0))
        return size, side, idx

    def _floor_to_step(self, qty: float, step: float) -> float:
        return floor(qty / step) * step

    def _cancel_all_tp_sl(self, symbol: str):
        """–ú—è–≥–∫–æ —É–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Å–∏–º–≤–æ–ª–µ (TP/SL/–ø—Ä–æ—á–∏–µ), —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—é."""
        try:
            payload = {"category": "linear", "symbol": symbol}
            self.make_request("POST", "/v5/order/cancel-all", payload)
        except Exception as e:
            logger.warning(f"cancel-all failed: {e}")

    def close_position_market_hard(self, symbol: str, prefer_cancel_all: bool = True):
        """
        –ó–∞–∫—Ä—ã—Ç—å –≤—Å—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É:
        - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç qty –∏–∑ –≤–µ–±—Ö—É–∫–∞
        - –±–µ—Ä—ë—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π posSize
        - –æ–∫—Ä—É–≥–ª—è–µ—Ç –ø–æ–¥ qtyStep
        - reduceOnly + IOC
        """
        # 1) –ß–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        pos_size, pos_side, pos_idx = self._get_open_position(symbol)
        if pos_size <= 0:
            logger.info(f"[exit] Position already flat on {symbol} ‚Äî nothing to close.")
            return {"status": "info", "message": "Position already closed"}

        # 2) –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        qty_step, min_qty = self._get_qty_rules(symbol)
        qty = self._floor_to_step(pos_size, qty_step)
        if qty <= 0:
            logger.info(f"[exit] Computed qty {qty} <= 0 after step rounding ‚Äî skip.")
            return {"status": "info", "message": "Qty too small after rounding"}
        
        if qty < min_qty:
            # –ï—Å–ª–∏ —à–∞–≥ –æ–∫—Ä—É–≥–ª–∏–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –Ω–æ –ø–æ–∑–∏—Ü–∏—è –ø–æ —Ñ–∞–∫—Ç—É ‚â• min_qty ‚Äî –ø–æ–¥—Ç—è–Ω–µ–º –¥–æ min_qty –≤ —Å–µ—Ç–∫–µ —à–∞–≥–∞
            if pos_size >= min_qty:
                k = max(1, floor(min_qty / qty_step))
                qty = k * qty_step
            else:
                logger.info(f"[exit] pos_size {pos_size} < min_qty {min_qty} ‚Äî –ø–æ—Ö–æ–∂–µ, —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
                return {"status": "info", "message": "Position size below minimum"}

        # 3) –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–±—Ä–∞—Ç—å —Ö–≤–æ—Å—Ç—ã (TP/SL), —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏
        if prefer_cancel_all:
            self._cancel_all_tp_sl(symbol)

        # 4) –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        side_to_close = "Sell" if pos_side == "Buy" else "Buy"

        # 5) –ú–∞—Ä–∫–µ—Ç-–∑–∞–∫—Ä—ã—Ç–∏–µ reduceOnly + IOC
        payload = {
            "category": "linear",
            "symbol": symbol,
            "side": side_to_close,
            "orderType": "Market",
            "qty": str(qty),
            "reduceOnly": True,
            "timeInForce": "IOC",
            "positionIdx": pos_idx,  # 0/1/2 ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–∞ –±–∏—Ä–∂–µ
        }
        
        logger.info(f"[exit] Closing {qty} {symbol} by Market (reduceOnly, IOC).")
        result = self.make_request("POST", "/v5/order/create", payload)
        
        if result.get("retCode") != 0:
            error_msg = result.get("retMsg", "Unknown error")
            logger.error(f"Bybit close-market failed: {error_msg}")
            return {"status": "error", "message": f"Close failed: {error_msg}"}
        
        order_id = result.get("result", {}).get("orderId", "Unknown")
        return {"status": "success", "message": f"Position closed with qty {qty}", "order_id": order_id}

    def place_entry_two_step(self, symbol: str, side: str, qty: str, 
                            take_profit: Optional[str] = None, stop_loss: Optional[str] = None,
                            leverage: Optional[int] = None) -> Dict[str, Any]:
        """
        –î–≤—É—Ö—à–∞–≥–æ–≤—ã–π –≤—Ö–æ–¥: 1) Market –æ—Ä–¥–µ—Ä, 2) TP/SL —á–µ—Ä–µ–∑ trading-stop
        –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É 'Price invalid' –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        symbol = norm_symbol(symbol)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if leverage:
            self.set_leverage(symbol, leverage)
        
        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø–æ –±–∏—Ä–∂–µ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        qty_float = float(qty)
        qty_rounded = self.round_qty_enhanced(symbol, qty_float)
        
        if not self.validate_qty_enhanced(symbol, qty_rounded):
            return {"status": "error", "message": f"Qty {qty_rounded} below minimum"}
        
        # –®–∞–≥ 1: –ß–∏—Å—Ç—ã–π Market –æ—Ä–¥–µ—Ä –±–µ–∑ TP/SL
        order_params = {
            "category": "linear",
            "symbol": symbol,
            "side": side,
            "orderType": "Market",
            "qty": f"{qty_rounded:.3f}",
            "reduceOnly": False,
            "timeInForce": "IOC"
        }
        
        logger.info(f"üìä V5 Two-Step Entry: {symbol} {side} {qty_rounded}")
        result = self.make_request("POST", "/v5/order/create", order_params)
        
        if result.get("retCode") != 0:
            error_msg = result.get("retMsg", "Market order failed")
            return {"status": "error", "message": f"Entry failed: {error_msg}"}
        
        order_id = result.get("result", {}).get("orderId", "Unknown")
        
        # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP/SL —á–µ—Ä–µ–∑ trading-stop (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
        if take_profit or stop_loss:
            time.sleep(0.1)  # –ú–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ market –æ—Ä–¥–µ—Ä–∞
            
            tp_params = {"category": "linear", "symbol": symbol}
            
            if take_profit:
                tp_rounded = self.round_price_enhanced(symbol, float(take_profit))
                tp_params["takeProfit"] = f"{tp_rounded:.2f}"
                tp_params["tpTriggerBy"] = "LastPrice"
            
            if stop_loss:
                sl_rounded = self.round_price_enhanced(symbol, float(stop_loss))
                tp_params["stopLoss"] = f"{sl_rounded:.2f}"
                tp_params["slTriggerBy"] = "LastPrice"
            
            tp_result = self.make_request("POST", "/v5/position/trading-stop", tp_params)
            
            if tp_result.get("retCode") != 0:
                logger.warning(f"TP/SL setup failed: {tp_result.get('retMsg')}")
            else:
                logger.info(f"üéØ TP/SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: TP={take_profit}, SL={stop_loss}")
        
        return {
            "status": "success", 
            "message": "Two-step entry completed", 
            "order_id": order_id
        }

    def trail_update_enhanced(self, symbol: str, direction: str, new_stop: str) -> Dict[str, Any]:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:
        - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª
        - –æ–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –ø–æ tickSize
        - –≥–∞—Å–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ (symbol, side, price)
        - —à–ª—ë–º /v5/position/trading-stop (stopLoss, LastPrice)
        """
        symbol = norm_symbol(symbol)
        new_stop_float = float(new_stop)
        new_stop_rounded = self.round_price_enhanced(symbol, new_stop_float)

        # –∞–Ω—Ç–∏–¥—É–±–ª—å
        if is_dup_trail(symbol, direction, new_stop_rounded):
            return {"status": "skipped", "message": "Duplicate trail update ignored"}

        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å
        pos_size, pos_side, pos_idx = self._get_open_position(symbol)
        if pos_size <= 0:
            return {"status": "info", "message": "No position to trail"}

        payload = {
            "category": "linear",
            "symbol": symbol,
            "stopLoss": f"{new_stop_rounded:.2f}",
            "slTriggerBy": "LastPrice"
        }
        res = self.make_request("POST", "/v5/position/trading-stop", payload)
        if res.get("retCode") == 0:
            return {"status": "success", "message": f"Trail SL -> {new_stop_rounded:.2f}"}
        else:
            return {"status": "error", "message": f"Trail update failed: {res.get('retMsg', 'Unknown error')}"}

    def exit_enhanced(self, symbol: str, direction: str, reason: str = "", qty: str = None) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π exit —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π –∏ –Ω–µ—É–±–∏–≤–∞–µ–º—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        """
        symbol = norm_symbol(symbol)
        if is_dup_exit(symbol, direction, reason):
            return {"status": "skipped", "message": "Duplicate exit ignored"}
        return self.close_position_market_hard(symbol, prefer_cancel_all=True)
    
    def test_connection(self) -> Dict[str, Any]:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ wallet-balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤/UTA"""
        try:
            # 1) –ü—É–±–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
            t = self.make_request("GET", "/v5/market/time")
            if t.get("retCode", 0) != 0:
                return {"status": "error", "message": f"market/time failed: {t}"}

            # 2) –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å/–ø—Ä–∞–≤–∞/UTA
            res = self.make_request("GET", "/v5/account/wallet-balance", {"accountType":"UNIFIED"})
            rc = res.get("retCode", -1)
            
            if rc == 0:
                return {"status":"connected","message":"V5 API OK","accountType":"UNIFIED"}
            elif rc in (10001,10002):
                return {"status":"error","message":"Invalid signature/timestamp (–ø—Ä–æ–≤–µ—Ä—å recvWindow, –ø–æ–¥–ø–∏—Å—å, –≤—Ä–µ–º—è, IP allowlist)", "detail":res}
            elif rc == 10006:
                return {"status":"error","message":"Insufficient permissions (–∫–ª—é—á –±–µ–∑ Trade/Read –∏–ª–∏ IP –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω)", "detail":res}
            elif str(rc).startswith("1312"):
                return {"status":"error","message":"Account type / UTA mismatch. –í–∫–ª—é—á–∏ UNIFIED –∏–ª–∏ —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π accountType.", "detail":res}
            else:
                return {"status":"error","message":f"retCode {rc}", "detail":res}
                
        except Exception as e:
            return {"status": "error", "message": f"V5 connection test failed: {str(e)}"}
    
    def set_leverage(self, symbol: str, leverage: int = 30, category: str = "linear") -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        payload = {
            "category": category, 
            "symbol": symbol, 
            "buyLeverage": str(leverage), 
            "sellLeverage": str(leverage)
        }
        logger.info(f"üéØ Setting leverage {leverage}x for {symbol}")
        result = self.make_request("POST", "/v5/position/set-leverage", payload)
        
        rc = result.get("retCode")
        if rc in (0, 110043):
            # 110043 = —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–∫–æ–µ –∂–µ –ø–ª–µ—á–æ ‚Äî —ç—Ç–æ OK
            if rc == 110043:
                logger.info(f"‚úÖ Leverage already {leverage}x for {symbol}")
            else:
                logger.info(f"‚úÖ Leverage {leverage}x set for {symbol}")
            return {"status": "success", "leverage": leverage}
        else:
            logger.warning(f"‚ö†Ô∏è Failed to set leverage: {result.get('retMsg', 'Unknown error')}")
            return {"status": "warning", "message": result.get('retMsg', 'Leverage setting failed')}
    
    def close_position(self, symbol: str, direction: str, qty: str = None, category: str = "linear") -> Dict[str, Any]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏. –ï—Å–ª–∏ qty is None ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –í–ï–°–¨ —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º.
        """
        # –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        side = "Sell" if direction.lower() == "long" else "Buy"

        # –µ—Å–ª–∏ qty –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äì –±–µ—Ä—ë–º —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if qty is None:
            pos_size = self.get_position_size(symbol, side_hint=("long" if side == "Sell" else "short"), category=category)
            if pos_size <= 0:
                return {"status": "error", "message": "No open position to close"}
            qty = self.round_qty(symbol, pos_size, category)
        else:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–∫—Ä—É–≥–ª–∏–º –ª—é–±–æ–π –≤—Ö–æ–¥—è—â–∏–π qty –ø–æ–¥ —à–∞–≥
            qty = self.round_qty(symbol, float(qty), category)

        payload = {
            "category": category,
            "symbol": symbol,
            "side": side,
            "orderType": "Market",
            "qty": str(qty),
            "reduceOnly": True,
            "timeInForce": "IOC"
        }

        logger.info(f"üîª Closing position: {symbol} {side} qty={qty}")
        result = self.make_request("POST", "/v5/order/create", payload)

        if result.get("retCode") == 0:
            order_id = result.get("result", {}).get("orderId", "Unknown")
            return {"status": "success", "message": "Position closed", "order_id": order_id}
        else:
            return {"status": "error", "message": f"Failed to close position: {result.get('retMsg', 'Unknown error')}"}
    
    def update_stop_loss(self, symbol: str, stop_loss: str, category: str = "linear") -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ stop-loss —á–µ—Ä–µ–∑ trading-stop"""
        payload = {
            "category": category,
            "symbol": symbol,
            "stopLoss": str(stop_loss)
        }
        
        logger.info(f"üõ°Ô∏è Updating stop-loss for {symbol} to {stop_loss}")
        result = self.make_request("POST", "/v5/position/trading-stop", payload)
        
        if result.get("retCode") == 0:
            return {"status": "success", "message": f"Stop-loss updated to {stop_loss}"}
        else:
            error_msg = result.get("retMsg", "Unknown error")
            return {"status": "error", "message": f"Failed to update stop-loss: {error_msg}"}
    
    def place_order(self, symbol: str, side: str, qty: str, price: Optional[str] = None, 
                   take_profit: Optional[str] = None, stop_loss: Optional[str] = None, 
                   leverage: Optional[int] = None) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ V5 API
        category: –≤—Å–µ–≥–¥–∞ linear –¥–ª—è USDT-–ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤
        symbol: –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ .P (–Ω–∞–ø—Ä–∏–º–µ—Ä, ETHUSDT)
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞: —É–¥–∞–ª—è–µ–º .P —Å—É—Ñ—Ñ–∏–∫—Å
        if symbol.endswith(".P"):
            symbol = symbol[:-2]
            logger.info(f"üìà –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞: {symbol}.P ‚Üí {symbol}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if leverage:
            self.set_leverage(symbol, leverage)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        filters = self._get_symbol_filters(symbol)
        qty_raw = float(qty)
        qty_norm = self._round_step_down(qty_raw, filters["qtyStep"])

        if qty_norm < filters["minOrderQty"]:
            return {"status":"error",
                    "message": f"Qty {qty_raw} < min {filters['minOrderQty']} –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —à–∞–≥–æ–º {filters['qtyStep']}"}

        qty = f"{qty_norm:.2f}"  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤

        if price is not None and price != "market":
            tick = filters["tickSize"]
            p_norm = self._round_step_down(float(price), tick)
            price = f"{p_norm:.2f}"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
        order_params = {
            "category": "linear",  # –í—Å–µ–≥–¥–∞ linear –¥–ª—è USDT-–ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤
            "symbol": symbol,
            "side": side,  # "Buy" –∏–ª–∏ "Sell"
            "orderType": "Market" if price is None else "Limit",
            "qty": qty,  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
            "timeInForce": "IOC" if price is None else "GTC"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if price is not None and price != "market":
            order_params["price"] = str(price)
        
        # –î–æ–±–∞–≤–ª—è–µ–º SL/TP –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if take_profit:
            order_params["takeProfit"] = str(take_profit)
            logger.info(f"üéØ Take Profit set: {take_profit}")
        
        if stop_loss:
            order_params["stopLoss"] = str(stop_loss)
            logger.info(f"üõ°Ô∏è Stop Loss set: {stop_loss}")
        
        logger.info(f"üìä V5 Order: {symbol} {side} {qty} @ {price or 'MARKET'}")
        
        result = self.make_request("POST", "/v5/order/create", order_params)
        
        if result.get("retCode") == 0:
            order_id = result.get("result", {}).get("orderId", "Unknown")
            return {
                "status": "success",
                "message": f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —á–µ—Ä–µ–∑ V5 API",
                "order_id": order_id,
                "symbol": symbol
            }
        else:
            error_msg = result.get("retMsg", "Unknown V5 error")
            return {
                "status": "error", 
                "message": f"V5 –æ—Ä–¥–µ—Ä –æ—à–∏–±–∫–∞: {error_msg}"
            }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è V5 API –∫–ª–∏–µ–Ω—Ç–∞
def initialize_v5_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è V5 API –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    api_key = os.getenv("BYBIT_API_KEY") or os.getenv("BYBIT_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET") or os.getenv("BYBIT_SECRET")
    
    if not api_key or not api_secret:
        logger.error("‚ùå BYBIT_API_KEY/SECRET (–∏–ª–∏ BYBIT_KEY/SECRET) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ env")
        return None
    
    logger.info(f"‚úÖ V5 Client init with key: {api_key[:8]}...")
    return BybitV5API(api_key, api_secret)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ V5
v5_client = initialize_v5_client()

def normalize_symbol(symbol: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è Bybit V5"""
    return symbol.replace(".P", "") if symbol.endswith(".P") else symbol

def mask(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not text or len(text) < 8:
        return "***"
    return text[:4] + "***" + text[-2:]

def execute_trade_signal(signal: Dict[str, Any]) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ V5 API"""
    if not v5_client:
        return {"status": "error", "message": "V5 API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    try:
        signal_type = signal.get("type", "entry").lower()
        symbol = signal.get("symbol", "ETHUSDT")
        direction = signal.get("direction", "long").lower()
        qty = str(signal.get("qty", "0.001"))
        
        logger.info(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ V5: {signal_type} {symbol} {direction} {qty}")
        
        if signal_type == "entry":
            # –¥–≤—É—Ö—à–∞–≥–æ–≤—ã–π MARKET-–≤—Ö–æ–¥ (–∏—Å–∫–ª—é—á–∞–µ—Ç Price invalid)
            take_profit = signal.get("take_profit")
            stop_loss   = signal.get("stop_loss")
            leverage    = signal.get("leverage", 30)

            side = "Buy" if direction == "long" else "Sell"

            # –µ—Å–ª–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ —è–≤–Ω–æ –¥–∞–Ω order_type, —É–≤–∞–∂–∞–µ–º –µ–≥–æ
            order_type = str(signal.get("order_type", "market")).lower()
            if order_type == "limit":
                # —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ª–∏–º–∏—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
                entry_price = signal.get("entry_price")
                return v5_client.place_order(
                    symbol=symbol,
                    side=side,
                    qty=qty,
                    price=entry_price,
                    take_profit=take_profit,
                    stop_loss=stop_loss,
                    leverage=leverage
                )
            # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –¥–≤—É—Ö—à–∞–≥–æ–≤—ã–π –º–∞—Ä–∫–µ—Ç
            return v5_client.place_entry_two_step(
                symbol=symbol,
                side=side,
                qty=qty,
                take_profit=take_profit,
                stop_loss=stop_loss,
                leverage=leverage
            )

        elif signal_type == "exit":
            # –Ω–∞–¥—ë–∂–Ω—ã–π –≤—ã—Ö–æ–¥
            return v5_client.exit_enhanced(symbol, direction, reason=signal.get("reason",""))

        elif signal_type == "trail_update":
            # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏: new_trail_stop / new_stop_loss / new_stop
            new_stop = (signal.get("new_trail_stop") or
                        signal.get("new_stop_loss") or
                        signal.get("new_stop"))
            if not new_stop:
                return {"status": "error", "message": "new_trail_stop/new_stop_loss/new_stop required"}
            return v5_client.trail_update_enhanced(symbol, direction, str(new_stop))
        
        else:
            return {"status": "error", "message": f"Unknown signal type: {signal_type}"}
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ V5: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        return {"status": "error", "message": error_msg}

def close_position_market(symbol: str, side: str, qty: float) -> dict:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ market –æ—Ä–¥–µ—Ä–æ–º –±–µ–∑ SL/TP"""
    try:
        client = get_client()
        if not client:
            return {"status": "error", "message": "Client not initialized"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        close_side = "Sell" if side.lower() in ["long", "buy"] else "Buy"
        
        payload = {
            "category": client.category,
            "symbol": symbol,
            "side": close_side,
            "orderType": "Market",
            "qty": str(qty),
            "timeInForce": "IOC",
            "reduceOnly": True
        }
        
        response = client.place_order(**payload)
        return {"status": "success", "data": response}
    except Exception as e:
        return {"status": "error", "message": str(e)}

def get_client() -> Optional[BybitV5API]:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è trail_engine"""
    global v5_client
    if v5_client is None:
        api_key = os.getenv("BYBIT_API_KEY", "")
        api_secret = os.getenv("BYBIT_API_SECRET", "")
        if api_key and api_secret:
            v5_client = BybitV5API(api_key, api_secret)
    return v5_client

def test_connection() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å V5 API"""
    if not v5_client:
        return {"status": "error", "message": "V5 API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    return v5_client.test_connection()