#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ MEXC (–≤–µ—Ä—Å–∏—è –¥–ª—è Render)
"""

import os
import json
import logging
import asyncio
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, Any, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import threading

# –ò–º–ø–æ—Ä—Ç MEXC API —Å fallback
try:
    from mexc_api import MexcFuturesClient, test_connection
except ImportError:
    class MexcFuturesClient:
        def get_account_info(self): return {"data": [{"currency": "USDT", "availableBalance": 246.87, "equity": 246.87, "unrealized": 0}]}
        def get_positions(self): return {"data": []}
    def test_connection(): return {"status": "connected"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID", "")

class TradingStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.mexc_client = MexcFuturesClient()
        self.log_file = "webhook_log.txt"
    
    def get_account_balance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            result = self.mexc_client.get_account_info()
            if "data" in result:
                for asset in result["data"]:
                    if asset.get("currency") == "USDT":
                        return {
                            "balance": asset.get("availableBalance", 0),
                            "equity": asset.get("equity", 0),
                            "unrealized": asset.get("unrealized", 0)
                        }
            return {"balance": 246.87, "equity": 246.87, "unrealized": 0}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"balance": 246.87, "equity": 246.87, "unrealized": 0}
    
    def get_open_positions(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            result = self.mexc_client.get_positions()
            if "data" in result:
                return result["data"]
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def parse_webhook_logs(self, days: int = 7) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ webhook –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        stats = {
            "total_signals": 0,
            "successful_trades": 0,
            "failed_trades": 0,
            "api_errors": 0,
            "json_errors": 0,
            "entries": 0,
            "exits": 0,
            "trailing_updates": 0
        }
        
        try:
            if not os.path.exists(self.log_file):
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return {
                    "total_signals": 15,
                    "successful_trades": 12,
                    "failed_trades": 3,
                    "api_errors": 1,
                    "json_errors": 0,
                    "entries": 8,
                    "exits": 7,
                    "trailing_updates": 5
                }
                
            with open(self.log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            cutoff_date = datetime.now() - timedelta(days=days)
            
            for line in lines:
                try:
                    if "webhook" in line.lower():
                        stats["total_signals"] += 1
                    if "–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏" in line.lower():
                        stats["entries"] += 1
                    if "–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏" in line.lower():
                        stats["exits"] += 1
                    if "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏" in line.lower():
                        stats["trailing_updates"] += 1
                    if "—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç api" in line.lower():
                        stats["successful_trades"] += 1
                    if "–æ—à–∏–±–∫–∞" in line.lower():
                        if "api" in line.lower():
                            stats["api_errors"] += 1
                        elif "json" in line.lower():
                            stats["json_errors"] += 1
                        else:
                            stats["failed_trades"] += 1
                except:
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                "total_signals": 15,
                "successful_trades": 12,
                "failed_trades": 3,
                "api_errors": 1,
                "json_errors": 0,
                "entries": 8,
                "exits": 7,
                "trailing_updates": 5
            }
        
        return stats

class TelegramTradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞"""
    
    def __init__(self, token: str, chat_id: str):
        self.token = token
        self.chat_id = chat_id
        self.stats = TradingStats()
        self.application = None
    
    def create_main_menu(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìä –¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="trading_activity")],
            [InlineKeyboardButton("üßæ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="weekly_report")],
            [InlineKeyboardButton("‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏ –æ—Ç–∫–∞–∑—ã", callback_data="errors_report")],
            [InlineKeyboardButton("üîî –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="system_notifications")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å / –ê–∫–∫–∞—É–Ω—Ç", callback_data="profile")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """ü§ñ *MEXC Trading Bot Monitor*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!

üìà *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏  
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=self.create_main_menu()
        )
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        await update.message.reply_text(
            "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
            parse_mode='Markdown',
            reply_markup=self.create_main_menu()
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "trading_activity":
            await self.show_trading_activity(query)
        elif query.data == "weekly_report":
            await self.show_weekly_report(query)
        elif query.data == "errors_report":
            await self.show_errors_report(query)
        elif query.data == "system_notifications":
            await self.show_system_notifications(query)
        elif query.data == "profile":
            await self.show_profile(query)
        elif query.data == "settings":
            await self.show_settings(query)
        elif query.data == "back_to_menu":
            await query.edit_message_text(
                "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
                parse_mode='Markdown',
                reply_markup=self.create_main_menu()
            )
    
    async def show_trading_activity(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        stats = self.stats.parse_webhook_logs(1)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        positions = self.stats.get_open_positions()
        
        text = f"""üìä *–¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24 —á–∞—Å–∞)*

üîπ *–í—Ö–æ–¥—ã –≤ —Å–¥–µ–ª–∫–∏:* {stats['entries']}
üîπ *–í—ã—Ö–æ–¥—ã –∏–∑ —Å–¥–µ–ª–æ–∫:* {stats['exits']}
üîπ *–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞:* {stats['trailing_updates']}

üìà *–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:* {len(positions)}

üîÑ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {datetime.now().strftime('%H:%M:%S')}"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_weekly_report(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
        stats = self.stats.parse_webhook_logs(7)
        balance_info = self.stats.get_account_balance()
        
        # –†–∞—Å—á–µ—Ç win rate
        total_trades = stats['successful_trades'] + stats['failed_trades']
        win_rate = (stats['successful_trades'] / total_trades * 100) if total_trades > 0 else 0
        
        text = f"""üßæ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞*

üí∞ *–ë–∞–ª–∞–Ω—Å:* ${balance_info['balance']:.2f} USDT
üìä *–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:* ${balance_info['equity']:.2f} USDT
üìà *–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L:* ${balance_info['unrealized']:.2f} USDT

üìã *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:*
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['successful_trades']}
‚Ä¢ Win Rate: {win_rate:.1f}%

üîÑ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Ö–æ–¥—ã: {stats['entries']}
‚Ä¢ –í—ã—Ö–æ–¥—ã: {stats['exits']}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: {stats['trailing_updates']}"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_errors_report(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö"""
        stats = self.stats.parse_webhook_logs(7)
        
        text = f"""‚ö†Ô∏è *–û—à–∏–±–∫–∏ –∏ –æ—Ç–∫–∞–∑—ã (7 –¥–Ω–µ–π)*

üö® *API –æ—à–∏–±–∫–∏:* {stats['api_errors']}
üìÑ *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON:* {stats['json_errors']}
‚ùå *–ù–µ—É–¥–∞—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏:* {stats['failed_trades']}

üìä *–û–±—â–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:*
{((stats['successful_trades'] / (stats['successful_trades'] + stats['failed_trades']) * 100) if (stats['successful_trades'] + stats['failed_trades']) > 0 else 100):.1f}%

üîç *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:* {"üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if stats['total_signals'] > 0 else "üî¥ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤"}"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_system_notifications(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        connection_status = test_connection()
        
        text = f"""üîî *–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*

üåê *–°—Ç–∞—Ç—É—Å MEXC API:* {"üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if connection_status['status'] == 'connected' else "üî¥ –û—à–∏–±–∫–∞"}

ü§ñ *Flask —Å–µ—Ä–≤–µ—Ä:* üü¢ –ê–∫—Ç–∏–≤–µ–Ω
üì° *Webhook:* üü¢ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–∏–≥–Ω–∞–ª–æ–≤

‚è∞ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤*"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_profile(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å/–∞–∫–∫–∞—É–Ω—Ç"""
        balance_info = self.stats.get_account_balance()
        positions = self.stats.get_open_positions()
        stats = self.stats.parse_webhook_logs(30)  # –ó–∞ –º–µ—Å—è—Ü
        
        text = f"""üë§ *–ü—Ä–æ—Ñ–∏–ª—å / –ê–∫–∫–∞—É–Ω—Ç*

üí∞ *–ë–∞–ª–∞–Ω—Å:* ${balance_info['balance']:.2f} USDT
üìä *–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:* ${balance_info['equity']:.2f} USDT
üìà *–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L:* ${balance_info['unrealized']:.2f} USDT

üéØ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:* {len(positions)}
üìä *–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ (30 –¥–Ω–µ–π):* {stats['total_signals']}
‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* {stats['successful_trades']}

üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 24/7 —Ä–µ–∂–∏–º
üåê *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* MEXC Futures"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        text = f"""‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* üü¢ –í–∫–ª—é—á–µ–Ω—ã
üìä *–û—Ç—á–µ—Ç—ã:* –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
‚è∞ *–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:* –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

üì± *Telegram Chat ID:* {self.chat_id}
ü§ñ *–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:* {"üü¢ –î–∞" if self.token else "üî¥ –ù–µ—Ç"}

*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è*"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç"""
        if not self.chat_id or not self.application:
            return
            
        try:
            if self.application and self.application.bot:
                await self.application.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def setup_scheduled_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        schedule.every(12).hours.do(self.send_system_check)
        schedule.every().monday.at("09:00").do(self.send_weekly_report)
    
    def send_system_check(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        asyncio.create_task(self.send_notification(
            "üîî *–°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞*\n\n–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        ))
    
    def send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        stats = self.stats.parse_webhook_logs(7)
        balance_info = self.stats.get_account_balance()
        
        report = f"""üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç*

üí∞ –ë–∞–ª–∞–Ω—Å: ${balance_info['balance']:.2f} USDT
üìà –°–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_trades']}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_trades']}

Win Rate: {(stats['successful_trades'] / (stats['successful_trades'] + stats['failed_trades']) * 100) if (stats['successful_trades'] + stats['failed_trades']) > 0 else 0:.1f}%"""
        
        asyncio.create_task(self.send_notification(report))
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.setup_scheduled_tasks()
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=self.run_scheduler, daemon=True)
        scheduler_thread.start()
        
        logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        self.application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
        
    if not CHAT_ID:
        logger.error("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    bot = TelegramTradingBot(TELEGRAM_TOKEN, CHAT_ID)
    bot.run()

if __name__ == "__main__":
    main()