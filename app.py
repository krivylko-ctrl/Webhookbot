import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import threading
from datetime import datetime, timedelta
import os

from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
from database import Database
from config import Config
import config as cfg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KWIN Trading Bot",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("Kwin Trading Bot")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
try:
    cfg.must_have()
    st.success(f"ENV OK: {cfg.SYMBOL} | {cfg.INTERVALS} | {cfg.BYBIT_ACCOUNT_TYPE}")
except Exception as e:
    st.error(f"‚õî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã: {e}")
    st.info("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BYBIT_API_KEY, BYBIT_API_SECRET")
    st.stop()  # –ù–µ –∏–¥—ë–º –¥–∞–ª—å—à–µ ‚Äî –≤–º–µ—Å—Ç–æ ¬´–±–µ–ª–æ–≥–æ —ç–∫—Ä–∞–Ω–∞¬ª –ø–æ–ª—É—á–∏—à—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    config = Config()
    db = Database()
    state_manager = StateManager(db)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if cfg.BYBIT_API_KEY and cfg.BYBIT_API_SECRET:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit
        bybit_api = BybitAPI(cfg.BYBIT_API_KEY, cfg.BYBIT_API_SECRET, testnet=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            server_time = bybit_api.get_server_time()
            if not server_time:
                st.warning("‚ö†Ô∏è Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
                from demo_mode import create_demo_api
                bybit_api = create_demo_api()
        except:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bybit API. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
            from demo_mode import create_demo_api
            bybit_api = create_demo_api()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
        from demo_mode import create_demo_api
        bybit_api = create_demo_api()
        st.info("‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")
    
    strategy = KWINStrategy(config, bybit_api, state_manager, db)
    
    return config, db, state_manager, bybit_api, strategy

def main():
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config, db, state_manager, bybit_api, strategy = init_components()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    if bybit_api is None:
        st.error("‚ö†Ô∏è API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ BYBIT_API_KEY –∏ BYBIT_API_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if 'bot_running' not in st.session_state:
            st.session_state.bot_running = False
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", use_container_width=True):
                if not st.session_state.bot_running:
                    st.session_state.bot_running = True
                    st.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
                    
        with col2:
            if st.button("‚èπÔ∏è –°—Ç–æ–ø", use_container_width=True):
                if st.session_state.bot_running:
                    st.session_state.bot_running = False
                    st.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.markdown("### üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø API (–¥–µ–º–æ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π)
            if hasattr(bybit_api, 'current_price'):  # –î–µ–º–æ API
                st.warning("üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
                st.caption("‚ö†Ô∏è Bybit API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                if st.button("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"):
                    st.info("""
                    **–ü—Ä–æ–±–ª–µ–º–∞:** –°–µ—Ä–≤–µ—Ä Replit –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Bybit.
                    
                    **–†–µ—à–µ–Ω–∏—è:**
                    1. üè† –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
                    2. üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPS –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ  
                    3. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏/VPN –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    
                    **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** –î–µ–º–æ-—Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
                    """)
            else:
                server_time = bybit_api.get_server_time()
                if server_time:
                    st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –∞–∫—Ç–∏–≤–Ω–æ")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        
        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("### ‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.write(f"**–†–∏—Å–∫:** {config.risk_pct}%")
        st.write(f"**RR:** {config.risk_reward}")
        st.write(f"**–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è:** {config.max_qty_manual} ETH")
        st.write(f"**–¢—Ä–µ–π–ª–∏–Ω–≥:** {'‚úÖ' if config.enable_smart_trail else '‚ùå'}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –î–∞—à–±–æ—Ä–¥", "üìà –ì—Ä–∞—Ñ–∏–∫", "üí∞ Equity", "üìã –°–¥–µ–ª–∫–∏"])
    
    with tab1:
        show_dashboard(db, state_manager, strategy)
    
    with tab2:
        show_chart(bybit_api, db, strategy)
    
    with tab3:
        show_equity_curve(db)
    
    with tab4:
        show_trades_table(db)

def show_dashboard(db, state_manager, strategy):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞"""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ Equity", f"${state_manager.get_equity():.2f}")
    
    with col2:
        current_pos = state_manager.get_current_position()
        pos_text = f"{current_pos.get('size', 0):.4f} ETH" if current_pos else "0 ETH"
        st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", pos_text)
    
    with col3:
        trades_today = db.get_trades_count_today()
        st.metric("üìä –°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è", trades_today)
    
    with col4:
        pnl_today = db.get_pnl_today()
        st.metric("üíµ PnL —Å–µ–≥–æ–¥–Ω—è", f"${pnl_today:.2f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π")
    
    stats = db.get_performance_stats(days=30)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üéØ Win Rate", f"{stats.get('win_rate', 0):.1f}%")
    with col2:
        st.metric("üìä Avg RR", f"{stats.get('avg_rr', 0):.2f}")
    with col3:
        st.metric("‚è±Ô∏è Avg Hold Time", f"{stats.get('avg_hold_time', 0):.1f}h")

def show_chart(bybit_api, db, strategy):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å —Å–¥–µ–ª–∫–∞–º–∏"""
    st.markdown("### üìà –ì—Ä–∞—Ñ–∏–∫ ETH/USDT")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
    if bybit_api:
        try:
            klines = bybit_api.get_klines("ETHUSDT", "15", 100)
            if klines:
                df = pd.DataFrame(klines)
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π
                fig = go.Figure(data=[go.Candlestick(
                    x=df['timestamp'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name="ETH/USDT"
                )])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏
                trades = db.get_recent_trades(50)
                for trade in trades:
                    if trade['entry_time']:
                        entry_time = pd.to_datetime(trade['entry_time'])
                        fig.add_trace(go.Scatter(
                            x=[entry_time],
                            y=[trade['entry_price']],
                            mode='markers',
                            marker=dict(
                                symbol='triangle-up' if trade['direction'] == 'long' else 'triangle-down',
                                size=10,
                                color='green' if trade['direction'] == 'long' else 'red'
                            ),
                            name=f"Entry {trade['direction']}"
                        ))
                
                fig.update_layout(
                    title="ETH/USDT 15m —Å –≤—Ö–æ–¥–∞–º–∏",
                    xaxis_title="–í—Ä–µ–º—è",
                    yaxis_title="–¶–µ–Ω–∞",
                    height=600
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def show_equity_curve(db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–≤—É—é equity"""
    st.markdown("### üí∞ –ö—Ä–∏–≤–∞—è Equity")
    
    equity_data = db.get_equity_history(days=30)
    
    if equity_data:
        df = pd.DataFrame(equity_data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['equity'],
            mode='lines',
            name='Equity',
            line=dict(color='blue', width=2)
        ))
        
        fig.update_layout(
            title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ Equity –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="Equity ($)",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π equity")

def show_trades_table(db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫"""
    st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    
    trades = db.get_recent_trades(100)
    
    if trades:
        df = pd.DataFrame(trades)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df['entry_time'] = pd.to_datetime(df['entry_time'])
        df['exit_time'] = pd.to_datetime(df['exit_time'])
        df['pnl'] = df['pnl'].round(2)
        df['rr'] = df['rr'].round(2)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df[['entry_time', 'direction', 'entry_price', 'exit_price', 'quantity', 'pnl', 'rr', 'status']],
            use_container_width=True
        )
    else:
        st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
