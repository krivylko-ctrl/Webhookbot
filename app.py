import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import threading
from datetime import datetime, timedelta
import os

from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
from database import Database
from config import Config
import config as cfg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KWIN Trading Bot",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("Kwin Trading Bot")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
try:
    cfg.must_have()
    st.success(f"ENV OK: {cfg.SYMBOL} | {cfg.INTERVALS} | {cfg.BYBIT_ACCOUNT_TYPE}")
except Exception as e:
    st.error(f"‚õî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã: {e}")
    st.info("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BYBIT_API_KEY, BYBIT_API_SECRET")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    config = Config()
    db = Database()
    state_manager = StateManager(db)

    # ====== COMPAT: shims for save_bot_state / get_bot_state ======
    # (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Ö –≤—ã–∑—ã–≤–∞–µ—Ç; –≤ —Ç–≤–æ—ë–º Database –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤)
    if not hasattr(db, "save_bot_state"):
        def _save_bot_state(state: dict):
            try:
                # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ KV/–º–µ—Ç–∞ –º–µ—Ç–æ–¥—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
                if hasattr(db, "set_meta"):
                    db.set_meta("bot_state", state)
                elif hasattr(db, "save_kv"):
                    db.save_kv("bot_state", state)
                else:
                    # —Ç–∏—Ö–∏–π no-op, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ—à–∏–±–∫–∞–º–∏
                    pass
            except Exception:
                # –Ω–∏–∫–∞–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                pass
        db.save_bot_state = _save_bot_state

    if not hasattr(db, "get_bot_state"):
        def _get_bot_state():
            try:
                if hasattr(db, "get_meta"):
                    return db.get_meta("bot_state") or {}
                elif hasattr(db, "get_kv"):
                    return db.get_kv("bot_state") or {}
            except Exception:
                pass
            return {}
        db.get_bot_state = _get_bot_state
    # =============================================================

    # ====== –¢–æ—á–µ—á–Ω–æ: –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Smart Trailing / ARM ======
    config.enable_smart_trail      = bool(getattr(cfg, "ENABLE_SMART_TRAIL", True))
    config.trailing_perc           = float(getattr(cfg, "TRAILING_PERC", 0.5))
    config.trailing_offset_perc    = float(getattr(cfg, "TRAILING_OFFSET_PERC", 0.4))
    config.trailing_offset         = float(getattr(cfg, "TRAILING_OFFSET_PERC", 0.4))  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

    config.use_arm_after_rr        = bool(getattr(cfg, "USE_ARM_AFTER_RR", True))
    config.arm_rr                  = float(getattr(cfg, "ARM_RR", 0.5))

    # –ë–∞–∑–æ–≤—ã–µ —Ä–∏—Å–∫–∏/—Å–∏–º–≤–æ–ª (–æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å, —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
    config.risk_pct                = float(getattr(cfg, "RISK_PCT", getattr(config, "risk_pct", 3.0)))
    config.risk_reward             = float(getattr(cfg, "RISK_REWARD", getattr(config, "risk_reward", 1.3)))
    if hasattr(cfg, "SYMBOL"):
        config.symbol = cfg.SYMBOL
    # ==================================================================

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if getattr(cfg, "BYBIT_API_KEY", None) and getattr(cfg, "BYBIT_API_SECRET", None):
        bybit_api = BybitAPI(cfg.BYBIT_API_KEY, cfg.BYBIT_API_SECRET, testnet=False)
        try:
            server_time = bybit_api.get_server_time()
            if not server_time:
                st.warning("‚ö†Ô∏è Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≥–µ–æ-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
                from demo_mode import create_demo_api
                bybit_api = create_demo_api()
        except:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bybit API. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
            from demo_mode import create_demo_api
            bybit_api = create_demo_api()
    else:
        from demo_mode import create_demo_api
        bybit_api = create_demo_api()
        st.info("‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

    strategy = KWINStrategy(config, bybit_api, state_manager, db)
    return config, db, state_manager, bybit_api, strategy

def main():
    config, db, state_manager, bybit_api, strategy = init_components()

    if bybit_api is None:
        st.error("‚ö†Ô∏è API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ BYBIT_API_KEY –∏ BYBIT_API_SECRET.")
        st.stop()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")

        if 'bot_running' not in st.session_state:
            st.session_state.bot_running = False

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", use_container_width=True):
                if not st.session_state.bot_running:
                    st.session_state.bot_running = True
                    st.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        with col2:
            if st.button("‚èπÔ∏è –°—Ç–æ–ø", use_container_width=True):
                if st.session_state.bot_running:
                    st.session_state.bot_running = False
                    st.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        st.markdown("### üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        try:
            if hasattr(bybit_api, 'current_price'):  # –î–µ–º–æ API
                st.warning("üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
                st.caption("‚ö†Ô∏è Bybit API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                if st.button("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"):
                    st.info("""
                    **–ü—Ä–æ–±–ª–µ–º–∞:** –°–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Bybit.
                    **–†–µ—à–µ–Ω–∏—è:** –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫, VPS –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, –ø—Ä–æ–∫—Å–∏/VPN.
                    """)
            else:
                server_time = bybit_api.get_server_time()
                if server_time:
                    st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –∞–∫—Ç–∏–≤–Ω–æ")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

        st.markdown("### ‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.write(f"**–†–∏—Å–∫:** {config.risk_pct}%")
        st.write(f"**RR:** {config.risk_reward}")
        st.write(f"**–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è:** {getattr(config, 'max_qty_manual', 0)} ETH")
        st.write(f"**–¢—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if config.enable_smart_trail else '‚ùå'}")

        with st.expander("üîß Smart Trailing / ARM (—Ç–µ–∫—É—â–∏–µ)"):
            st.write(f"**Trailing % (–æ—Ç entry):** {config.trailing_perc}%")
            st.write(f"**Trailing Offset %:** {config.trailing_offset_perc}%")
            st.write(f"**Arm after RR:** {'–î–∞' if config.use_arm_after_rr else '–ù–µ—Ç'}")
            st.write(f"**ARM RR (R):** {config.arm_rr}")

    tab1, tab2, tab3, tab4 = st.tabs(["üìä –î–∞—à–±–æ—Ä–¥", "üìà –ì—Ä–∞—Ñ–∏–∫", "üí∞ Equity", "üìã –°–¥–µ–ª–∫–∏"])

    with tab1:
        show_dashboard(db, state_manager, strategy)
    with tab2:
        show_chart(bybit_api, db, strategy)
    with tab3:
        show_equity_curve(db)
    with tab4:
        show_trades_table(db)

def show_dashboard(db, state_manager, strategy):
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üí∞ Equity", f"${state_manager.get_equity():.2f}")
    with col2:
        current_pos = state_manager.get_current_position()
        pos_text = f"{current_pos.get('size', 0):.4f} ETH" if current_pos else "0 ETH"
        st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", pos_text)
    with col3:
        trades_today = db.get_trades_count_today()
        st.metric("üìä –°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è", trades_today)
    with col4:
        pnl_today = db.get_pnl_today()
        st.metric("üíµ PnL —Å–µ–≥–æ–¥–Ω—è", f"${pnl_today:.2f}")

    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π")
    stats = db.get_performance_stats(days=30)
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üéØ Win Rate", f"{stats.get('win_rate', 0):.1f}%")
    with col2:
        st.metric("üìä Avg RR", f"{stats.get('avg_rr', 0):.2f}")
    with col3:
        st.metric("‚è±Ô∏è Avg Hold Time", f"{stats.get('avg_hold_time', 0):.1f}h")

def show_chart(bybit_api, db, strategy):
    st.markdown("### üìà –ì—Ä–∞—Ñ–∏–∫ ETH/USDT")
    if bybit_api:
        try:
            klines = bybit_api.get_klines("ETHUSDT", "15", 100)
            if klines:
                df = pd.DataFrame(klines)
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                fig = go.Figure(data=[go.Candlestick(
                    x=df['timestamp'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name="ETH/USDT"
                )])
                trades = db.get_recent_trades(50)
                for trade
