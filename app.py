import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import os

from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
from database import Database
from config import Config
import config as cfg

# ===================== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====================
st.set_page_config(
    page_title="KWIN Trading Bot",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("Kwin Trading Bot")

# ===================== –ü—Ä–æ–≤–µ—Ä–∫–∞ ENV =====================
try:
    cfg.must_have()
    st.success(f"ENV OK: SYMBOL={cfg.SYMBOL} | INTERVALS={cfg.INTERVALS} | ACCOUNT={cfg.BYBIT_ACCOUNT_TYPE}")
except Exception as e:
    st.error(f"‚õî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã: {e}")
    st.info("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BYBIT_API_KEY, BYBIT_API_SECRET")
    st.stop()

# ===================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====================
@st.cache_resource
def init_components():
    config = Config()
    db = Database()
    state_manager = StateManager(db)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –∏–ª–∏ –¥–µ–º–æ-API
    if cfg.BYBIT_API_KEY and cfg.BYBIT_API_SECRET:
        bybit_api = BybitAPI(cfg.BYBIT_API_KEY, cfg.BYBIT_API_SECRET, testnet=False)
        try:
            server_time = bybit_api.get_server_time()
            if not server_time:
                st.warning("‚ö†Ô∏è Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≥–µ–æ/—Å–µ—Ç—å). –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
                from demo_mode import create_demo_api
                bybit_api = create_demo_api()
        except Exception:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Bybit API. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
            from demo_mode import create_demo_api
            bybit_api = create_demo_api()
    else:
        from demo_mode import create_demo_api
        bybit_api = create_demo_api()
        st.info("‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
    strategy = KWINStrategy(config, bybit_api, state_manager, db)
    return config, db, state_manager, bybit_api, strategy

# ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====================
def _fmt_money(x):
    try:
        return f"${float(x):.2f}"
    except Exception:
        return "$0.00"

# ===================== –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä =====================
def main():
    config, db, state_manager, bybit_api, strategy = init_components()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")

        if 'bot_running' not in st.session_state:
            st.session_state.bot_running = False

        c1, c2 = st.columns(2)
        with c1:
            if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", use_container_width=True):
                if not st.session_state.bot_running:
                    st.session_state.bot_running = True
                    st.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        with c2:
            if st.button("‚èπÔ∏è –°—Ç–æ–ø", use_container_width=True):
                if st.session_state.bot_running:
                    st.session_state.bot_running = False
                    st.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", use_container_width=True)

        st.markdown("### üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        try:
            # –ü—Ä–∏–∑–Ω–∞–∫ –¥–µ–º–æ-API
            if hasattr(bybit_api, 'current_price'):
                st.warning("üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
                st.caption("Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            else:
                server_time = bybit_api.get_server_time()
                if server_time:
                    st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –∞–∫—Ç–∏–≤–Ω–æ")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

        st.markdown("### ‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.write(f"**–°–∏–º–≤–æ–ª:** {getattr(strategy, 'symbol', cfg.SYMBOL)}")
        st.write(f"**–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:** {config.risk_pct}%")
        st.write(f"**RR:** {config.risk_reward}")
        st.write(f"**–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è:** {config.max_qty_manual} ETH")

        st.markdown("### üß† Smart Trailing")
        st.write(f"–í–∫–ª—é—á–µ–Ω: {'‚úÖ' if config.enable_smart_trail else '‚ùå'}")
        st.write(f"Percent trailing: {getattr(config, 'trailing_perc', 0.5)}%")
        st.write(f"Offset trailing: {getattr(config, 'trailing_offset_perc', 0.4)}%")
        st.write(f"Bar lookback: {getattr(config, 'trail_lookback', 50)}")
        st.write(f"Buffer (ticks): {getattr(config, 'trail_buf_ticks', 0)}")
        st.write(f"ARM RR: {getattr(config, 'arm_rr', 0.5)} | after RR: {'‚úÖ' if getattr(config, 'use_arm_after_rr', True) else '‚ùå'}")

    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –î–∞—à–±–æ—Ä–¥", "üìà –ì—Ä–∞—Ñ–∏–∫", "üí∞ Equity", "üìã –°–¥–µ–ª–∫–∏"])

    with tab1:
        show_dashboard(db, state_manager, strategy)

    with tab2:
        show_chart(bybit_api, db, strategy)

    with tab3:
        show_equity_curve(db)

    with tab4:
        show_trades_table(db)

# ===================== –†–∞–∑–¥–µ–ª—ã =====================
def show_dashboard(db: Database, state_manager: StateManager, strategy: KWINStrategy):
    col1, col2, col3, col4 = st.columns(4)

    equity_val = state_manager.get_equity() or 0.0
    with col1:
        st.metric("üí∞ Equity", _fmt_money(equity_val))

    cur_pos = state_manager.get_current_position()
    with col2:
        pos_text = "–Ω–µ—Ç"
        if cur_pos and float(cur_pos.get("size") or 0) > 0:
            pos_text = f"{cur_pos.get('direction', '-')} {float(cur_pos.get('size', 0)):.4f} @ {float(cur_pos.get('entry_price', 0)):.2f}"
        st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", pos_text)

    with col3:
        trades_today = db.get_trades_count_today()
        st.metric("üìä –°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è", int(trades_today or 0))

    with col4:
        pnl_today = db.get_pnl_today() or 0.0
        st.metric("üíµ PnL —Å–µ–≥–æ–¥–Ω—è", _fmt_money(pnl_today))

    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π")
    stats = db.get_performance_stats(days=30)

    c1, c2, c3 = st.columns(3)
    with c1:
        st.metric("üéØ Win Rate", f"{float(stats.get('win_rate', 0) or 0):.1f}%")
    with c2:
        st.metric("üìä Avg RR", f"{float(stats.get('avg_rr', 0) or 0):.2f}")
    with c3:
        st.metric("‚è±Ô∏è Avg Hold Time", f"{float(stats.get('avg_hold_time', 0) or 0):.1f}h")

def show_chart(bybit_api, db: Database, strategy: KWINStrategy):
    symbol = getattr(strategy, "symbol", "ETHUSDT")
    st.markdown(f"### üìà –ì—Ä–∞—Ñ–∏–∫ {symbol} (15m)")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –ø–æ —Å–∏–º–≤–æ–ª—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        klines = bybit_api.get_klines(symbol, "15", 100)
        if not klines:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
            return

        df = pd.DataFrame(klines)
        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º—Å—Ç–∞–º–ø–∞
        if "timestamp" in df.columns:
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms", utc=True).dt.tz_convert(None)
        elif "t" in df.columns:
            df["timestamp"] = pd.to_datetime(df["t"], unit="ms", utc=True).dt.tz_convert(None)
        else:
            st.warning("–ù–µ—Ç –ø–æ–ª—è timestamp –≤ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
            return

        df = df.sort_values("timestamp")
        fig = go.Figure(data=[go.Candlestick(
            x=df["timestamp"],
            open=df["open"],
            high=df["high"],
            low=df["low"],
            close=df["close"],
            name=symbol
        )])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏ (–≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã)
        trades = db.get_recent_trades(200)
        if trades:
            entries_x, entries_y, entries_color, entries_symbol, entries_text = [], [], [], [], []
            exits_x, exits_y, exits_color, exits_symbol, exits_text = [], [], [], [], []

            for tr in trades:
                # Entry
                if tr.get("entry_time") and tr.get("entry_price") is not None:
                    et = pd.to_datetime(tr["entry_time"], errors="coerce")
                    if pd.notna(et):
                        entries_x.append(et)
                        entries_y.append(float(tr["entry_price"]))
                        entries_color.append("green" if tr.get("direction") == "long" else "red")
                        entries_symbol.append("triangle-up" if tr.get("direction") == "long" else "triangle-down")
                        qty = tr.get("quantity") or 0.0
                        entries_text.append(f"Entry {tr.get('direction', '-')}"
                                            f"<br>qty={float(qty):.4f}")

                # Exit
                if tr.get("exit_time") and tr.get("exit_price") is not None:
                    xt = pd.to_datetime(tr["exit_time"], errors="coerce")
                    if pd.notna(xt):
                        exits_x.append(xt)
                        exits_y.append(float(tr["exit_price"]))
                        pnl = tr.get("pnl")
                        rr = tr.get("rr")
                        c = "green" if (pnl or 0) >= 0 else "red"
                        exits_color.append(c)
                        exits_symbol.append("x")
                        pnl_s = f"{float(pnl):.2f}" if pnl is not None else "‚Äî"
                        rr_s = f"{float(rr):.2f}" if rr is not None else "‚Äî"
                        exits_text.append(f"Exit ({tr.get('exit_reason','-')})"
                                          f"<br>PNL={pnl_s} | RR={rr_s}")

            if entries_x:
                fig.add_trace(go.Scatter(
                    x=entries_x, y=entries_y, mode="markers",
                    marker=dict(size=10, color=entries_color, symbol=entries_symbol, line=dict(width=1)),
                    name="Entries", hovertext=entries_text, hoverinfo="text"
                ))

            if exits_x:
                fig.add_trace(go.Scatter(
                    x=exits_x, y=exits_y, mode="markers",
                    marker=dict(size=10, color=exits_color, symbol=exits_symbol, line=dict(width=1)),
                    name="Exits", hovertext=exits_text, hoverinfo="text"
                ))

        fig.update_layout(
            title=f"{symbol} 15m —Å–æ —Å–¥–µ–ª–∫–∞–º–∏",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–¶–µ–Ω–∞",
            height=640,
            legend=dict(orientation="h", y=1.02, x=0)
        )

        st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def show_equity_curve(db: Database):
    st.markdown("### üí∞ –ö—Ä–∏–≤–∞—è Equity")
    data = db.get_equity_history(days=30)
    if not data:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π equity")
        return

    df = pd.DataFrame(data)
    df["timestamp"] = pd.to_datetime(df["timestamp"])
    df = df.sort_values("timestamp")

    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=df["timestamp"], y=df["equity"], mode="lines",
        name="Equity", line=dict(width=2)
    ))
    fig.update_layout(
        title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ Equity –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="Equity ($)",
        height=420
    )
    st.plotly_chart(fig, use_container_width=True)

def show_trades_table(db: Database):
    st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    trades = db.get_recent_trades(200)
    if not trades:
        st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    df = pd.DataFrame(trades)
    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if "entry_time" in df.columns:
        df["entry_time"] = pd.to_datetime(df["entry_time"])
    if "exit_time" in df.columns:
        df["exit_time"] = pd.to_datetime(df["exit_time"], errors="coerce")

    for col in ("entry_price", "exit_price", "quantity", "pnl", "rr"):
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")

    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    for col in ("entry_price", "exit_price", "pnl", "rr"):
        if col in df.columns:
            df[col] = df[col].round(2)
    if "quantity" in df.columns:
        df["quantity"] = df["quantity"].round(4)

    view_cols = ["entry_time", "direction", "entry_price", "exit_price", "quantity", "pnl", "rr", "status", "exit_reason"]
    view_cols = [c for c in view_cols if c in df.columns]

    st.dataframe(df[view_cols].sort_values("entry_time", ascending=False), use_container_width=True)

# ===================== –ó–∞–ø—É—Å–∫ =====================
if __name__ == "__main__":
    main()
