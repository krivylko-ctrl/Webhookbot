import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import threading
from datetime import datetime, timedelta
import os

from bybit_api import BybitAPI
from kwin_strategy import KWINStrategy
from state_manager import StateManager
from database import Database
from config import Config
import config as cfg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="KWIN Trading Bot",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("Kwin Trading Bot")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
try:
    cfg.must_have()
    st.success(f"ENV OK: {cfg.SYMBOL} | {cfg.INTERVALS} | {cfg.BYBIT_ACCOUNT_TYPE}")
except Exception as e:
    st.error(f"‚õî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã: {e}")
    st.info("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BYBIT_API_KEY, BYBIT_API_SECRET")
    st.stop()  # –ù–µ –∏–¥—ë–º –¥–∞–ª—å—à–µ ‚Äî –≤–º–µ—Å—Ç–æ ¬´–±–µ–ª–æ–≥–æ —ç–∫—Ä–∞–Ω–∞¬ª –ø–æ–ª—É—á–∏—à—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    config = Config()
    db = Database()
    state_manager = StateManager(db)

    # ====== –¢–û–ß–ï–ß–ù–û: –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ ARM –≤ config –∏–∑ cfg/env ======
    config.enable_smart_trail      = bool(getattr(cfg, "ENABLE_SMART_TRAIL", True))
    config.trailing_perc           = float(getattr(cfg, "TRAILING_PERC", 0.5))           # –≤ %
    config.trailing_offset_perc    = float(getattr(cfg, "TRAILING_OFFSET_PERC", 0.4))    # –≤ %
    # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    config.trailing_offset         = float(getattr(cfg, "TRAILING_OFFSET_PERC", 0.4))

    # ARM-–ª–æ–≥–∏–∫–∞ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è R-–º–Ω–æ–∂–∏—Ç–µ–ª—è)
    config.use_arm_after_rr        = bool(getattr(cfg, "USE_ARM_AFTER_RR", True))
    config.arm_rr                  = float(getattr(cfg, "ARM_RR", 0.5))

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
    config.risk_pct                = float(getattr(cfg, "RISK_PCT", getattr(config, "risk_pct", 3.0)))
    config.risk_reward             = float(getattr(cfg, "RISK_REWARD", getattr(config, "risk_reward", 1.3)))

    # –°–∏–º–≤–æ–ª/—Ä—ã–Ω–æ–∫
    if hasattr(cfg, "SYMBOL"):
        config.symbol = cfg.SYMBOL
    # ==============================================================================

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if getattr(cfg, "BYBIT_API_KEY", None) and getattr(cfg, "BYBIT_API_SECRET", None):
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit
        bybit_api = BybitAPI(cfg.BYBIT_API_KEY, cfg.BYBIT_API_SECRET, testnet=False)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        try:
            server_time = bybit_api.get_server_time()
            if not server_time:
                st.warning("‚ö†Ô∏è Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
                from demo_mode import create_demo_api
                bybit_api = create_demo_api()
        except:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bybit API. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
            from demo_mode import create_demo_api
            bybit_api = create_demo_api()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
        from demo_mode import create_demo_api
        bybit_api = create_demo_api()
        st.info("‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

    strategy = KWINStrategy(config, bybit_api, state_manager, db)
    return config, db, state_manager, bybit_api, strategy

# ---------- –§–û–ù–û–í–´–ô –¶–ò–ö–õ –î–õ–Ø –õ–ê–ô–í-–†–ï–ñ–ò–ú–ê (—á–∞—â–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –±–∞—Ä—ã) ----------
def _bg_bot_loop(bybit_api, strategy: KWINStrategy, state_manager: StateManager, config: Config, poll_sec: float = 2.0):
    """
    –õ—ë–≥–∫–∏–π –ø–æ—Ç–æ–∫:
      - —Ä–∞–∑ –≤ poll_sec –æ–±–Ω–æ–≤–ª—è–µ—Ç ¬´—Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É¬ª —á–µ—Ä–µ–∑ get_ticker
      - –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ 15m (2-3 —à—Ç—É–∫–∏) –∏ –æ—Ç–¥–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ–≤–Ω–æ 1 —Ä–∞–∑
      - –≤—ã–∑—ã–≤–∞–µ—Ç strategy.process_trailing() –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ calc_on_every_tick
    """
    # –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–¥–∞–Ω–Ω—ã–π –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç–∞–π–º—Å—Ç–∞–º–ø –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –±–∞—Ä–∞ (–º—Å), –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
    last_closed_ts = 0

    while getattr(st.session_state, "bot_running", False):
        try:
            # 1) –û–±–Ω–æ–≤–∏–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è ARM/—Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            try:
                t = bybit_api.get_ticker(config.symbol) if hasattr(bybit_api, "get_ticker") else {}
                # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ —á–∏—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ self.api.get_ticker()
                _ = t
            except Exception:
                pass

            # 2) –í–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 –∑–∞–∫—Ä—ã—Ç—ã–µ 15m —Å–≤–µ—á–∏
            closed_bar = None
            try:
                kl = bybit_api.get_klines(config.symbol, "15", 3) if hasattr(bybit_api, "get_klines") else []
                if kl:
                    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –±–∞—Ä—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                    df = pd.DataFrame(kl)
                    if "timestamp" in df.columns:
                        df = df.sort_values("timestamp")
                        # –±–µ—Ä—ë–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Ä
                        closed_bar = df.iloc[-1].to_dict()
                        ts = int(closed_bar.get("timestamp", 0))
                        # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
                        if ts and ts != last_closed_ts:
                            strategy.on_bar_close_15m({
                                "timestamp": int(closed_bar["timestamp"]),
                                "open": float(closed_bar["open"]),
                                "high": float(closed_bar["high"]),
                                "low":  float(closed_bar["low"]),
                                "close": float(closed_bar["close"])
                            })
                            last_closed_ts = ts
            except Exception:
                pass

            # 3) –ü–æ –º–µ—Å—Ç—É ‚Äî –æ–±–Ω–æ–≤–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥ (–∏–º–∏—Ç–∞—Ü–∏—è calc_on_every_tick)
            try:
                strategy.process_trailing()
            except Exception:
                pass

        except Exception:
            # –Ω–µ —Ä—É—à–∏–º –ø–æ—Ç–æ–∫
            pass

        # –ø–∞—É–∑–∞ –æ–ø—Ä–æ—Å–∞
        time.sleep(poll_sec)

def _start_bot_thread(bybit_api, strategy, state_manager, config):
    if "bot_thread" in st.session_state and st.session_state.bot_thread and st.session_state.bot_thread.is_alive():
        return
    th = threading.Thread(
        target=_bg_bot_loop,
        args=(bybit_api, strategy, state_manager, config, 2.0),
        daemon=True
    )
    st.session_state.bot_thread = th
    th.start()

def _stop_bot_thread():
    # —Å–∞–º –ø–æ—Ç–æ–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –∫–æ–≥–¥–∞ bot_running —Å—Ç–∞–Ω–µ—Ç False
    th = st.session_state.get("bot_thread")
    if th and th.is_alive():
        # –¥–∞–¥–∏–º –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        pass

# ---------------------------------------------------------------------------------------------

def main():

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    config, db, state_manager, bybit_api, strategy = init_components()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    if bybit_api is None:
        st.error("‚ö†Ô∏è API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ BYBIT_API_KEY –∏ BYBIT_API_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        st.stop()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")

        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if 'bot_running' not in st.session_state:
            st.session_state.bot_running = False

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", use_container_width=True):
                if not st.session_state.bot_running:
                    st.session_state.bot_running = True
                    _start_bot_thread(bybit_api, strategy, state_manager, config)
                    st.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        with col2:
            if st.button("‚èπÔ∏è –°—Ç–æ–ø", use_container_width=True):
                if st.session_state.bot_running:
                    st.session_state.bot_running = False
                    _stop_bot_thread()
                    st.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.markdown("### üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø API (–¥–µ–º–æ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π)
            if hasattr(bybit_api, 'current_price'):  # –î–µ–º–æ API
                st.warning("üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
                st.caption("‚ö†Ô∏è Bybit API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                if st.button("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"):
                    st.info("""
                    **–ü—Ä–æ–±–ª–µ–º–∞:** –°–µ—Ä–≤–µ—Ä Replit –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Bybit.

                    **–†–µ—à–µ–Ω–∏—è:**
                    1. üè† –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
                    2. üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPS –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ  
                    3. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏/VPN –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

                    **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** –î–µ–º–æ-—Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
                    """)
            else:
                server_time = bybit_api.get_server_time()
                if server_time:
                    st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –∞–∫—Ç–∏–≤–Ω–æ")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("### ‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.write(f"**–°–∏–º–≤–æ–ª:** {config.symbol}")
        st.write(f"**–†–∏—Å–∫:** {config.risk_pct}%")
        st.write(f"**RR:** {config.risk_reward}")
        st.write(f"**–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è:** {getattr(config, 'max_qty_manual', 0)}")
        st.write(f"**–¢—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if config.enable_smart_trail else '‚ùå'}")

        # ====== –¢–û–ß–ï–ß–ù–û: –±–ª–æ–∫ —Å —Ç—Ä–µ–π–ª–∏–Ω–≥-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏/ARM –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ ======
        with st.expander("üîß Smart Trailing / ARM (—Ç–µ–∫—É—â–∏–µ)"):
            st.write(f"**Trailing % (–æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞):** {config.trailing_perc}%")
            st.write(f"**Trailing Offset %:** {config.trailing_offset_perc}%")
            st.write(f"**Arm after RR:** {'–î–∞' if config.use_arm_after_rr else '–ù–µ—Ç'}")
            st.write(f"**ARM RR (R):** {config.arm_rr}")
        # ======================================================================

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –î–∞—à–±–æ—Ä–¥", "üìà –ì—Ä–∞—Ñ–∏–∫", "üí∞ Equity", "üìã –°–¥–µ–ª–∫–∏"])

    with tab1:
        show_dashboard(db, state_manager, strategy)

    with tab2:
        show_chart(bybit_api, db, strategy)

    with tab3:
        show_equity_curve(db)

    with tab4:
        show_trades_table(db)

def show_dashboard(db, state_manager, strategy):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞"""
    col1, col2, col3, col4 = st.columns(4)

    eq = state_manager.get_equity() or 0.0
    with col1:
        st.metric("üí∞ Equity", f"${float(eq):.2f}")

    with col2:
        current_pos = state_manager.get_current_position()
        if current_pos:
            sz = float(current_pos.get('size') or 0)
            base = getattr(strategy.config, "symbol", "BASE")
            st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", f"{sz:.4f} ({base})")
        else:
            st.metric("üìç –ü–æ–∑–∏—Ü–∏—è", "0")

    with col3:
        trades_today = db.get_trades_count_today()
        st.metric("üìä –°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è", trades_today)

    with col4:
        pnl_today = db.get_pnl_today()
        st.metric("üíµ PnL —Å–µ–≥–æ–¥–Ω—è", f"${float(pnl_today):.2f}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π")

    stats = db.get_performance_stats(days=30) or {}

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üéØ Win Rate", f"{float(stats.get('win_rate', 0)):.1f}%")
    with col2:
        st.metric("üìä Avg RR", f"{float(stats.get('avg_rr', 0)):.2f}")
    with col3:
        st.metric("‚è±Ô∏è Avg Hold Time", f"{float(stats.get('avg_hold_time', 0)):.1f}h")

def show_chart(bybit_api, db, strategy):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å —Å–¥–µ–ª–∫–∞–º–∏"""
    symbol = getattr(strategy.config, "symbol", "ETHUSDT")
    st.markdown(f"### üìà –ì—Ä–∞—Ñ–∏–∫ {symbol}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
    if bybit_api:
        try:
            klines = bybit_api.get_klines(symbol, "15", 100)
            if klines:
                df = pd.DataFrame(klines)
                if "timestamp" in df.columns:
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', errors='coerce')

                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π
                fig = go.Figure(data=[go.Candlestick(
                    x=df['timestamp'],
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name=symbol
                )])

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏
                trades = db.get_recent_trades(50) or []
                for trade in trades:
                    try:
                        if trade.get('entry_time'):
                            entry_time = pd.to_datetime(trade['entry_time'], errors='coerce')
                            fig.add_trace(go.Scatter(
                                x=[entry_time],
                                y=[float(trade['entry_price'])],
                                mode='markers',
                                marker=dict(
                                    symbol='triangle-up' if trade.get('direction') == 'long' else 'triangle-down',
                                    size=10,
                                    color='green' if trade.get('direction') == 'long' else 'red'
                                ),
                                name=f"Entry {trade.get('direction')}"
                            ))
                    except Exception:
                        pass

                fig.update_layout(
                    title=f"{symbol} 15m —Å –≤—Ö–æ–¥–∞–º–∏",
                    xaxis_title="–í—Ä–µ–º—è",
                    yaxis_title="–¶–µ–Ω–∞",
                    height=600
                )

                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def show_equity_curve(db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–≤—É—é equity"""
    st.markdown("### üí∞ –ö—Ä–∏–≤–∞—è Equity")

    equity_data = db.get_equity_history(days=30)

    if equity_data:
        df = pd.DataFrame(equity_data)
        if "timestamp" in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')

        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['equity'],
            mode='lines',
            name='Equity',
            line=dict(color='blue', width=2)
        ))

        fig.update_layout(
            title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ Equity –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="Equity ($)",
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π equity")

def show_trades_table(db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫"""
    st.markdown("### üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")

    trades = db.get_recent_trades(100)

    if trades:
        df = pd.DataFrame(trades)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if 'entry_time' in df.columns:
            df['entry_time'] = pd.to_datetime(df['entry_time'], errors='coerce')
        if 'exit_time' in df.columns:
            df['exit_time'] = pd.to_datetime(df['exit_time'], errors='coerce')
        for col in ('pnl', 'rr', 'entry_price', 'exit_price', 'quantity'):
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        cols = [c for c in ['entry_time', 'direction', 'entry_price', 'exit_price', 'quantity', 'pnl', 'rr', 'status'] if c in df.columns]
        st.dataframe(df[cols].round(4), use_container_width=True)
    else:
        st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
