import os
import json
import logging
import traceback
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template, flash, redirect, url_for
from bybit_api import BybitFuturesClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler("webhook_log.txt", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key-change-in-production")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∫–ª–∏–µ–Ω—Ç–∞ (DEMO —Ä–µ–∂–∏–º)
bybit_client = BybitFuturesClient(testnet=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
trade_stats = {
    "total_signals": 0,
    "successful_trades": 0,
    "failed_trades": 0,
    "last_signal_time": None,
    "last_signal_type": None,
    "active_positions": 0,
    "exchange": "Bybit DEMO"
}

recent_logs = []
MAX_LOGS = 100

# –§–ª–∞–≥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
emergency_stop = False

# –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
last_signals = {}
SIGNAL_COOLDOWN = 5  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏

def add_log(level, message):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏"""
    global recent_logs
    log_entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "level": level,
        "message": message
    }
    recent_logs.insert(0, log_entry)
    if len(recent_logs) > MAX_LOGS:
        recent_logs = recent_logs[:MAX_LOGS]

def check_signal_duplicate(signal_data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global last_signals
    
    signal_key = f"{signal_data.get('type')}_{signal_data.get('symbol')}_{signal_data.get('direction')}"
    current_time = datetime.now()
    
    if signal_key in last_signals:
        time_diff = (current_time - last_signals[signal_key]).total_seconds()
        if time_diff < SIGNAL_COOLDOWN:
            return False, f"–î—É–±–ª–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—à–ª–æ {time_diff:.1f}—Å, –Ω—É–∂–Ω–æ {SIGNAL_COOLDOWN}—Å)"
    
    last_signals[signal_key] = current_time
    return True, "OK"

@app.before_request
def force_json_content_type():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JSON content-type –¥–ª—è webhook'–æ–≤"""
    if request.endpoint == 'webhook' and request.method == 'POST':
        if not request.is_json and request.data:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–∞–∂–µ –µ—Å–ª–∏ Content-Type –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                json.loads(request.data.decode('utf-8'))
                request.environ['CONTENT_TYPE'] = 'application/json'
            except:
                pass

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    return render_template('index.html', stats=trade_stats, recent_logs=recent_logs[:10])

@app.route('/logs')
def logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤"""
    return render_template('logs.html', logs=recent_logs)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView"""
    global trade_stats, emergency_stop
    
    if emergency_stop:
        add_log("WARNING", "üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ù–ê - —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
        return jsonify({"status": "blocked", "reason": "emergency_stop"}), 423
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if request.is_json:
            data = request.get_json()
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ raw data
            data = json.loads(request.data.decode('utf-8'))
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        add_log("INFO", f"üì• Webhook –ø–æ–ª—É—á–µ–Ω: {json.dumps(data, ensure_ascii=False)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        is_unique, duplicate_msg = check_signal_duplicate(data)
        if not is_unique:
            add_log("WARNING", f"üîÑ {duplicate_msg}")
            return jsonify({"status": "duplicate", "message": duplicate_msg}), 409
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        trade_stats["total_signals"] += 1
        trade_stats["last_signal_time"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        trade_stats["last_signal_type"] = data.get('type', 'unknown')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_type = data.get('type', '').lower()
        
        if signal_type == 'entry':
            result = handle_entry_signal(data)
        elif signal_type == 'trail_update':
            result = handle_trail_update(data)
        elif signal_type == 'exit':
            result = handle_exit_signal(data)
        elif signal_type == 'manual_close':
            result = handle_manual_close(data)
        else:
            result = {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}"}
            add_log("ERROR", f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏
        if "error" in result:
            trade_stats["failed_trades"] += 1
            add_log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {result['error']}")
        else:
            trade_stats["successful_trades"] += 1
            add_log("SUCCESS", f"‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return jsonify(result)
        
    except json.JSONDecodeError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}"
        logger.error(error_msg)
        add_log("ERROR", f"‚ùå {error_msg}")
        trade_stats["failed_trades"] += 1
        return jsonify({"error": error_msg}), 400
        
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"{error_msg}\n{traceback.format_exc()}")
        add_log("CRITICAL", f"üí• {error_msg}")
        trade_stats["failed_trades"] += 1
        return jsonify({"error": error_msg}), 500

def handle_entry_signal(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
    try:
        symbol = data.get('symbol', 'ETHUSDT')
        direction = data.get('direction', '').lower()
        quantity = float(data.get('qty', 0))
        entry_price = data.get('entry_price')
        stop_loss = data.get('stop_loss')
        take_profit = data.get('take_profit')
        
        if entry_price:
            entry_price = float(entry_price)
        if stop_loss:
            stop_loss = float(stop_loss)
        if take_profit:
            take_profit = float(take_profit)
        
        add_log("INFO", f"üéØ –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é: {direction.upper()} {quantity} {symbol}")
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ Bybit API
        result = bybit_client.place_order(
            symbol=symbol,
            direction=direction,
            quantity=quantity,
            entry_price=entry_price,
            stop_loss=stop_loss,
            take_profit=take_profit
        )
        
        if result.get("retCode") == 0:
            trade_stats["active_positions"] += 1
            add_log("SUCCESS", f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {direction.upper()} {quantity} {symbol}")
            return {"status": "success", "message": "–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞", "data": result}
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('retMsg', 'Unknown error')}"}
            
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥–∞: {str(e)}"}

def handle_trail_update(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞"""
    try:
        symbol = data.get('symbol', 'ETHUSDT')
        direction = data.get('direction', '').lower()
        new_trail_stop = float(data.get('new_trail_stop', 0))
        
        add_log("INFO", f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞: {symbol} -> {new_trail_stop}")
        
        result = bybit_client.update_trailing_stop(symbol, direction, new_trail_stop)
        
        if result.get("retCode") == 0:
            add_log("SUCCESS", f"‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω: {new_trail_stop}")
            return {"status": "success", "message": "–¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω"}
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞: {result.get('retMsg', 'Unknown error')}"}
            
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞: {str(e)}"}

def handle_exit_signal(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        symbol = data.get('symbol', 'ETHUSDT')
        direction = data.get('direction', '').lower()
        reason = data.get('reason', 'unknown')
        
        add_log("INFO", f"üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {symbol} ({reason})")
        
        result = bybit_client.close_position(symbol, direction)
        
        if result.get("retCode") == 0:
            if trade_stats["active_positions"] > 0:
                trade_stats["active_positions"] -= 1
            add_log("SUCCESS", f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {symbol} ({reason})")
            return {"status": "success", "message": f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ ({reason})"}
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('retMsg', 'Unknown error')}"}
            
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {str(e)}"}

def handle_manual_close(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        symbol = data.get('symbol', 'ETHUSDT')
        direction = data.get('direction', '').lower()
        
        add_log("INFO", f"‚úã –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {symbol}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        bybit_client.cancel_open_orders(symbol)
        result = bybit_client.close_position(symbol, direction)
        
        if result.get("retCode") == 0:
            if trade_stats["active_positions"] > 0:
                trade_stats["active_positions"] -= 1
            add_log("SUCCESS", f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é: {symbol}")
            return {"status": "success", "message": "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é"}
        else:
            return {"error": f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {result.get('retMsg', 'Unknown error')}"}
            
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {str(e)}"}

@app.route('/api/test', methods=['GET'])
def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API"""
    try:
        ping_result = bybit_client.ping()
        account_info = bybit_client.get_account_info()
        positions = bybit_client.get_positions()
        
        add_log("INFO", "üîß API —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        return jsonify({
            "ping": ping_result,
            "account": account_info,
            "positions": positions,
            "exchange": "Bybit DEMO"
        })
    except Exception as e:
        add_log("ERROR", f"‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/emergency_stop', methods=['POST'])
def toggle_emergency_stop():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    global emergency_stop
    emergency_stop = not emergency_stop
    
    status = "–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê" if emergency_stop else "–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê"
    message = f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {status}"
    
    add_log("WARNING" if emergency_stop else "INFO", message)
    flash(message, "warning" if emergency_stop else "success")
    
    return redirect(url_for('index'))

@app.route('/api/stats')
def get_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify(trade_stats)

@app.route('/api/refresh_data')
def refresh_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏"""
    try:
        positions = bybit_client.get_positions()
        
        # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        active_count = 0
        if positions.get("retCode") == 0:
            position_list = positions.get("result", {}).get("list", [])
            active_count = len([p for p in position_list if float(p.get("size", 0)) > 0])
        
        trade_stats["active_positions"] = active_count
        add_log("INFO", f"üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        flash("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success")
        return redirect(url_for('index'))
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        add_log("ERROR", f"‚ùå {error_msg}")
        flash(error_msg, "error")
        return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)